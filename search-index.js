var searchIndex = {};
searchIndex["timely"] = {"doc":"Timely dataflow is framework for managing and executing data-parallel dataflow computations.","items":[[11,"index","timely_communication::allocator::thread","",0,null],[11,"peers","","",0,null],[11,"allocate","","",0,null],[11,"new","","",0,null],[11,"inner","timely_communication::allocator::process","",1,null],[11,"new_vector","","",1,{"inputs":[{"name":"usize"}],"output":{"name":"vec"}}],[11,"index","","",1,null],[11,"peers","","",1,null],[11,"allocate","","",1,null],[11,"inner","timely_communication::allocator::binary","",2,null],[11,"index","","",2,null],[11,"peers","","",2,null],[11,"allocate","","",2,null],[11,"index","timely_communication::allocator::generic","The index of the worker out of `(0..self.peers())`.",3,null],[11,"peers","","The number of workers.",3,null],[11,"allocate","","Constructs several send endpoints and one receive endpoint.",3,null],[11,"index","","",3,null],[11,"peers","","",3,null],[11,"allocate","","",3,null],[11,"from_args","timely_communication::initialize","Constructs a new configuration by parsing supplied text arguments.",4,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"join","","Waits on the worker threads and returns the results they produce.",5,null],[11,"drop","","",5,null],[11,"push","alloc::boxed","",6,null],[11,"pull","","",6,null],[8,"Push","timely","Pushing elements of type `T`.",null,null],[10,"push","","Pushes `element` and provides the opportunity to take ownership.",7,null],[11,"send","","Pushes `element` and drops any resulting resources.",7,null],[11,"done","","Pushes `None`, conventionally signalling a flush.",7,null],[8,"Pull","","Pulling elements of type `T`.",null,null],[10,"pull","","Pulls an element and provides the opportunity to take ownership.",8,null],[11,"recv","","Takes an `Option&lt;T&gt;` and leaves `None` behind.",8,null],[4,"Configuration","","Possible configurations for the communication infrastructure.",null,null],[13,"Thread","","Use one thread.",4,null],[13,"Process","","Use one process with an indicated number of threads.",4,null],[13,"Cluster","","Expect multiple processes indicated by `(threads, process, host_list, report)`.",4,null],[0,"progress","","Progress tracking mechanisms to support notification in timely dataflow",null,null],[0,"count_map","timely::progress","A mapping from general types `T` to `i64`, with zero values absent.",null,null],[3,"CountMap","timely::progress::count_map","Represents a map from `T` to `i64` with values mapping to zero removed.",null,null],[11,"fmt","","",9,null],[11,"clone","","",9,null],[11,"default","","",9,{"inputs":[],"output":{"name":"countmap"}}],[11,"update","","Adds `val` to the value associated with `key`, returning the new value.",9,null],[11,"into_inner","","Extracts the `Vec&lt;(T, i64)&gt;` from the map, consuming it.",9,null],[11,"iter","","Iterates over the contents of the map.",9,null],[11,"clear","","Clears the map.",9,null],[11,"len","","The number of non-zero keys in the map.",9,null],[11,"is_empty","","True iff all keys have value zero.",9,null],[11,"pop","","Returns an element of the map, or `None` if it is empty.",9,null],[11,"new","","Allocates a new empty `CountMap`.",9,{"inputs":[],"output":{"name":"countmap"}}],[11,"new_from","","Allocates a new `CountMap` with a single entry.",9,{"inputs":[{"name":"t"},{"name":"i64"}],"output":{"name":"countmap"}}],[11,"drain_into","","Drains `self` into `other`.",9,null],[11,"extend","","Performs a sequence of updates described by `iterator`.",9,null],[0,"frontier","timely::progress","Tracks minimal sets of mutually incomparable elements of a partial order.",null,null],[3,"Antichain","timely::progress::frontier","A set of mutually incomparable elements.",null,null],[3,"MutableAntichain","","An antichain based on a multiset whose elements frequencies can be updated.",null,null],[11,"fmt","","",10,null],[11,"clone","","",10,null],[11,"default","","",10,{"inputs":[],"output":{"name":"antichain"}}],[11,"insert","","Updates the `Antichain` if the element is not greater than or equal to some present element.",10,null],[11,"new","","Creates a new empty `Antichain`.",10,{"inputs":[],"output":{"name":"antichain"}}],[11,"from_elem","","Creates a new singleton `Antichain`.",10,{"inputs":[{"name":"t"}],"output":{"name":"antichain"}}],[11,"elements","","Reveals the elements in the `Antichain`.",10,null],[11,"clone","","",11,null],[11,"fmt","","",11,null],[11,"default","","",11,{"inputs":[],"output":{"name":"mutableantichain"}}],[11,"new","","Creates a new empty `MutableAntichain`.",11,{"inputs":[],"output":{"name":"mutableantichain"}}],[11,"clear","","Removes all elements from the antichain.",11,null],[11,"elements","","Reveals the element in the `MutableAntichain`.",11,null],[11,"new_bottom","","Creates a new singleton `MutableAntichain`.",11,{"inputs":[{"name":"t"}],"output":{"name":"mutableantichain"}}],[11,"empty","","Returns true if there are no elements in the `MutableAntichain`.",11,null],[11,"lt","","Returns true if any item in the `MutableAntichain` is strictly less than the argument.",11,null],[11,"le","","Returns true if any item in the `MutableAntichain` is less than or equal to the argument.",11,null],[11,"count","","Returns the number of times an element exists in the set.",11,null],[11,"update_into_cm","","Incorporates `updates` into the antichain, pushing frontier changes into `results`.",11,null],[11,"update_weight","","Performs a single update to the antichain, pushing frontier changes into `results`.",11,null],[11,"update","","Applies a single update to the antichain.",11,null],[11,"update_iter_and","","Applies updates to the antichain and applies `action` to each frontier change.",11,null],[11,"test_size","","Tests the size of the antichain against a threshould.",11,null],[11,"update_and","","Applies an update to the antichain and takes an action on any frontier changes.",11,null],[0,"nested","timely::progress","Coordination of progress information between a scope-as-operator and its children operators.",null,null],[0,"pointstamp_counter","timely::progress::nested","Manages pointstamp counts (timestamp, location) within a sub operator.",null,null],[3,"PointstampCounter","timely::progress::nested::pointstamp_counter","Represents changes to pointstamps before and after transmission along a scope&#39;s topology.",null,null],[12,"source","","timestamp updates indexed by (scope, output)",12,null],[12,"target","","timestamp updates indexed by (scope, input)",12,null],[12,"pushed","","pushed updates indexed by (scope, input)",12,null],[11,"default","","",12,{"inputs":[],"output":{"name":"pointstampcounter"}}],[11,"update_target","","Updates the count for a time at a target.",12,null],[11,"update_source","","Updates the count for a time at a source.",12,null],[11,"clear","","Clears the pointstamp counter.",12,null],[11,"allocate_for_operator","","Allocates internal state given an operator&#39;s inputs and outputs.",12,null],[0,"summary","timely::progress::nested","Path summaries that are either child local, or leave the scope and re-enter from the parent.",null,null],[4,"Summary","timely::progress::nested::summary","Summarizes a path within a scope.",null,null],[13,"Local","","Reachable within the scope, and a summary adjusting only the inner coordinate.",13,null],[13,"Outer","","Reachable outside the scope, with adjustments to both coordinates.",13,null],[11,"fmt","","",13,null],[11,"eq","","",13,null],[11,"ne","","",13,null],[11,"clone","","",13,null],[11,"default","","",13,{"inputs":[],"output":{"name":"summary"}}],[11,"partial_cmp","","",13,null],[11,"results_in","","",13,null],[11,"followed_by","","",13,null],[11,"fmt","","",13,null],[0,"product","timely::progress::nested","A pair timestamp suitable for use with the product partial order.",null,null],[3,"Product","timely::progress::nested::product","A nested pair of timestamps, one outer and one inner.",null,null],[12,"outer","","Outer timestamp.",14,null],[12,"inner","","Inner timestamp.",14,null],[11,"cmp","","",14,null],[11,"default","","",14,{"inputs":[],"output":{"name":"product"}}],[11,"eq","","",14,null],[11,"ne","","",14,null],[11,"hash","","",14,null],[11,"clone","","",14,null],[11,"new","","Creates a new product from outer and inner coordinates.",14,{"inputs":[{"name":"touter"},{"name":"tinner"}],"output":{"name":"product"}}],[11,"fmt","","",14,null],[11,"partial_cmp","","",14,null],[11,"le","","",14,null],[11,"ge","","",14,null],[11,"embalm","","",14,null],[11,"entomb","","",14,null],[11,"exhume","","",14,null],[0,"subgraph","timely::progress::nested","Implements `Operate` for a scoped collection of child operators.",null,null],[3,"Source","timely::progress::nested::subgraph","Names a source of a data stream.",null,null],[12,"index","","Index of the source operator.",15,null],[12,"port","","Number of the output port from the operator.",15,null],[3,"Target","","Names a target of a data stream.",null,null],[12,"index","","Index of the target operator.",16,null],[12,"port","","Nmuber of the input port to the operator.",16,null],[3,"Subgraph","","A dataflow subgraph.",null,null],[12,"path","","A sequence of integers uniquely identifying the subgraph.",17,null],[12,"index","","The index assigned to the subgraph by its parent.",17,null],[11,"fmt","","",15,null],[11,"eq","","",15,null],[11,"ne","","",15,null],[11,"clone","","",15,null],[11,"fmt","","",16,null],[11,"eq","","",16,null],[11,"ne","","",16,null],[11,"clone","","",16,null],[11,"name","","",17,null],[11,"local","","",17,null],[11,"inputs","","",17,null],[11,"outputs","","",17,null],[11,"get_internal_summary","","",17,null],[11,"set_external_summary","","",17,null],[11,"push_external_progress","","",17,null],[11,"pull_internal_progress","","",17,null],[11,"new_input","","Allocates a new input to the subgraph and returns the assigned index.",17,null],[11,"new_output","","Allocates a new output from the subgraph and returns the assigned index.",17,null],[11,"connect","","Introduces a dependence from the source to the target.",17,null],[11,"new_from","","Creates a new Subgraph from a channel allocator and &quot;descriptive&quot; indices.",17,{"inputs":[{"name":"a"},{"name":"usize"},{"name":"vec"}],"output":{"name":"subgraph"}}],[11,"allocate_child_id","","Allocates a new child identifier, for later use.",17,null],[11,"add_child","","Adds a new child to the subgraph.",17,null],[0,"timestamp","timely::progress","A partially ordered measure of progress at each timely dataflow location.",null,null],[3,"RootTimestamp","timely::progress::timestamp","An empty timestamp used by the root scope.",null,null],[3,"RootSummary","","An empty path summary for root timestamps.",null,null],[8,"Timestamp","","A composite trait for types that serve as timestamps in timely dataflow.",null,null],[16,"Summary","","A type summarizing action on a timestamp along a dataflow path.",18,null],[8,"PathSummary","","A summary of how a timestamp advances along a timely dataflow path.",null,null],[10,"results_in","","Advances a timestamp according to the timestamp actions on the path.",19,null],[10,"followed_by","","Composes this path summary with another path summary.",19,null],[11,"default","","",20,{"inputs":[],"output":{"name":"roottimestamp"}}],[11,"eq","","",20,null],[11,"partial_cmp","","",20,null],[11,"cmp","","",20,null],[11,"hash","","",20,null],[11,"clone","","",20,null],[11,"fmt","","",20,null],[11,"new","","Constructs a new `Product&lt;RootTimestamp,T&gt;`.",20,{"inputs":[{"name":"t"}],"output":{"name":"product"}}],[11,"default","","",21,{"inputs":[],"output":{"name":"rootsummary"}}],[11,"fmt","","",21,null],[11,"eq","","",21,null],[11,"partial_cmp","","",21,null],[11,"cmp","","",21,null],[11,"clone","","",21,null],[11,"results_in","","",21,null],[11,"followed_by","","",21,null],[0,"operate","timely::progress","Methods which describe an operators topology, and the progress it makes.",null,null],[8,"Operate","timely::progress::operate","Methods for describing an operators topology, and the progress it makes.",null,null],[11,"local","","Indicates if the operator is strictly local to this worker.",22,null],[10,"inputs","","The number of inputs.",22,null],[10,"outputs","","The number of outputs.",22,null],[11,"get_internal_summary","","Fetches summary information about internal structure of the operator.",22,null],[11,"set_external_summary","","Presents summary information about the external structure around the operator.",22,null],[11,"push_external_progress","","Reports a summary of progress statements external to the operator and its peer group.",22,null],[10,"pull_internal_progress","","Retrieves a summary of progress statements internal to the operator.",22,null],[10,"name","","A descripitive name for the operator",22,null],[11,"notify_me","","Indicates of whether the operator requires `push_external_progress` information or not.",22,null],[0,"broadcast","timely::progress","Broadcasts progress information among workers.",null,null],[3,"Progcaster","timely::progress::broadcast","Manages broadcasting of progress updates to and receiving updates from workers.",null,null],[6,"ProgressVec","","A list of progress updates corresponding to `((child_scope, [in/out]_port, timestamp), delta)`",null,null],[11,"new","","Creates a new `Progcaster` using a channel from the supplied allocator.",23,{"inputs":[{"name":"a"}],"output":{"name":"progcaster"}}],[11,"send_and_recv","","Sends and receives progress updates, broadcasting the contents of `messages` and `internal`,\nand updating each with updates from other workers.",23,null],[0,"dataflow","timely","Abstractions for timely dataflow programming.",null,null],[0,"operators","timely::dataflow","Extension traits for `Stream` implementing various operators.",null,null],[3,"InputHandle","timely::dataflow::operators","Handle to an operator&#39;s input stream.",null,null],[3,"OutputHandle","","Handle to an operator&#39;s output stream.",null,null],[3,"Notificator","","Tracks requests for notification and delivers available notifications.",null,null],[3,"Capability","","A capability for timestamp `t` represents a permit for an operator that holds the capability\nto send data and request notifications at timestamp `t`.",null,null],[0,"enterleave","","Extension traits to move a `Stream` between an outer `Scope` and inner `Scope`.",null,null],[8,"Enter","timely::dataflow::operators::enterleave","Extension trait to move a `Stream` into a child of its current `Scope`.",null,null],[10,"enter","","Moves the `Stream` argument into a child of its current `Scope`.",24,null],[8,"EnterAt","","Extension trait to move a `Stream` into a child of its current `Scope` setting the timestamp for each element.",null,null],[10,"enter_at","","Moves the `Stream` argument into a child of its current `Scope` setting the timestamp for each element by `initial`.",25,null],[8,"Leave","","Extension trait to move a `Stream` to the parent of its current `Scope`.",null,null],[10,"leave","","Moves a `Stream` to the parent of its current `Scope`.",26,null],[0,"unary","timely::dataflow::operators","Methods to construct generic streaming and blocking unary operators.",null,null],[8,"Unary","timely::dataflow::operators::unary","Methods to construct generic streaming and blocking unary operators.",null,null],[10,"unary_stream","","Creates a new dataflow operator that partitions its input stream by a parallelization\nstrategy `pact`, and repeatedly invokes `logic` which can read from the input stream and\nwrite to the output stream.",27,null],[10,"unary_notify","","Creates a new dataflow operator that partitions its input stream by a parallelization\nstrategy `pact`, and repeatedly invokes `logic` which can read from the input stream,\nwrite to the output stream, and request and receive notifications. The method also requires\na vector of the initial notifications the operator requires (commonly none).",27,null],[0,"input","timely::dataflow::operators","Create new `Streams` connected to external inputs.",null,null],[3,"Handle","timely::dataflow::operators::input","A handle to an input `Stream`, used to introduce data to a timely dataflow computation.",null,null],[8,"Input","","Create a new `Stream` and `Handle` through which to supply input.",null,null],[10,"new_input","","Create a new `Stream` and `Handle` through which to supply input.",28,null],[11,"send","","Sends one record into the corresponding timely dataflow `Stream`, at the current epoch.",29,null],[11,"advance_to","","Advances the current epoch to `next`.",29,null],[11,"close","","Closes the input.",29,null],[11,"epoch","","Reports the current epoch.",29,null],[11,"time","","Reports the current timestamp.",29,null],[11,"drop","","",29,null],[0,"unordered_input","timely::dataflow::operators","Create new `Streams` connected to external inputs.",null,null],[3,"UnorderedHandle","timely::dataflow::operators::unordered_input","A handle to an input `Stream`, used to introduce data to a timely dataflow computation.",null,null],[8,"UnorderedInput","","Create a new `Stream` and `Handle` through which to supply input.",null,null],[10,"new_unordered_input","","Create a new capability-based `Stream` and `Handle` through which to supply input. This\ninput supports multiple open epochs (timestamps) at the same time.",30,null],[11,"session","","Allocates a new automatically flushing session based on the supplied capability.",31,null],[11,"drop","","",31,null],[0,"feedback","timely::dataflow::operators","Create cycles in a timely dataflow graph.",null,null],[3,"Handle","timely::dataflow::operators::feedback","A handle used to bind the source of a loop variable.",null,null],[8,"LoopVariable","","Creates a `Stream` and a `Handle` to later bind the source of that `Stream`.",null,null],[10,"loop_variable","","Creates a `Stream` and a `Handle` to later bind the source of that `Stream`.",32,null],[8,"ConnectLoop","","Connect a `Stream` to the input of a loop variable.",null,null],[10,"connect_loop","","Connect a `Stream` to be the input of a loop variable.",33,null],[0,"concat","timely::dataflow::operators","Merges the contents of multiple streams.",null,null],[8,"Concat","timely::dataflow::operators::concat","Merge the contents of two streams.",null,null],[10,"concat","","Merge the contents of two streams.",34,null],[8,"Concatenate","","Merge the contents of multiple streams.",null,null],[10,"concatenate","","Merge the contents of multiple streams.",35,null],[0,"partition","timely::dataflow::operators","Partition a stream of records into multiple streams.",null,null],[8,"Partition","timely::dataflow::operators::partition","Partition a stream of records into multiple streams.",null,null],[10,"partition","","Produces `parts` output streams, containing records produced and assigned by `route`.",36,null],[0,"map","timely::dataflow::operators","Extension methods for `Stream` based on record-by-record transformation.",null,null],[8,"Map","timely::dataflow::operators::map","Extension trait for `Stream`.",null,null],[10,"map","","Consumes each element of the stream and yields a new element.",37,null],[10,"map_in_place","","Updates each element of the stream and yields the element, re-using memory where possible.",37,null],[10,"flat_map","","Consumes each element of the stream and yields some number of new elements.",37,null],[0,"inspect","timely::dataflow::operators","Extension trait and implementation for observing and action on streamed data.",null,null],[8,"Inspect","timely::dataflow::operators::inspect","Methods to inspect records and batches of records on a stream.",null,null],[10,"inspect","","Runs a supplied closure on each observed data element.",38,null],[10,"inspect_batch","","Runs a supplied closure on each observed data batch (time and data slice).",38,null],[0,"filter","timely::dataflow::operators","Filters a stream by a predicate.",null,null],[8,"Filter","timely::dataflow::operators::filter","Extension trait for filtering.",null,null],[10,"filter","","Returns a new instance of `self` containing only records satisfying `predicate`.",39,null],[0,"binary","timely::dataflow::operators","Methods to construct generic streaming and blocking binary operators.",null,null],[8,"Binary","timely::dataflow::operators::binary","Methods to construct generic streaming and blocking binary operators.",null,null],[10,"binary_stream","","Creates a new dataflow operator that partitions each of its input stream by a parallelization\nstrategy `pact`, and repeatedly invokes `logic` which can read from the input streams and\nwrite to the output stream.",40,null],[10,"binary_notify","","Creates a new dataflow operator that partitions its input stream by a parallelization\nstrategy `pact`, and repeatedly invokes `logic` which can read from the input streams,\nwrite to the output stream, and request and receive notifications. The method also requires\na vector of the initial notifications the operator requires (commonly none).",40,null],[0,"delay","timely::dataflow::operators","Operators acting on timestamps to logically delay records",null,null],[8,"Delay","timely::dataflow::operators::delay","Methods to advance the timestamps of records or batches of records.",null,null],[10,"delay","","Advances the timestamp of records using a supplied function.",41,null],[10,"delay_batch","","Advances the timestamp of batches of records using a supplied function.",41,null],[0,"exchange","timely::dataflow::operators","Exchange records between workers.",null,null],[8,"Exchange","timely::dataflow::operators::exchange","Exchange records between workers.",null,null],[10,"exchange","","Exchange records so that all records with the same `route` are at the same worker.",42,null],[0,"broadcast","timely::dataflow::operators","Broadcast records to all workers.",null,null],[8,"Broadcast","timely::dataflow::operators::broadcast","Broadcast records to all workers.",null,null],[10,"broadcast","","Broadcast records to all workers.",43,null],[0,"probe","timely::dataflow::operators","Monitor progress at a `Stream`.",null,null],[3,"Handle","timely::dataflow::operators::probe","Reports information about progress at the probe.",null,null],[8,"Probe","","Monitors progress at a `Stream`.",null,null],[10,"probe","","Constructs a progress probe which indicates which timestamps have elapsed at the operator.",44,null],[11,"lt","","returns true iff the frontier is strictly less than `time`.",45,null],[11,"le","","returns true iff the frontier is less than or equal to `time`.",45,null],[11,"done","","returns true iff the frontier is empty.",45,null],[0,"to_stream","timely::dataflow::operators","Conversion to the `Stream` type from iterators.",null,null],[8,"ToStream","timely::dataflow::operators::to_stream","Converts to a timely `Stream`.",null,null],[10,"to_stream","","Converts to a timely `Stream`.",46,null],[0,"capture","timely::dataflow::operators","Operators which capture and replay streams of records.",null,null],[3,"EventLink","timely::dataflow::operators::capture","A linked list of Event&lt;T, D&gt;.",null,null],[12,"event","","An event.",47,null],[12,"next","","The next event, if it exists.",47,null],[3,"EventWriter","","A wrapper for `W: Write` implementing `EventPusher&lt;T, D&gt;`.",null,null],[3,"EventReader","","A Wrapper for `R: Read` implementing `EventIterator&lt;T, D&gt;`.",null,null],[4,"Event","","Data and progres events of the captured stream.",null,null],[13,"Start","","An initial marker, used only to start the linked list implementation.",48,null],[13,"Progress","","Progress received via `push_external_progress`.",48,null],[13,"Messages","","Messages received via the data stream.",48,null],[8,"Capture","","Capture a stream of timestamped data for later replay.",null,null],[10,"capture_into","","Captures a stream of timestamped data for later replay.",49,null],[11,"capture","","Captures a stream using Rust&#39;s MPSC channels.",49,null],[8,"Extract","","Supports extracting a sequence of timestamp and data.",null,null],[10,"extract","","Converts `self` into a sequence of timestamped data.",50,null],[8,"EventIterator","","Iterates over contained `Event&lt;T, D&gt;`.",null,null],[10,"next","","Iterates over references to `Event&lt;T, D&gt;` elements.",51,null],[8,"EventPusher","","Receives `Event&lt;T, D&gt;` events.",null,null],[10,"push","","Provides a new `Event&lt;T, D&gt;` to the pusher.",52,null],[8,"Replay","","Replay a capture stream into a scope with the same timestamp.",null,null],[10,"replay_into","","Replays `self` into the provided scope, as a `Stream&lt;S, D&gt;`.",53,null],[11,"fmt","","",48,null],[11,"extract","std::sync::mpsc","",54,null],[11,"embalm","timely::dataflow::operators::capture","",48,null],[11,"entomb","","",48,null],[11,"exhume","","",48,null],[11,"new","","Allocates a new `EventLink`.",47,{"inputs":[],"output":{"name":"eventlink"}}],[11,"push","std::sync::mpsc","",55,null],[11,"push","alloc::rc","",56,null],[11,"next","","",56,null],[11,"new","timely::dataflow::operators::capture","Allocates a new `EventWriter` wrapping a supplied writer.",57,{"inputs":[{"name":"w"}],"output":{"name":"eventwriter"}}],[11,"push","","",57,null],[11,"new","","Allocates a new `EventReader` wrapping a supplied reader.",58,{"inputs":[{"name":"r"}],"output":{"name":"eventreader"}}],[11,"next","","",58,null],[0,"aggregation","timely::dataflow::operators","Aggregation operators of various flavors",null,null],[0,"state_machine","timely::dataflow::operators::aggregation","General purpose state transition operator.",null,null],[8,"StateMachine","timely::dataflow::operators::aggregation::state_machine","Generic state-transition machinery: each key has a state, and receives a sequence of events.\nEvents are applied in time-order, but no other promises are made. Each state transition can\nproduce output, which is sent. ",null,null],[10,"state_machine","","Tracks a state for each presented key, using user-supplied state transition logic.",59,null],[0,"aggregate","timely::dataflow::operators::aggregation","General purpose intra-timestamp aggregation",null,null],[8,"Aggregate","timely::dataflow::operators::aggregation::aggregate","Generic intra-timestamp aggregation",null,null],[10,"aggregate","","Aggregates data of the form `(key, val)`, using user-supplied logic.",60,null],[0,"reclock","timely::dataflow::operators","Extension methods for `Stream` based on record-by-record transformation.",null,null],[8,"Reclock","timely::dataflow::operators::reclock","Extension trait for reclocking a stream.",null,null],[10,"reclock","","Delays records until an input is observed on the `clock` input.",61,null],[0,"count","timely::dataflow::operators","Counts the number of records at each time.",null,null],[8,"Accumulate","timely::dataflow::operators::count","Accumulates records within a timestamp.",null,null],[10,"accumulate","","Accumulates records within a timestamp.",62,null],[11,"count","","Counts the number of records observed at each time.",62,null],[11,"next","timely::dataflow::operators","Reads the next input buffer (at some timestamp `t`) and a corresponding capability for `t`.\nThe timestamp `t` of the input buffer can be retrieved by invoking `.time()` on the capability.\nReturns `None` when there&#39;s no more data available.",63,null],[11,"for_each","","Repeatedly calls `logic` till exhaustion of the available input data.\n`logic` receives a capability and an input buffer.",63,null],[11,"session","","Obtains a session that can send data at the timestamp associated with capability `cap`.",64,null],[11,"new","","Allocates a new `Notificator`.",65,{"inputs":[],"output":{"name":"notificator"}}],[11,"update_frontier_from_cm","","Updates the `Notificator`&#39;s frontiers from a `CountMap` per input.",65,null],[11,"frontier","","Reveals the elements in the frontier of the indicated input.",65,null],[11,"notify_at","","Requests a notification at the time associated with capability `cap`. Takes ownership of\nthe capability.",65,null],[11,"for_each","","Repeatedly calls `logic` till exhaustion of the available notifications.",65,null],[11,"next","","Retrieve the next available notification.",65,null],[11,"time","","The timestamp associated with this capability.",66,null],[11,"delayed","","Makes a new capability for a timestamp `new_time` greater or equal to the timestamp of\nthe source capability (`self`).",66,null],[11,"drop","","",66,null],[11,"clone","","",66,null],[11,"deref","","",66,null],[11,"fmt","","",66,null],[0,"channels","timely::dataflow","Structured communication between timely dataflow operators.",null,null],[0,"pushers","timely::dataflow::channels","A collection of types that may be pushed at.",null,null],[0,"tee","timely::dataflow::channels::pushers","A `Push` implementor with a list of `Box&lt;Push&gt;` to forward pushes to.",null,null],[3,"Tee","timely::dataflow::channels::pushers::tee","Wraps a shared list of `Box&lt;Push&gt;` to forward pushes to. Owned by `Stream`.",null,null],[3,"TeeHelper","","A shared list of `Box&lt;Push&gt;` used to add `Push` implementors.",null,null],[11,"push","","",67,null],[11,"new","","Allocates a new pair of `Tee` and `TeeHelper`.",67,null],[11,"clone","","",67,null],[11,"add_pusher","","Adds a new `Push` implementor to the list of recipients shared with a `Stream`.",68,null],[11,"clone","","",68,null],[0,"exchange","timely::dataflow::channels::pushers","The exchange pattern distributes pushed data between many target pushees.",null,null],[3,"Exchange","timely::dataflow::channels::pushers::exchange","Distributes records among target pushees according to a distribution function.",null,null],[11,"new","","Allocates a new `Exchange` from a supplied set of pushers and a distribution function.",69,{"inputs":[{"name":"vec"},{"name":"h"}],"output":{"name":"exchange"}}],[11,"push","","",69,null],[0,"counter","timely::dataflow::channels::pushers","A wrapper which counts the number of records pushed past and updates a shared count map.",null,null],[3,"Counter","timely::dataflow::channels::pushers::counter","A wrapper which updates shared `counts` based on the number of records pushed.",null,null],[11,"push","","",70,null],[11,"new","","Allocates a new `Counter` from a pushee and shared counts.",70,{"inputs":[{"name":"p"},{"name":"rc"}],"output":{"name":"counter"}}],[11,"pull_progress","","Extracts shared counts into `updates`.",70,null],[0,"buffer","timely::dataflow::channels::pushers","Buffering and session mechanisms to provide the appearance of record-at-a-time sending,\nwith the performance of batched sends.",null,null],[3,"Buffer","timely::dataflow::channels::pushers::buffer","Buffers data sent at the same time, for efficient communication.",null,null],[3,"Session","","An output session for sending records at a specified time.",null,null],[3,"AutoflushSession","","A session which will flush itself when dropped.",null,null],[11,"new","","Creates a new `Buffer`.",71,{"inputs":[{"name":"p"}],"output":{"name":"buffer"}}],[11,"session","","Returns a `Session`, which accepts data to send at the associated time",71,null],[11,"autoflush_session","","Allocates a new `AutoflushSession` which flushes itself on drop.",71,null],[11,"inner","","Returns a reference to the inner `P: Push` type.",71,null],[11,"cease","","Flushes all data and pushes a `None` to `self.pusher`, indicating a flush.",71,null],[11,"give","","Provides one record at the time specified by the `Session`.",72,null],[11,"give_iterator","","Provides an iterator of records at the time specified by the `Session`.",72,null],[11,"give_content","","Provides a fully formed `Content&lt;D&gt;` message for senders which can use this type.",72,null],[11,"give","","Transmits a single record.",73,null],[11,"give_iterator","","Transmits records produced by an iterator.",73,null],[11,"give_content","","Transmits a pre-packed batch of data.",73,null],[11,"drop","","",73,null],[0,"pullers","timely::dataflow::channels","A collection of types that may be pulled from.",null,null],[0,"counter","timely::dataflow::channels::pullers","A wrapper which accounts records pulled past in a shared count map.",null,null],[3,"Counter","timely::dataflow::channels::pullers::counter","A wrapper which accounts records pulled past in a shared count map.",null,null],[11,"next","","Retrieves the next timestamp and batch of data.",74,null],[11,"new","","Allocates a new `Counter` from a boxed puller.",74,{"inputs":[{"name":"box"}],"output":{"name":"counter"}}],[11,"pull_progress","","Extracts progress information into `consumed`.",74,null],[0,"message","timely::dataflow::channels","Types relating to batching of timestamped records.\nCore type for communicating a collection of `D: Data` records.",null,null],[3,"Message","timely::dataflow::channels::message","A serializable representation of timestamped data.",null,null],[12,"time","","The timestamp associated with the message.",75,null],[12,"data","","The data in the message.",75,null],[12,"from","","The source worker.",75,null],[12,"seq","","A sequence number for this worker-to-worker stream.",75,null],[4,"Content","","A batch of data, represented either as serialized bytes or typed Rust objects.",null,null],[13,"Bytes","","A serialized representation of data.",76,null],[13,"Typed","","Typed data, which may be efficiently mutated or claimed for ownership.",76,null],[11,"clone","","",75,null],[11,"new","","Allocates a new message from a time, content, source worker id, and sequence number.",75,{"inputs":[{"name":"t"},{"name":"content"},{"name":"usize"},{"name":"usize"}],"output":{"name":"message"}}],[11,"into_bytes","","",75,null],[11,"from_bytes","","",75,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"clone","","",76,null],[11,"take","","Gives ownership of the content, leaving an empty vector behind.",76,null],[11,"default_length","","Default number of elements in a typed allocated message. This could vary as a function of\n`std::mem::size_of::&lt;D&gt;()`, so is left as a method rather than a constant.",76,{"inputs":[],"output":{"name":"usize"}}],[11,"len","","The length of the underlying typed vector.",76,null],[11,"from_typed","","Constructs a `Message` from typed data, replacing its argument with `Vec::new()`.",76,{"inputs":[{"name":"vec"}],"output":{"name":"content"}}],[11,"into_typed","","Returns the typed vector, cleared, or a Vec::new() if the data are binary (and drops them\non the floor, I guess! Ouch.\nALLOC : dropping of binary data. likely called only by persons who pushed typed data on,\nALLOC : so perhaps not all that common. Could put a panic! here just for fun! :D\nALLOC : casual dropping of contents of `data`, which might have allocated memory.",76,null],[11,"push_at","","Pushes `buffer` into `pusher`, ensuring that `buffer` remains valid once returned.",76,{"inputs":[{"name":"vec"},{"name":"t"},{"name":"p"}],"output":null}],[11,"replace_with","","Swaps the contents with another vector.",76,null],[11,"new","collections::vec","Constructs a new, empty `Vec&lt;T&gt;`.",77,{"inputs":[],"output":{"name":"vec"}}],[11,"with_capacity","","Constructs a new, empty `Vec&lt;T&gt;` with the specified capacity.",77,{"inputs":[{"name":"usize"}],"output":{"name":"vec"}}],[11,"from_raw_parts","","Creates a `Vec&lt;T&gt;` directly from the raw components of another vector.",77,null],[11,"capacity","","Returns the number of elements the vector can hold without\nreallocating.",77,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted\nin the given `Vec&lt;T&gt;`. The collection may reserve more space to avoid\nfrequent reallocations.",77,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to\nbe inserted in the given `Vec&lt;T&gt;`. Does nothing if the capacity is already\nsufficient.",77,null],[11,"shrink_to_fit","","Shrinks the capacity of the vector as much as possible.",77,null],[11,"into_boxed_slice","","Converts the vector into Box&lt;[T]&gt;.",77,null],[11,"truncate","","Shorten a vector to be `len` elements long, dropping excess elements.",77,null],[11,"as_slice","","Extracts a slice containing the entire vector.",77,null],[11,"as_mut_slice","","Extracts a mutable slice of the entire vector.",77,null],[11,"set_len","","Sets the length of a vector.",77,null],[11,"swap_remove","","Removes an element from anywhere in the vector and return it, replacing\nit with the last element.",77,null],[11,"insert","","Inserts an element at position `index` within the vector, shifting all\nelements after it to the right.",77,null],[11,"remove","","Removes and returns the element at position `index` within the vector,\nshifting all elements after it to the left.",77,null],[11,"retain","","Retains only the elements specified by the predicate.",77,null],[11,"push","","Appends an element to the back of a collection.",77,null],[11,"pop","","Removes the last element from a vector and returns it, or `None` if it\nis empty.",77,null],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",77,null],[11,"drain","","Create a draining iterator that removes the specified range in the vector\nand yields the removed items.",77,null],[11,"clear","","Clears the vector, removing all values.",77,null],[11,"len","","Returns the number of elements in the vector.",77,null],[11,"is_empty","","Returns `true` if the vector contains no elements.",77,null],[11,"split_off","","Splits the collection into two at the given index.",77,null],[11,"resize","","Resizes the `Vec` in-place so that `len()` is equal to `new_len`.",77,null],[11,"extend_from_slice","","Appends all elements in a slice to the `Vec`.",77,null],[11,"dedup","","Removes consecutive repeated elements in the vector.",77,null],[11,"clone","collections::binary_heap","",78,null],[11,"clone_from","","",78,null],[11,"default","","",78,{"inputs":[],"output":{"name":"binaryheap"}}],[11,"fmt","","",78,null],[11,"new","","Creates an empty `BinaryHeap` as a max-heap.",78,{"inputs":[],"output":{"name":"binaryheap"}}],[11,"with_capacity","","Creates an empty `BinaryHeap` with a specific capacity.\nThis preallocates enough memory for `capacity` elements,\nso that the `BinaryHeap` does not have to be reallocated\nuntil it contains at least that many values.",78,{"inputs":[{"name":"usize"}],"output":{"name":"binaryheap"}}],[11,"iter","","Returns an iterator visiting all values in the underlying vector, in\narbitrary order.",78,null],[11,"peek","","Returns the greatest item in the binary heap, or `None` if it is empty.",78,null],[11,"capacity","","Returns the number of elements the binary heap can hold without reallocating.",78,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the\ngiven `BinaryHeap`. Does nothing if the capacity is already sufficient.",78,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the\n`BinaryHeap`. The collection may reserve more space to avoid frequent reallocations.",78,null],[11,"shrink_to_fit","","Discards as much additional capacity as possible.",78,null],[11,"pop","","Removes the greatest item from the binary heap and returns it, or `None` if it\nis empty.",78,null],[11,"push","","Pushes an item onto the binary heap.",78,null],[11,"push_pop","","Pushes an item onto the binary heap, then pops the greatest item off the queue in\nan optimized fashion.",78,null],[11,"replace","","Pops the greatest item off the binary heap, then pushes an item onto the queue in\nan optimized fashion. The push is done regardless of whether the binary heap\nwas empty.",78,null],[11,"into_vec","","Consumes the `BinaryHeap` and returns the underlying vector\nin arbitrary order.",78,null],[11,"into_sorted_vec","","Consumes the `BinaryHeap` and returns a vector in sorted\n(ascending) order.",78,null],[11,"len","","Returns the length of the binary heap.",78,null],[11,"is_empty","","Checks if the binary heap is empty.",78,null],[11,"drain","","Clears the binary heap, returning an iterator over the removed elements.",78,null],[11,"clear","","Drops all items from the binary heap.",78,null],[11,"append","","Moves all the elements of `other` into `self`, leaving `other` empty.",78,null],[11,"clone","","",79,null],[11,"next","","",79,null],[11,"size_hint","","",79,null],[11,"next_back","","",79,null],[11,"clone","","",80,null],[11,"next","","",80,null],[11,"size_hint","","",80,null],[11,"next_back","","",80,null],[11,"next","","",81,null],[11,"size_hint","","",81,null],[11,"next_back","","",81,null],[11,"from","","",78,{"inputs":[{"name":"vec"}],"output":{"name":"binaryheap"}}],[11,"from","collections::vec","",77,{"inputs":[{"name":"binaryheap"}],"output":{"name":"vec"}}],[11,"from_iter","collections::binary_heap","",78,{"inputs":[{"name":"i"}],"output":{"name":"binaryheap"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of\nthe binary heap in arbitrary order. The binary heap cannot be used\nafter calling this.",78,null],[11,"extend","","",78,null],[11,"extend","","",78,null],[11,"drop","collections::btree::map","",82,null],[11,"clone","","",82,null],[11,"new","","Makes a new empty BTreeMap with a reasonable choice for B.",82,{"inputs":[],"output":{"name":"btreemap"}}],[11,"clear","","Clears the map, removing all values.",82,null],[11,"get","","Returns a reference to the value corresponding to the key.",82,null],[11,"contains_key","","Returns true if the map contains a value for the specified key.",82,null],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",82,null],[11,"insert","","Inserts a key-value pair into the map.",82,null],[11,"remove","","Removes a key from the map, returning the value at the key if the key\nwas previously in the map.",82,null],[11,"append","","Moves all elements from `other` into `Self`, leaving `other` empty.",82,null],[11,"range","","Constructs a double-ended iterator over a sub-range of elements in the map, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as &quot;negative\ninfinity&quot;, and if max is `Unbounded`, then it will be treated as &quot;positive infinity&quot;.\nThus range(Unbounded, Unbounded) will yield the whole collection.",82,null],[11,"range_mut","","Constructs a mutable double-ended iterator over a sub-range of elements in the map, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as &quot;negative\ninfinity&quot;, and if max is `Unbounded`, then it will be treated as &quot;positive infinity&quot;.\nThus range(Unbounded, Unbounded) will yield the whole collection.",82,null],[11,"entry","","Gets the given key&#39;s corresponding entry in the map for in-place manipulation.",82,null],[11,"next","","",83,null],[11,"size_hint","","",83,null],[11,"next_back","","",83,null],[11,"len","","",83,null],[11,"clone","","",83,null],[11,"next","","",84,null],[11,"size_hint","","",84,null],[11,"next_back","","",84,null],[11,"len","","",84,null],[11,"into_iter","","",82,null],[11,"drop","","",85,null],[11,"next","","",85,null],[11,"size_hint","","",85,null],[11,"next_back","","",85,null],[11,"len","","",85,null],[11,"next","","",86,null],[11,"size_hint","","",86,null],[11,"next_back","","",86,null],[11,"len","","",86,null],[11,"clone","","",86,null],[11,"next","","",87,null],[11,"size_hint","","",87,null],[11,"next_back","","",87,null],[11,"len","","",87,null],[11,"clone","","",87,null],[11,"next","","",88,null],[11,"next","","",89,null],[11,"size_hint","","",89,null],[11,"next_back","","",89,null],[11,"len","","",89,null],[11,"next_back","","",88,null],[11,"clone","","",88,null],[11,"next","","",90,null],[11,"next_back","","",90,null],[11,"from_iter","","",82,{"inputs":[{"name":"t"}],"output":{"name":"btreemap"}}],[11,"extend","","",82,null],[11,"extend","","",82,null],[11,"hash","","",82,null],[11,"default","","",82,{"inputs":[],"output":{"name":"btreemap"}}],[11,"eq","","",82,null],[11,"partial_cmp","","",82,null],[11,"cmp","","",82,null],[11,"fmt","","",82,null],[11,"index","","",82,null],[11,"iter","","Gets an iterator over the entries of the map, sorted by key.",82,null],[11,"iter_mut","","Gets a mutable iterator over the entries of the map, sorted by key.",82,null],[11,"keys","","Gets an iterator over the keys of the map, in sorted order.",82,null],[11,"values","","Gets an iterator over the values of the map, in order by key.",82,null],[11,"values_mut","","Gets a mutable iterator over the values of the map, in order by key.",82,null],[11,"len","","Returns the number of elements in the map.",82,null],[11,"is_empty","","Returns true if the map contains no elements.",82,null],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and returns\na mutable reference to the value in the entry.",91,null],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty,\nand returns a mutable reference to the value in the entry.",91,null],[11,"key","","Returns a reference to this entry&#39;s key.",91,null],[11,"key","","Gets a reference to the key that would be used when inserting a value\nthrough the VacantEntry.",92,null],[11,"insert","","Sets the value of the entry with the VacantEntry&#39;s key,\nand returns a mutable reference to it.",92,null],[11,"key","","Gets a reference to the key in the entry.",93,null],[11,"get","","Gets a reference to the value in the entry.",93,null],[11,"get_mut","","Gets a mutable reference to the value in the entry.",93,null],[11,"into_mut","","Converts the entry into a mutable reference to its value.",93,null],[11,"insert","","Sets the value of the entry with the OccupiedEntry&#39;s key,\nand returns the entry&#39;s old value.",93,null],[11,"remove","","Takes the value of the entry out of the map, and returns it.",93,null],[11,"partial_cmp","collections::btree::set","",94,null],[11,"lt","","",94,null],[11,"le","","",94,null],[11,"gt","","",94,null],[11,"ge","","",94,null],[11,"cmp","","",94,null],[11,"eq","","",94,null],[11,"ne","","",94,null],[11,"hash","","",94,null],[11,"clone","","",94,null],[11,"new","","Makes a new BTreeSet with a reasonable choice of B.",94,{"inputs":[],"output":{"name":"btreeset"}}],[11,"iter","","Gets an iterator over the BTreeSet&#39;s contents.",94,null],[11,"range","","Constructs a double-ended iterator over a sub-range of elements in the set, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as &quot;negative\ninfinity&quot;, and if max is `Unbounded`, then it will be treated as &quot;positive infinity&quot;.\nThus range(Unbounded, Unbounded) will yield the whole collection.",94,null],[11,"difference","","Visits the values representing the difference, in ascending order.",94,null],[11,"symmetric_difference","","Visits the values representing the symmetric difference, in ascending order.",94,null],[11,"intersection","","Visits the values representing the intersection, in ascending order.",94,null],[11,"union","","Visits the values representing the union, in ascending order.",94,null],[11,"len","","Returns the number of elements in the set.",94,null],[11,"is_empty","","Returns true if the set contains no elements.",94,null],[11,"clear","","Clears the set, removing all values.",94,null],[11,"contains","","Returns `true` if the set contains a value.",94,null],[11,"get","","Returns a reference to the value in the set, if any, that is equal to the given value.",94,null],[11,"is_disjoint","","Returns `true` if the set has no elements in common with `other`.\nThis is equivalent to checking for an empty intersection.",94,null],[11,"is_subset","","Returns `true` if the set is a subset of another.",94,null],[11,"is_superset","","Returns `true` if the set is a superset of another.",94,null],[11,"insert","","Adds a value to the set.",94,null],[11,"replace","","Adds a value to the set, replacing the existing value, if any, that is equal to the given\none. Returns the replaced value.",94,null],[11,"remove","","Removes a value from the set. Returns `true` if the value was\npresent in the set.",94,null],[11,"take","","Removes and returns the value in the set, if any, that is equal to the given one.",94,null],[11,"append","","Moves all elements from `other` into `Self`, leaving `other` empty.",94,null],[11,"from_iter","","",94,{"inputs":[{"name":"i"}],"output":{"name":"btreeset"}}],[11,"into_iter","","Gets an iterator for moving out the BtreeSet&#39;s contents.",94,null],[11,"extend","","",94,null],[11,"extend","","",94,null],[11,"default","","",94,{"inputs":[],"output":{"name":"btreeset"}}],[11,"fmt","","",94,null],[11,"clone","","",95,null],[11,"next","","",95,null],[11,"size_hint","","",95,null],[11,"next_back","","",95,null],[11,"len","","",95,null],[11,"next","","",96,null],[11,"size_hint","","",96,null],[11,"next_back","","",96,null],[11,"len","","",96,null],[11,"clone","","",97,null],[11,"next","","",97,null],[11,"next_back","","",97,null],[11,"clone","","",98,null],[11,"next","","",98,null],[11,"size_hint","","",98,null],[11,"clone","","",99,null],[11,"next","","",99,null],[11,"size_hint","","",99,null],[11,"clone","","",100,null],[11,"next","","",100,null],[11,"size_hint","","",100,null],[11,"clone","","",101,null],[11,"next","","",101,null],[11,"size_hint","","",101,null],[11,"borrow","collections::borrow","",102,null],[11,"clone","","",102,null],[11,"to_mut","","Acquires a mutable reference to the owned form of the data.",102,null],[11,"into_owned","","Extracts the owned data.",102,null],[11,"deref","","",102,null],[11,"cmp","","",102,null],[11,"eq","","",102,null],[11,"partial_cmp","","",102,null],[11,"fmt","","",102,null],[11,"fmt","","",102,null],[11,"hash","","",102,null],[11,"as_ref","","",102,null],[11,"hash","collections::enum_set","",103,null],[11,"cmp","","",103,null],[11,"partial_cmp","","",103,null],[11,"lt","","",103,null],[11,"le","","",103,null],[11,"gt","","",103,null],[11,"ge","","",103,null],[11,"eq","","",103,null],[11,"ne","","",103,null],[11,"clone","","",103,null],[11,"fmt","","",103,null],[11,"new","","Returns an empty `EnumSet`.",103,{"inputs":[],"output":{"name":"enumset"}}],[11,"len","","Returns the number of elements in the given `EnumSet`.",103,null],[11,"is_empty","","Returns true if the `EnumSet` is empty.",103,null],[11,"clear","","",103,null],[11,"is_disjoint","","Returns `false` if the `EnumSet` contains any enum of the given `EnumSet`.",103,null],[11,"is_superset","","Returns `true` if a given `EnumSet` is included in this `EnumSet`.",103,null],[11,"is_subset","","Returns `true` if this `EnumSet` is included in the given `EnumSet`.",103,null],[11,"union","","Returns the union of both `EnumSets`.",103,null],[11,"intersection","","Returns the intersection of both `EnumSets`.",103,null],[11,"insert","","Adds an enum to the `EnumSet`, and returns `true` if it wasn&#39;t there before",103,null],[11,"remove","","Removes an enum from the EnumSet",103,null],[11,"contains","","Returns `true` if an `EnumSet` contains a given enum.",103,null],[11,"iter","","Returns an iterator over an `EnumSet`.",103,null],[11,"sub","","",103,null],[11,"bitor","","",103,null],[11,"bitand","","",103,null],[11,"bitxor","","",103,null],[11,"clone","","",104,null],[11,"next","","",104,null],[11,"size_hint","","",104,null],[11,"from_iter","","",103,{"inputs":[{"name":"i"}],"output":{"name":"enumset"}}],[11,"extend","","",103,null],[11,"extend","","",103,null],[11,"clone","collections::linked_list","",105,null],[11,"clone","","",106,null],[11,"default","","",107,{"inputs":[],"output":{"name":"linkedlist"}}],[11,"new","","Creates an empty `LinkedList`.",107,{"inputs":[],"output":{"name":"linkedlist"}}],[11,"append","","Moves all elements from `other` to the end of the list.",107,null],[11,"iter","","Provides a forward iterator.",107,null],[11,"iter_mut","","Provides a forward iterator with mutable references.",107,null],[11,"is_empty","","Returns `true` if the `LinkedList` is empty.",107,null],[11,"len","","Returns the length of the `LinkedList`.",107,null],[11,"clear","","Removes all elements from the `LinkedList`.",107,null],[11,"contains","","Returns `true` if the `LinkedList` contains an element equal to the\ngiven value.",107,null],[11,"front","","Provides a reference to the front element, or `None` if the list is\nempty.",107,null],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the list\nis empty.",107,null],[11,"back","","Provides a reference to the back element, or `None` if the list is\nempty.",107,null],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the list\nis empty.",107,null],[11,"push_front","","Adds an element first in the list.",107,null],[11,"pop_front","","Removes the first element and returns it, or `None` if the list is\nempty.",107,null],[11,"push_back","","Appends an element to the back of a list",107,null],[11,"pop_back","","Removes the last element from a list and returns it, or `None` if\nit is empty.",107,null],[11,"split_off","","Splits the list into two at the given index. Returns everything after the given index,\nincluding the index.",107,null],[11,"front_place","","Returns a place for insertion at the front of the list.",107,null],[11,"back_place","","Returns a place for insertion at the back of the list.",107,null],[11,"drop","","",107,null],[11,"next","","",105,null],[11,"size_hint","","",105,null],[11,"next_back","","",105,null],[11,"next","","",108,null],[11,"size_hint","","",108,null],[11,"next_back","","",108,null],[11,"insert_next","","Inserts `elt` just after the element most recently returned by `.next()`.\nThe inserted element does not appear in the iteration.",108,null],[11,"peek_next","","Provides a reference to the next element, without changing the iterator.",108,null],[11,"next","","",106,null],[11,"size_hint","","",106,null],[11,"next_back","","",106,null],[11,"from_iter","","",107,{"inputs":[{"name":"t"}],"output":{"name":"linkedlist"}}],[11,"into_iter","","Consumes the list into an iterator yielding elements by value.",107,null],[11,"extend","","",107,null],[11,"extend","","",107,null],[11,"eq","","",107,null],[11,"ne","","",107,null],[11,"partial_cmp","","",107,null],[11,"cmp","","",107,null],[11,"clone","","",107,null],[11,"fmt","","",107,null],[11,"hash","","",107,null],[11,"make_place","","",109,null],[11,"pointer","","",109,null],[11,"finalize","","",109,null],[11,"make_place","","",110,null],[11,"pointer","","",110,null],[11,"finalize","","",110,null],[11,"start","core::ops","",111,null],[11,"end","","",112,null],[11,"start","","",113,null],[11,"end","","",113,null],[11,"borrow","collections::vec","",77,null],[11,"borrow_mut","","",77,null],[11,"clone","collections::str","",114,null],[11,"next","","",114,null],[11,"size_hint","","",114,null],[11,"borrow","collections::string","",115,null],[11,"fmt","core::str::pattern","",116,null],[11,"eq","","",116,null],[11,"ne","","",116,null],[11,"clone","","",116,null],[11,"fmt","","",117,null],[11,"clone","","",117,null],[11,"haystack","","",117,null],[11,"next","","",117,null],[11,"next_match","","",117,null],[11,"next_reject","","",117,null],[11,"next_back","","",117,null],[11,"next_match_back","","",117,null],[11,"next_reject_back","","",117,null],[11,"fmt","","",118,null],[11,"clone","","",118,null],[11,"haystack","","",118,null],[11,"next","","",118,null],[11,"next_match","","",118,null],[11,"next_reject","","",118,null],[11,"next_back","","",118,null],[11,"next_match_back","","",118,null],[11,"next_reject_back","","",118,null],[11,"clone","","",119,null],[11,"fmt","","",119,null],[11,"haystack","","",119,null],[11,"next","","",119,null],[11,"next_match","","",119,null],[11,"next_reject","","",119,null],[11,"next_back","","",119,null],[11,"next_match_back","","",119,null],[11,"next_reject_back","","",119,null],[11,"fmt","","",120,null],[11,"clone","","",120,null],[11,"haystack","","",120,null],[11,"next","","",120,null],[11,"next_match","","",120,null],[11,"next_back","","",120,null],[11,"next_match_back","","",120,null],[11,"cmp","collections::string","",115,null],[11,"partial_cmp","","",115,null],[11,"lt","","",115,null],[11,"le","","",115,null],[11,"gt","","",115,null],[11,"ge","","",115,null],[11,"fmt","","",121,null],[11,"fmt","","",122,null],[11,"new","","Creates a new empty `String`.",115,{"inputs":[],"output":{"name":"string"}}],[11,"with_capacity","","Creates a new empty `String` with a particular capacity.",115,{"inputs":[{"name":"usize"}],"output":{"name":"string"}}],[11,"from_utf8","","Converts a vector of bytes to a `String`.",115,{"inputs":[{"name":"vec"}],"output":{"name":"result"}}],[11,"from_utf8_lossy","","Converts a slice of bytes to a string, including invalid characters.",115,null],[11,"from_utf16","","Decode a UTF-16 encoded vector `v` into a `String`, returning `Err`\nif `v` contains any invalid data.",115,null],[11,"from_utf16_lossy","","Decode a UTF-16 encoded vector `v` into a string, replacing\ninvalid data with the replacement character (U+FFFD).",115,null],[11,"from_raw_parts","","Creates a new `String` from a length, capacity, and pointer.",115,null],[11,"from_utf8_unchecked","","Converts a vector of bytes to a `String` without checking that the\nstring contains valid UTF-8.",115,{"inputs":[{"name":"vec"}],"output":{"name":"string"}}],[11,"into_bytes","","Converts a `String` into a byte vector.",115,null],[11,"as_str","","Extracts a string slice containing the entire string.",115,null],[11,"as_mut_str","","Extracts a string slice containing the entire string.",115,null],[11,"push_str","","Appends a given string slice onto the end of this `String`.",115,null],[11,"capacity","","Returns this `String`&#39;s capacity, in bytes.",115,null],[11,"reserve","","Ensures that this `String`&#39;s capacity is at least `additional` bytes\nlarger than its length.",115,null],[11,"reserve_exact","","Ensures that this `String`&#39;s capacity is `additional` bytes\nlarger than its length.",115,null],[11,"shrink_to_fit","","Shrinks the capacity of this `String` to match its length.",115,null],[11,"push","","Appends the given `char` to the end of this `String`.",115,null],[11,"as_bytes","","Returns a byte slice of this `String`&#39;s contents.",115,null],[11,"truncate","","Shortens this `String` to the specified length.",115,null],[11,"pop","","Removes the last character from the string buffer and returns it.",115,null],[11,"remove","","Removes a `char` from this `String` at a byte position and returns it.",115,null],[11,"insert","","Inserts a character into this `String` at a byte position.",115,null],[11,"as_mut_vec","","Returns a mutable reference to the contents of this `String`.",115,null],[11,"len","","Returns the length of this `String`, in bytes.",115,null],[11,"is_empty","","Returns `true` if this `String` has a length of zero.",115,null],[11,"clear","","Truncates this `String`, removing all contents.",115,null],[11,"drain","","Create a draining iterator that removes the specified range in the string\nand yields the removed chars.",115,null],[11,"into_boxed_str","","Converts this `String` into a `Box&lt;str&gt;`.",115,null],[11,"into_bytes","","Returns the bytes that were attempted to convert to a `String`.",121,null],[11,"utf8_error","","Fetch a `Utf8Error` to get more details about the conversion failure.",121,null],[11,"fmt","","",121,null],[11,"fmt","","",122,null],[11,"clone","","",115,null],[11,"clone_from","","",115,null],[11,"from_iter","","",115,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",115,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",115,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"extend","","",115,null],[11,"extend","","",115,null],[11,"extend","","",115,null],[11,"extend","","",115,null],[11,"eq","","",115,null],[11,"ne","","",115,null],[11,"eq","","",115,null],[11,"ne","","",115,null],[11,"eq","","",115,null],[11,"ne","","",115,null],[11,"eq","collections::borrow","",102,null],[11,"ne","","",102,null],[11,"eq","","",102,null],[11,"ne","","",102,null],[11,"eq","","",102,null],[11,"ne","","",102,null],[11,"eq","collections::string","",115,null],[11,"ne","","",115,null],[11,"default","","",115,{"inputs":[],"output":{"name":"string"}}],[11,"fmt","","",115,null],[11,"fmt","","",115,null],[11,"hash","","",115,null],[11,"add","","",115,null],[11,"index","","",115,null],[11,"index","","",115,null],[11,"index","","",115,null],[11,"index","","",115,null],[11,"index","","",115,null],[11,"index","","",115,null],[11,"index_mut","","",115,null],[11,"index_mut","","",115,null],[11,"index_mut","","",115,null],[11,"index_mut","","",115,null],[11,"index_mut","","",115,null],[11,"index_mut","","",115,null],[11,"deref","","",115,null],[11,"deref_mut","","",115,null],[11,"from_str","","",115,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"clone","","",123,null],[11,"fmt","","",123,null],[11,"fmt","","",123,null],[11,"eq","","",123,null],[11,"as_ref","","",115,null],[11,"as_ref","","",115,null],[11,"from","","",115,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[11,"from","collections::borrow","",102,{"inputs":[{"name":"str"}],"output":{"name":"cow"}}],[11,"from","","",102,{"inputs":[{"name":"string"}],"output":{"name":"cow"}}],[11,"into","collections::string","",115,null],[11,"write_str","","",115,null],[11,"write_char","","",115,null],[11,"drop","","",124,null],[11,"next","","",124,null],[11,"size_hint","","",124,null],[11,"next_back","","",124,null],[11,"clone","collections::vec","",77,null],[11,"clone_from","","",77,null],[11,"hash","","",77,null],[11,"index","","",77,null],[11,"index_mut","","",77,null],[11,"index","","",77,null],[11,"index","","",77,null],[11,"index","","",77,null],[11,"index","","",77,null],[11,"index","","",77,null],[11,"index","","",77,null],[11,"index_mut","","",77,null],[11,"index_mut","","",77,null],[11,"index_mut","","",77,null],[11,"index_mut","","",77,null],[11,"index_mut","","",77,null],[11,"index_mut","","",77,null],[11,"deref","","",77,null],[11,"deref_mut","","",77,null],[11,"from_iter","","",77,{"inputs":[{"name":"i"}],"output":{"name":"vec"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of\nthe vector (from start to end). The vector cannot be used after calling\nthis.",77,null],[11,"extend","","",77,null],[11,"extend","","",77,null],[11,"eq","","",77,null],[11,"ne","","",77,null],[11,"eq","","",77,null],[11,"ne","","",77,null],[11,"eq","","",77,null],[11,"ne","","",77,null],[11,"eq","collections::borrow","",102,null],[11,"ne","","",102,null],[11,"eq","","",102,null],[11,"ne","","",102,null],[11,"eq","","",102,null],[11,"ne","","",102,null],[11,"eq","collections::vec","",77,null],[11,"ne","","",77,null],[11,"eq","","",77,null],[11,"ne","","",77,null],[11,"eq","","",77,null],[11,"ne","","",77,null],[11,"eq","","",77,null],[11,"ne","","",77,null],[11,"eq","","",77,null],[11,"ne","","",77,null],[11,"eq","","",77,null],[11,"ne","","",77,null],[11,"eq","","",77,null],[11,"ne","","",77,null],[11,"eq","","",77,null],[11,"ne","","",77,null],[11,"eq","","",77,null],[11,"ne","","",77,null],[11,"eq","","",77,null],[11,"ne","","",77,null],[11,"eq","","",77,null],[11,"ne","","",77,null],[11,"eq","","",77,null],[11,"ne","","",77,null],[11,"eq","","",77,null],[11,"ne","","",77,null],[11,"eq","","",77,null],[11,"ne","","",77,null],[11,"eq","","",77,null],[11,"ne","","",77,null],[11,"eq","","",77,null],[11,"ne","","",77,null],[11,"eq","","",77,null],[11,"ne","","",77,null],[11,"eq","","",77,null],[11,"ne","","",77,null],[11,"eq","","",77,null],[11,"ne","","",77,null],[11,"eq","","",77,null],[11,"ne","","",77,null],[11,"eq","","",77,null],[11,"ne","","",77,null],[11,"eq","","",77,null],[11,"ne","","",77,null],[11,"eq","","",77,null],[11,"ne","","",77,null],[11,"eq","","",77,null],[11,"ne","","",77,null],[11,"eq","","",77,null],[11,"ne","","",77,null],[11,"eq","","",77,null],[11,"ne","","",77,null],[11,"eq","","",77,null],[11,"ne","","",77,null],[11,"eq","","",77,null],[11,"ne","","",77,null],[11,"eq","","",77,null],[11,"ne","","",77,null],[11,"eq","","",77,null],[11,"ne","","",77,null],[11,"eq","","",77,null],[11,"ne","","",77,null],[11,"eq","","",77,null],[11,"ne","","",77,null],[11,"eq","","",77,null],[11,"ne","","",77,null],[11,"eq","","",77,null],[11,"ne","","",77,null],[11,"eq","","",77,null],[11,"ne","","",77,null],[11,"eq","","",77,null],[11,"ne","","",77,null],[11,"eq","","",77,null],[11,"ne","","",77,null],[11,"eq","","",77,null],[11,"ne","","",77,null],[11,"eq","","",77,null],[11,"ne","","",77,null],[11,"eq","","",77,null],[11,"ne","","",77,null],[11,"eq","","",77,null],[11,"ne","","",77,null],[11,"eq","","",77,null],[11,"ne","","",77,null],[11,"eq","","",77,null],[11,"ne","","",77,null],[11,"eq","","",77,null],[11,"ne","","",77,null],[11,"eq","","",77,null],[11,"ne","","",77,null],[11,"eq","","",77,null],[11,"ne","","",77,null],[11,"eq","","",77,null],[11,"ne","","",77,null],[11,"eq","","",77,null],[11,"ne","","",77,null],[11,"eq","","",77,null],[11,"ne","","",77,null],[11,"eq","","",77,null],[11,"ne","","",77,null],[11,"eq","","",77,null],[11,"ne","","",77,null],[11,"eq","","",77,null],[11,"ne","","",77,null],[11,"eq","","",77,null],[11,"ne","","",77,null],[11,"eq","","",77,null],[11,"ne","","",77,null],[11,"eq","","",77,null],[11,"ne","","",77,null],[11,"eq","","",77,null],[11,"ne","","",77,null],[11,"eq","","",77,null],[11,"ne","","",77,null],[11,"eq","","",77,null],[11,"ne","","",77,null],[11,"eq","","",77,null],[11,"ne","","",77,null],[11,"eq","","",77,null],[11,"ne","","",77,null],[11,"eq","","",77,null],[11,"ne","","",77,null],[11,"eq","","",77,null],[11,"ne","","",77,null],[11,"eq","","",77,null],[11,"ne","","",77,null],[11,"eq","","",77,null],[11,"ne","","",77,null],[11,"eq","","",77,null],[11,"ne","","",77,null],[11,"eq","","",77,null],[11,"ne","","",77,null],[11,"partial_cmp","","",77,null],[11,"cmp","","",77,null],[11,"drop","","",77,null],[11,"default","","",77,{"inputs":[],"output":{"name":"vec"}}],[11,"fmt","","",77,null],[11,"as_ref","","",77,null],[11,"as_mut","","",77,null],[11,"as_ref","","",77,null],[11,"as_mut","","",77,null],[11,"from","","",77,null],[11,"from","","",77,{"inputs":[{"name":"str"}],"output":{"name":"vec"}}],[11,"from","collections::borrow","",102,null],[11,"from","","",102,{"inputs":[{"name":"vec"}],"output":{"name":"cow"}}],[11,"from_iter","","",102,{"inputs":[{"name":"i"}],"output":{"name":"cow"}}],[11,"next","collections::vec","",125,null],[11,"size_hint","","",125,null],[11,"count","","",125,null],[11,"next_back","","",125,null],[11,"clone","","",125,null],[11,"drop","","",125,null],[11,"next","","",126,null],[11,"size_hint","","",126,null],[11,"next_back","","",126,null],[11,"drop","","",126,null],[11,"clone","collections::vec_deque","",127,null],[11,"drop","","",127,null],[11,"default","","",127,{"inputs":[],"output":{"name":"vecdeque"}}],[11,"new","","Creates an empty `VecDeque`.",127,{"inputs":[],"output":{"name":"vecdeque"}}],[11,"with_capacity","","Creates an empty `VecDeque` with space for at least `n` elements.",127,{"inputs":[{"name":"usize"}],"output":{"name":"vecdeque"}}],[11,"get","","Retrieves an element in the `VecDeque` by index.",127,null],[11,"get_mut","","Retrieves an element in the `VecDeque` mutably by index.",127,null],[11,"swap","","Swaps elements at indices `i` and `j`.",127,null],[11,"capacity","","Returns the number of elements the `VecDeque` can hold without\nreallocating.",127,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the\ngiven `VecDeque`. Does nothing if the capacity is already sufficient.",127,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the given\n`VecDeque`. The collection may reserve more space to avoid frequent reallocations.",127,null],[11,"shrink_to_fit","","Shrinks the capacity of the `VecDeque` as much as possible.",127,null],[11,"truncate","","Shortens a `VecDeque`, dropping excess elements from the back.",127,null],[11,"iter","","Returns a front-to-back iterator.",127,null],[11,"iter_mut","","Returns a front-to-back iterator that returns mutable references.",127,null],[11,"as_slices","","Returns a pair of slices which contain, in order, the contents of the\n`VecDeque`.",127,null],[11,"as_mut_slices","","Returns a pair of slices which contain, in order, the contents of the\n`VecDeque`.",127,null],[11,"len","","Returns the number of elements in the `VecDeque`.",127,null],[11,"is_empty","","Returns true if the buffer contains no elements",127,null],[11,"drain","","Create a draining iterator that removes the specified range in the\n`VecDeque` and yields the removed items.",127,null],[11,"clear","","Clears the buffer, removing all values.",127,null],[11,"contains","","Returns `true` if the `VecDeque` contains an element equal to the\ngiven value.",127,null],[11,"front","","Provides a reference to the front element, or `None` if the sequence is\nempty.",127,null],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the\nsequence is empty.",127,null],[11,"back","","Provides a reference to the back element, or `None` if the sequence is\nempty.",127,null],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the\nsequence is empty.",127,null],[11,"pop_front","","Removes the first element and returns it, or `None` if the sequence is\nempty.",127,null],[11,"push_front","","Inserts an element first in the sequence.",127,null],[11,"push_back","","Appends an element to the back of a buffer",127,null],[11,"pop_back","","Removes the last element from a buffer and returns it, or `None` if\nit is empty.",127,null],[11,"swap_remove_back","","Removes an element from anywhere in the `VecDeque` and returns it, replacing it with the\nlast element.",127,null],[11,"swap_remove_front","","Removes an element from anywhere in the `VecDeque` and returns it,\nreplacing it with the first element.",127,null],[11,"insert","","Inserts an element at `index` within the `VecDeque`. Whichever\nend is closer to the insertion point will be moved to make room,\nand all the affected elements will be moved to new positions.",127,null],[11,"remove","","Removes and returns the element at `index` from the `VecDeque`.\nWhichever end is closer to the removal point will be moved to make\nroom, and all the affected elements will be moved to new positions.\nReturns `None` if `index` is out of bounds.",127,null],[11,"split_off","","Splits the collection into two at the given index.",127,null],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",127,null],[11,"retain","","Retains only the elements specified by the predicate.",127,null],[11,"resize","","Modifies the `VecDeque` in-place so that `len()` is equal to new_len,\neither by removing excess elements or by appending copies of a value to the back.",127,null],[11,"clone","","",128,null],[11,"next","","",128,null],[11,"size_hint","","",128,null],[11,"next_back","","",128,null],[11,"next","","",129,null],[11,"size_hint","","",129,null],[11,"next_back","","",129,null],[11,"clone","","",130,null],[11,"next","","",130,null],[11,"size_hint","","",130,null],[11,"next_back","","",130,null],[11,"drop","","",131,null],[11,"next","","",131,null],[11,"size_hint","","",131,null],[11,"next_back","","",131,null],[11,"eq","","",127,null],[11,"partial_cmp","","",127,null],[11,"cmp","","",127,null],[11,"hash","","",127,null],[11,"index","","",127,null],[11,"index_mut","","",127,null],[11,"from_iter","","",127,{"inputs":[{"name":"t"}],"output":{"name":"vecdeque"}}],[11,"into_iter","","Consumes the list into a front-to-back iterator yielding elements by\nvalue.",127,null],[11,"extend","","",127,null],[11,"extend","","",127,null],[11,"fmt","","",127,null],[11,"from","","",127,{"inputs":[{"name":"vec"}],"output":{"name":"vecdeque"}}],[11,"from","collections::vec","",77,{"inputs":[{"name":"vecdeque"}],"output":{"name":"vec"}}],[11,"eq","collections","",132,null],[11,"ne","","",132,null],[11,"hash","","",132,null],[11,"fmt","","",132,null],[11,"clone","","",132,null],[11,"clone","alloc::boxed","",133,null],[11,"pointer","","",134,null],[11,"make_place","","",134,{"inputs":[],"output":{"name":"intermediatebox"}}],[11,"finalize","","",134,null],[11,"finalize","","",6,{"inputs":[{"name":"intermediatebox"}],"output":{"name":"box"}}],[11,"make_place","","",133,null],[11,"drop","","",134,null],[11,"new","","Allocates memory on the heap and then places `x` into it.",6,{"inputs":[{"name":"t"}],"output":{"name":"box"}}],[11,"from_raw","","Constructs a box from a raw pointer.",6,null],[11,"into_raw","","Consumes the `Box`, returning the wrapped raw pointer.",6,null],[11,"default","","",6,{"inputs":[],"output":{"name":"box"}}],[11,"default","","",6,{"inputs":[],"output":{"name":"box"}}],[11,"clone","","Returns a new box with a `clone()` of this box&#39;s contents.",6,null],[11,"clone_from","","Copies `source`&#39;s contents into `self` without creating a new allocation.",6,null],[11,"clone","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"partial_cmp","","",6,null],[11,"lt","","",6,null],[11,"le","","",6,null],[11,"ge","","",6,null],[11,"gt","","",6,null],[11,"cmp","","",6,null],[11,"hash","","",6,null],[11,"from","","",6,{"inputs":[{"name":"t"}],"output":{"name":"box"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",6,null],[11,"downcast","","Attempt to downcast the box to a concrete type.",6,null],[11,"fmt","","",6,null],[11,"fmt","","",6,null],[11,"fmt","","",6,null],[11,"deref","","",6,null],[11,"deref_mut","","",6,null],[11,"next","","",6,null],[11,"size_hint","","",6,null],[11,"next_back","","",6,null],[11,"call_once","","",6,null],[11,"call_once","","",6,null],[11,"clone","","",6,null],[11,"borrow","","",6,null],[11,"borrow_mut","","",6,null],[11,"as_ref","","",6,null],[11,"as_mut","","",6,null],[11,"deref","timely::dataflow::channels::message","",76,null],[11,"deref_mut","","",76,null],[0,"pact","timely::dataflow::channels","Parallelization contracts, describing how data must be exchanged between operators.\nParallelization contracts, describing requirements for data movement along dataflow edges.",null,null],[3,"Pipeline","timely::dataflow::channels::pact","A direct connection",null,null],[3,"Exchange","","An exchange between multiple observers",null,null],[3,"Pusher","","Wraps a `Message&lt;T,D&gt;` pusher to provide a `Push&lt;(T, Content&lt;D&gt;)&gt;`.",null,null],[3,"Puller","","Wraps a `Message&lt;T,D&gt;` puller to provide a `Pull&lt;(T, Content&lt;D&gt;)&gt;`.",null,null],[8,"ParallelizationContract","","A ParallelizationContract transforms the output of a Allocate to an (Observer, Pullable).",null,null],[10,"connect","","Alloctes a matched pair of push and pull endpoints implementing the pact.",135,null],[11,"connect","","",136,null],[11,"new","","Allocates a new `Exchange` pact from a distribution function.",137,{"inputs":[{"name":"f"}],"output":{"name":"exchange"}}],[11,"connect","","",137,null],[11,"new","","Allocates a new pusher.",138,{"inputs":[{"name":"box"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"pusher"}}],[11,"push","","",138,null],[11,"new","","Allocates a new `Puller`.",139,{"inputs":[{"name":"box"},{"name":"usize"},{"name":"usize"}],"output":{"name":"puller"}}],[11,"pull","","",139,null],[0,"scopes","timely::dataflow","Hierarchical organization of timely dataflow graphs.",null,null],[0,"root","timely::dataflow::scopes","The root scope of all timely dataflow computations.",null,null],[3,"Root","timely::dataflow::scopes::root","A `Root` is the entry point to a timely dataflow computation. It wraps a `Allocate`,\nand has a list of child `Operate`s. The primary intended use of `Root` is through its\nimplementation of the `Scope` trait.",null,null],[11,"new","","Allocates a new `Root` bound to a channel allocator.",140,{"inputs":[{"name":"a"}],"output":{"name":"root"}}],[11,"step","","Performs one step of the computation.",140,null],[11,"step_while","","Calls `self.step()` as long as `func` evaluates to true.",140,null],[11,"index","","The index of the worker out of its peers.",140,null],[11,"peers","","The total number of peer workers.",140,null],[11,"name","","",140,null],[11,"addr","","",140,null],[11,"add_edge","","",140,null],[11,"add_operator","","",140,null],[11,"add_operator_with_index","","",140,null],[11,"new_identifier","","",140,null],[11,"new_subscope","","",140,null],[11,"index","","",140,null],[11,"peers","","",140,null],[11,"allocate","","",140,null],[11,"clone","","",140,null],[0,"child","timely::dataflow::scopes","A child dataflow scope, used to build nested dataflow scopes.",null,null],[3,"Child","timely::dataflow::scopes::child","A `Child` wraps a `Subgraph` and a parent `G: Scope`. It manages the addition\nof `Operate`s to a subgraph, and the connection of edges between them.",null,null],[12,"subgraph","","The subgraph under assembly.",141,null],[12,"parent","","A copy of the child&#39;s parent scope.",141,null],[11,"index","","This worker&#39;s unique identifier.",141,null],[11,"peers","","The total number of workers in the computation.",141,null],[11,"name","","",141,null],[11,"addr","","",141,null],[11,"add_edge","","",141,null],[11,"add_operator_with_index","","",141,null],[11,"add_operator","","",141,null],[11,"new_identifier","","",141,null],[11,"new_subscope","","",141,null],[11,"index","","",141,null],[11,"peers","","",141,null],[11,"allocate","","",141,null],[11,"clone","","",141,null],[8,"Scope","timely::dataflow::scopes","The fundamental operations required to add and connect operators in a timely dataflow graph.",null,null],[16,"Timestamp","","The timestamp associated with data in this scope.",142,null],[10,"name","","A useful name describing the scope.",142,null],[10,"addr","","A sequence of scope identifiers describing the path from the `Root` to this scope.",142,null],[10,"add_edge","","Connects a source of data with a target of the data. This only links the two for\nthe purposes of tracking progress, rather than effect any data movement itself.",142,null],[10,"add_operator","","Adds a child `Operate` to the builder&#39;s scope. Returns the new child&#39;s index.",142,null],[10,"add_operator_with_index","","Adds a child `Operate` to the builder&#39;s scope using a supplied index.",142,null],[10,"new_subscope","","Creates a new `Subgraph` with timestamp `T`. Used by `scoped`, but unlikely to be\ncommonly useful to end users.",142,null],[10,"new_identifier","","Allocates a new locally unique identifier.",142,null],[11,"scoped","","Creates a `Subgraph` from a closure acting on a `Child` scope, and returning\nwhatever the closure returns.",142,null],[0,"stream","timely::dataflow","A handle to a typed stream of timely data.",null,null],[3,"Stream","timely::dataflow::stream","Abstraction of a stream of `D: Data` records timestamped with `S::Timestamp`.",null,null],[11,"clone","","",143,null],[11,"connect_to","","Connects the stream to a destination.",143,null],[11,"new","","Allocates a `Stream` from a supplied `Source` name and rendezvous point.",143,{"inputs":[{"name":"source"},{"name":"teehelper"},{"name":"s"}],"output":{"name":"self"}}],[11,"name","","The name of the stream&#39;s source operator.",143,null],[11,"scope","","The scope immediately containing the stream.",143,null],[0,"execute","timely","Starts a timely dataflow execution from configuration information and per-worker logic.",null,null],[5,"example","timely::execute","Executes a single-threaded timely dataflow computation.",null,{"inputs":[{"name":"f"}],"output":{"name":"t"}}],[5,"execute","","Executes a timely dataflow from a configuration and per-communicator logic.",null,{"inputs":[{"name":"configuration"},{"name":"f"}],"output":{"name":"result"}}],[5,"execute_from_args","","Executes a timely dataflow from supplied arguments and per-communicator logic.",null,{"inputs":[{"name":"i"},{"name":"f"}],"output":{"name":"result"}}],[0,"logging","timely","Traits, implementations, and macros related to logging timely events.",null,null],[3,"EventStreamLogger","timely::logging","Logs events to an underlying writer.",null,null],[3,"OperatesEvent","","The creation of an `Operate` implementor.",null,null],[12,"id","","Worker-unique identifier for the operator.",144,null],[12,"addr","","Sequence of nested scope identifiers indicating the path from the root to this instance.",144,null],[12,"name","","A helpful name.",144,null],[3,"ChannelsEvent","","The creation of a channel between operators.",null,null],[12,"id","","Worker-unique identifier for the channel",145,null],[12,"scope_addr","","Sequence of nested scope identifiers indicating the path from the root to this instance.",145,null],[12,"source","","Source descriptor, indicating operator index and output port.",145,null],[12,"target","","Target descriptor, indicating operator index and input port.",145,null],[3,"ProgressEvent","","Send or receive of progress information.",null,null],[12,"is_send","","`true` if the event is a send, and `false` if it is a receive.",146,null],[12,"addr","","Sequence of nested scope identifiers indicating the path from the root to this instance.",146,null],[12,"messages","","List of message updates, containing Target descriptor, timestamp as string, and delta.",146,null],[12,"internal","","List of capability updates, containing Source descriptor, timestamp as string, and delta.",146,null],[3,"MessagesEvent","","Message send or receive event",null,null],[12,"is_send","","`true` if send event, `false` if receive event.",147,null],[12,"channel","","Channel identifier",147,null],[12,"source","","Source worker index.",147,null],[12,"target","","Target worker index.",147,null],[12,"seq_no","","Message sequence number.",147,null],[12,"length","","Number of typed records in the message.",147,null],[3,"ScheduleEvent","","Operator start or stop.",null,null],[12,"id","","Worker-unique identifier for the operator, linkable to the identifiers in `OperatesEvent`.",148,null],[12,"start_stop","","`Start` if the operator is starting, `Stop` if it is stopping.\nactiviy is true if it looks like some useful work was performed during this call (data was\nread or written, notifications were requested / delivered)",148,null],[4,"StartStop","","Records the starting and stopping of an operator.",null,null],[13,"Start","","Operator starts.",149,null],[13,"Stop","","Operator stops; did it have any activity?",149,null],[12,"activity","timely::logging::StartStop","Did the operator perform non-trivial work.",149,null],[5,"log","timely::logging","Logs `record` in `logger` if logging is enabled.",null,{"inputs":[{"name":"localkey"},{"name":"record"}],"output":null}],[5,"initialize","","Initializes logging; called as part of `Root` initialization.",null,{"inputs":[{"name":"root"}],"output":null}],[5,"flush_logs","","Flushes logs; called by `Root::step`.",null,{"inputs":[],"output":null}],[7,"OPERATES","","Logs operator creation.",null,null],[7,"CHANNELS","","Logs channel creation.",null,null],[7,"PROGRESS","","Logs progress transmission.",null,null],[7,"MESSAGES","","Logs message transmission.",null,null],[7,"SCHEDULE","","Logs operator scheduling.",null,null],[7,"GUARDED_MESSAGE","","Logs delivery of message to an operator input.",null,null],[7,"GUARDED_PROGRESS","","Logs delivery of notification to an operator.",null,null],[8,"Logger","","Logging methods",null,null],[16,"Record","","The type of loggable record.",150,null],[10,"log","","Adds `record` to the log.",150,null],[10,"flush","","Called with some frequency; behavior unspecified.",150,null],[11,"log","","",151,null],[11,"flush","","",151,null],[11,"drop","","",151,null],[11,"clone","","",144,null],[11,"fmt","","",144,null],[11,"entomb","","",144,null],[11,"embalm","","",144,null],[11,"exhume","","",144,null],[11,"clone","","",145,null],[11,"fmt","","",145,null],[11,"entomb","","",145,null],[11,"embalm","","",145,null],[11,"exhume","","",145,null],[11,"clone","","",146,null],[11,"fmt","","",146,null],[11,"entomb","","",146,null],[11,"embalm","","",146,null],[11,"exhume","","",146,null],[11,"clone","","",147,null],[11,"fmt","","",147,null],[11,"eq","","",149,null],[11,"ne","","",149,null],[11,"clone","","",149,null],[11,"fmt","","",149,null],[11,"clone","","",148,null],[11,"fmt","","",148,null],[11,"entomb","","",148,null],[11,"embalm","","",148,null],[11,"exhume","","",148,null],[8,"Data","timely","A composite trait for types usable in timely dataflow.",null,null],[11,"enter","timely::dataflow::stream","",143,null],[11,"leave","","",143,null],[11,"unary_notify","","",143,null],[11,"unary_stream","","",143,null],[11,"new_input","timely::dataflow::scopes::child","",141,null],[11,"loop_variable","","",141,null],[11,"connect_loop","timely::dataflow::stream","",143,null],[11,"concat","","",143,null],[11,"partition","","",143,null],[11,"map","","",143,null],[11,"map_in_place","","",143,null],[11,"flat_map","","",143,null],[11,"inspect","","",143,null],[11,"inspect_batch","","",143,null],[11,"filter","","",143,null],[11,"binary_stream","","",143,null],[11,"binary_notify","","",143,null],[11,"delay","","",143,null],[11,"delay_batch","","",143,null],[11,"exchange","","",143,null],[11,"broadcast","","",143,null],[11,"probe","","",143,null],[11,"capture_into","","",143,null],[11,"state_machine","","",143,null],[11,"aggregate","","",143,null],[11,"reclock","","",143,null],[11,"accumulate","","",143,null]],"paths":[[3,"Thread"],[3,"Process"],[3,"Binary"],[4,"Generic"],[4,"Configuration"],[3,"WorkerGuards"],[3,"Box"],[8,"Push"],[8,"Pull"],[3,"CountMap"],[3,"Antichain"],[3,"MutableAntichain"],[3,"PointstampCounter"],[4,"Summary"],[3,"Product"],[3,"Source"],[3,"Target"],[3,"Subgraph"],[8,"Timestamp"],[8,"PathSummary"],[3,"RootTimestamp"],[3,"RootSummary"],[8,"Operate"],[3,"Progcaster"],[8,"Enter"],[8,"EnterAt"],[8,"Leave"],[8,"Unary"],[8,"Input"],[3,"Handle"],[8,"UnorderedInput"],[3,"UnorderedHandle"],[8,"LoopVariable"],[8,"ConnectLoop"],[8,"Concat"],[8,"Concatenate"],[8,"Partition"],[8,"Map"],[8,"Inspect"],[8,"Filter"],[8,"Binary"],[8,"Delay"],[8,"Exchange"],[8,"Broadcast"],[8,"Probe"],[3,"Handle"],[8,"ToStream"],[3,"EventLink"],[4,"Event"],[8,"Capture"],[8,"Extract"],[8,"EventIterator"],[8,"EventPusher"],[8,"Replay"],[3,"Receiver"],[3,"Sender"],[3,"Rc"],[3,"EventWriter"],[3,"EventReader"],[8,"StateMachine"],[8,"Aggregate"],[8,"Reclock"],[8,"Accumulate"],[3,"InputHandle"],[3,"OutputHandle"],[3,"Notificator"],[3,"Capability"],[3,"Tee"],[3,"TeeHelper"],[3,"Exchange"],[3,"Counter"],[3,"Buffer"],[3,"Session"],[3,"AutoflushSession"],[3,"Counter"],[3,"Message"],[4,"Content"],[3,"Vec"],[3,"BinaryHeap"],[3,"Iter"],[3,"IntoIter"],[3,"Drain"],[3,"BTreeMap"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Keys"],[3,"Values"],[3,"Range"],[3,"ValuesMut"],[3,"RangeMut"],[4,"Entry"],[3,"VacantEntry"],[3,"OccupiedEntry"],[3,"BTreeSet"],[3,"Iter"],[3,"IntoIter"],[3,"Range"],[3,"Difference"],[3,"SymmetricDifference"],[3,"Intersection"],[3,"Union"],[4,"Cow"],[3,"EnumSet"],[3,"Iter"],[3,"Iter"],[3,"IntoIter"],[3,"LinkedList"],[3,"IterMut"],[3,"FrontPlace"],[3,"BackPlace"],[3,"RangeFrom"],[3,"RangeTo"],[3,"Range"],[3,"EncodeUtf16"],[3,"String"],[4,"SearchStep"],[3,"CharSearcher"],[3,"CharSliceSearcher"],[3,"CharPredicateSearcher"],[3,"StrSearcher"],[3,"FromUtf8Error"],[3,"FromUtf16Error"],[4,"ParseError"],[3,"Drain"],[3,"IntoIter"],[3,"Drain"],[3,"VecDeque"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Drain"],[4,"Bound"],[3,"ExchangeHeapSingleton"],[3,"IntermediateBox"],[8,"ParallelizationContract"],[3,"Pipeline"],[3,"Exchange"],[3,"Pusher"],[3,"Puller"],[3,"Root"],[3,"Child"],[8,"Scope"],[3,"Stream"],[3,"OperatesEvent"],[3,"ChannelsEvent"],[3,"ProgressEvent"],[3,"MessagesEvent"],[3,"ScheduleEvent"],[4,"StartStop"],[8,"Logger"],[3,"EventStreamLogger"]]};
searchIndex["time"] = {"doc":"Simple time handling.","items":[[3,"Duration","time","ISO 8601 time duration with nanosecond precision.\nThis also allows for the negative duration; see individual methods for details.",null,null],[3,"OutOfRangeError","","Represents error when converting `Duration` to/from a standard library\nimplementation",null,null],[3,"Timespec","","A record specifying a time value in seconds and nanoseconds, where\nnanoseconds represent the offset from the given second.",null,null],[12,"sec","","",0,null],[12,"nsec","","",0,null],[3,"PreciseTime","","An opaque structure representing a moment in time.",null,null],[3,"SteadyTime","","A structure representing a moment in time.",null,null],[3,"Tm","","Holds a calendar date and time broken down into its components (year, month,\nday, and so on), also called a broken-down time value.",null,null],[12,"tm_sec","","Seconds after the minute - [0, 60]",1,null],[12,"tm_min","","Minutes after the hour - [0, 59]",1,null],[12,"tm_hour","","Hours after midnight - [0, 23]",1,null],[12,"tm_mday","","Day of the month - [1, 31]",1,null],[12,"tm_mon","","Months since January - [0, 11]",1,null],[12,"tm_year","","Years since 1900",1,null],[12,"tm_wday","","Days since Sunday - [0, 6]. 0 = Sunday, 1 = Monday, ..., 6 = Saturday.",1,null],[12,"tm_yday","","Days since January 1 - [0, 365]",1,null],[12,"tm_isdst","","Daylight Saving Time flag.",1,null],[12,"tm_utcoff","","Identifies the time zone that was used to compute this broken-down time\nvalue, including any adjustment for Daylight Saving Time. This is the\nnumber of seconds east of UTC. For example, for U.S. Pacific Daylight\nTime, the value is -7*60*60 = -25200.",1,null],[12,"tm_nsec","","Nanoseconds after the second - [0, 10&lt;sup&gt;9&lt;/sup&gt; - 1]",1,null],[3,"TmFmt","","A wrapper around a `Tm` and format string that implements Display.",null,null],[4,"ParseError","","",null,null],[13,"InvalidSecond","","",2,null],[13,"InvalidMinute","","",2,null],[13,"InvalidHour","","",2,null],[13,"InvalidDay","","",2,null],[13,"InvalidMonth","","",2,null],[13,"InvalidYear","","",2,null],[13,"InvalidDayOfWeek","","",2,null],[13,"InvalidDayOfMonth","","",2,null],[13,"InvalidDayOfYear","","",2,null],[13,"InvalidZoneOffset","","",2,null],[13,"InvalidTime","","",2,null],[13,"InvalidSecondsSinceEpoch","","",2,null],[13,"MissingFormatConverter","","",2,null],[13,"InvalidFormatSpecifier","","",2,null],[13,"UnexpectedCharacter","","",2,null],[5,"strptime","","Parses the time from the string according to the format string.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[5,"get_time","","Returns the current time as a `timespec` containing the seconds and\nnanoseconds since 1970-01-01T00:00:00Z.",null,{"inputs":[],"output":{"name":"timespec"}}],[5,"precise_time_ns","","Returns the current value of a high-resolution performance counter\nin nanoseconds since an unspecified epoch.",null,{"inputs":[],"output":{"name":"u64"}}],[5,"precise_time_s","","Returns the current value of a high-resolution performance counter\nin seconds since an unspecified epoch.",null,{"inputs":[],"output":{"name":"f64"}}],[5,"tzset","","",null,{"inputs":[],"output":null}],[5,"empty_tm","","",null,{"inputs":[],"output":{"name":"tm"}}],[5,"at_utc","","Returns the specified time in UTC",null,{"inputs":[{"name":"timespec"}],"output":{"name":"tm"}}],[5,"now_utc","","Returns the current time in UTC",null,{"inputs":[],"output":{"name":"tm"}}],[5,"at","","Returns the specified time in the local timezone",null,{"inputs":[{"name":"timespec"}],"output":{"name":"tm"}}],[5,"now","","Returns the current time in the local timezone",null,{"inputs":[],"output":{"name":"tm"}}],[5,"strftime","","Formats the time according to the format string.",null,{"inputs":[{"name":"str"},{"name":"tm"}],"output":{"name":"result"}}],[11,"fmt","","",3,null],[11,"fmt","","",4,null],[11,"cmp","","",4,null],[11,"partial_cmp","","",4,null],[11,"lt","","",4,null],[11,"le","","",4,null],[11,"gt","","",4,null],[11,"ge","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"clone","","",4,null],[11,"weeks","","Makes a new `Duration` with given number of weeks.\nEquivalent to `Duration::seconds(weeks * 7 * 24 * 60 * 60)` with overflow checks.\nPanics when the duration is out of bounds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"days","","Makes a new `Duration` with given number of days.\nEquivalent to `Duration::seconds(days * 24 * 60 * 60)` with overflow checks.\nPanics when the duration is out of bounds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"hours","","Makes a new `Duration` with given number of hours.\nEquivalent to `Duration::seconds(hours * 60 * 60)` with overflow checks.\nPanics when the duration is out of bounds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"minutes","","Makes a new `Duration` with given number of minutes.\nEquivalent to `Duration::seconds(minutes * 60)` with overflow checks.\nPanics when the duration is out of bounds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"seconds","","Makes a new `Duration` with given number of seconds.\nPanics when the duration is more than `i64::MAX` milliseconds\nor less than `i64::MIN` milliseconds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"milliseconds","","Makes a new `Duration` with given number of milliseconds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"microseconds","","Makes a new `Duration` with given number of microseconds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"nanoseconds","","Makes a new `Duration` with given number of nanoseconds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"span","","Runs a closure, returning the duration of time it took to run the\nclosure.",4,{"inputs":[{"name":"f"}],"output":{"name":"duration"}}],[11,"num_weeks","","Returns the total number of whole weeks in the duration.",4,null],[11,"num_days","","Returns the total number of whole days in the duration.",4,null],[11,"num_hours","","Returns the total number of whole hours in the duration.",4,null],[11,"num_minutes","","Returns the total number of whole minutes in the duration.",4,null],[11,"num_seconds","","Returns the total number of whole seconds in the duration.",4,null],[11,"num_milliseconds","","Returns the total number of whole milliseconds in the duration,",4,null],[11,"num_microseconds","","Returns the total number of whole microseconds in the duration,\nor `None` on overflow (exceeding 2^63 microseconds in either direction).",4,null],[11,"num_nanoseconds","","Returns the total number of whole nanoseconds in the duration,\nor `None` on overflow (exceeding 2^63 nanoseconds in either direction).",4,null],[11,"checked_add","","Add two durations, returning `None` if overflow occurred.",4,null],[11,"checked_sub","","Subtract two durations, returning `None` if overflow occurred.",4,null],[11,"min_value","","The minimum possible `Duration`: `i64::MIN` milliseconds.",4,{"inputs":[],"output":{"name":"duration"}}],[11,"max_value","","The maximum possible `Duration`: `i64::MAX` milliseconds.",4,{"inputs":[],"output":{"name":"duration"}}],[11,"zero","","A duration where the stored seconds and nanoseconds are equal to zero.",4,{"inputs":[],"output":{"name":"duration"}}],[11,"is_zero","","Returns `true` if the duration equals `Duration::zero()`.",4,null],[11,"from_std","","Creates a `time::Duration` object from `std::time::Duration`",4,{"inputs":[{"name":"stdduration"}],"output":{"name":"result"}}],[11,"to_std","","Creates a `std::time::Duration` object from `time::Duration`",4,null],[11,"neg","","",4,null],[11,"add","","",4,null],[11,"sub","","",4,null],[11,"mul","","",4,null],[11,"div","","",4,null],[11,"fmt","","",4,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"clone","","",5,null],[11,"fmt","","",5,null],[11,"fmt","","",5,null],[11,"description","","",5,null],[11,"hash","","",0,null],[11,"fmt","","",0,null],[11,"cmp","","",0,null],[11,"partial_cmp","","",0,null],[11,"lt","","",0,null],[11,"le","","",0,null],[11,"gt","","",0,null],[11,"ge","","",0,null],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"clone","","",0,null],[11,"new","","",0,{"inputs":[{"name":"i64"},{"name":"i32"}],"output":{"name":"timespec"}}],[11,"add","","",0,null],[11,"sub","","",0,null],[11,"sub","","",0,null],[11,"clone","","",6,null],[11,"now","","Returns a `PreciseTime` representing the current moment in time.",6,{"inputs":[],"output":{"name":"precisetime"}}],[11,"to","","Returns a `Duration` representing the span of time from the value of\n`self` to the value of `later`.",6,null],[11,"fmt","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"cmp","","",7,null],[11,"partial_cmp","","",7,null],[11,"lt","","",7,null],[11,"le","","",7,null],[11,"gt","","",7,null],[11,"ge","","",7,null],[11,"clone","","",7,null],[11,"now","","Returns a `SteadyTime` representing the current moment in time.",7,{"inputs":[],"output":{"name":"steadytime"}}],[11,"fmt","","",7,null],[11,"sub","","",7,null],[11,"sub","","",7,null],[11,"add","","",7,null],[11,"hash","","",1,null],[11,"fmt","","",1,null],[11,"eq","","",1,null],[11,"ne","","",1,null],[11,"clone","","",1,null],[11,"add","","The resulting Tm is in UTC.",1,null],[11,"sub","","The resulting Tm is in UTC.",1,null],[11,"sub","","",1,null],[11,"partial_cmp","","",1,null],[11,"cmp","","",1,null],[11,"to_timespec","","Convert time to the seconds from January 1, 1970",1,null],[11,"to_local","","Convert time to the local timezone",1,null],[11,"to_utc","","Convert time to the UTC",1,null],[11,"ctime","","Returns a TmFmt that outputs according to the `asctime` format in ISO\nC, in the local timezone.",1,null],[11,"asctime","","Returns a TmFmt that outputs according to the `asctime` format in ISO\nC.",1,null],[11,"strftime","","Formats the time according to the format string.",1,null],[11,"rfc822","","Returns a TmFmt that outputs according to RFC 822.",1,null],[11,"rfc822z","","Returns a TmFmt that outputs according to RFC 822 with Zulu time.",1,null],[11,"rfc3339","","Returns a TmFmt that outputs according to RFC 3339. RFC 3339 is\ncompatible with ISO 8601.",1,null],[11,"clone","","",2,null],[11,"fmt","","",2,null],[11,"eq","","",2,null],[11,"ne","","",2,null],[11,"fmt","","",2,null],[11,"description","","",2,null],[11,"fmt","","",3,null]],"paths":[[3,"Timespec"],[3,"Tm"],[4,"ParseError"],[3,"TmFmt"],[3,"Duration"],[3,"OutOfRangeError"],[3,"PreciseTime"],[3,"SteadyTime"]]};
searchIndex["libc"] = {"doc":"Crate docs","items":[[3,"utimbuf","libc","",null,null],[12,"actime","","",0,null],[12,"modtime","","",0,null],[3,"timeval","","",null,null],[12,"tv_sec","","",1,null],[12,"tv_usec","","",1,null],[3,"timespec","","",null,null],[12,"tv_sec","","",2,null],[12,"tv_nsec","","",2,null],[3,"rlimit","","",null,null],[12,"rlim_cur","","",3,null],[12,"rlim_max","","",3,null],[3,"rusage","","",null,null],[12,"ru_utime","","",4,null],[12,"ru_stime","","",4,null],[12,"ru_maxrss","","",4,null],[12,"ru_ixrss","","",4,null],[12,"ru_idrss","","",4,null],[12,"ru_isrss","","",4,null],[12,"ru_minflt","","",4,null],[12,"ru_majflt","","",4,null],[12,"ru_nswap","","",4,null],[12,"ru_inblock","","",4,null],[12,"ru_oublock","","",4,null],[12,"ru_msgsnd","","",4,null],[12,"ru_msgrcv","","",4,null],[12,"ru_nsignals","","",4,null],[12,"ru_nvcsw","","",4,null],[12,"ru_nivcsw","","",4,null],[3,"in_addr","","",null,null],[12,"s_addr","","",5,null],[3,"in6_addr","","",null,null],[12,"s6_addr","","",6,null],[3,"ip_mreq","","",null,null],[12,"imr_multiaddr","","",7,null],[12,"imr_interface","","",7,null],[3,"ipv6_mreq","","",null,null],[12,"ipv6mr_multiaddr","","",8,null],[12,"ipv6mr_interface","","",8,null],[3,"hostent","","",null,null],[12,"h_name","","",9,null],[12,"h_aliases","","",9,null],[12,"h_addrtype","","",9,null],[12,"h_length","","",9,null],[12,"h_addr_list","","",9,null],[3,"iovec","","",null,null],[12,"iov_base","","",10,null],[12,"iov_len","","",10,null],[3,"pollfd","","",null,null],[12,"fd","","",11,null],[12,"events","","",11,null],[12,"revents","","",11,null],[3,"winsize","","",null,null],[12,"ws_row","","",12,null],[12,"ws_col","","",12,null],[12,"ws_xpixel","","",12,null],[12,"ws_ypixel","","",12,null],[3,"linger","","",null,null],[12,"l_onoff","","",13,null],[12,"l_linger","","",13,null],[3,"sockaddr","","",null,null],[12,"sa_family","","",14,null],[12,"sa_data","","",14,null],[3,"sockaddr_in","","",null,null],[12,"sin_family","","",15,null],[12,"sin_port","","",15,null],[12,"sin_addr","","",15,null],[12,"sin_zero","","",15,null],[3,"sockaddr_in6","","",null,null],[12,"sin6_family","","",16,null],[12,"sin6_port","","",16,null],[12,"sin6_flowinfo","","",16,null],[12,"sin6_addr","","",16,null],[12,"sin6_scope_id","","",16,null],[3,"sockaddr_un","","",null,null],[12,"sun_family","","",17,null],[12,"sun_path","","",17,null],[3,"sockaddr_storage","","",null,null],[12,"ss_family","","",18,null],[3,"addrinfo","","",null,null],[12,"ai_flags","","",19,null],[12,"ai_family","","",19,null],[12,"ai_socktype","","",19,null],[12,"ai_protocol","","",19,null],[12,"ai_addrlen","","",19,null],[12,"ai_addr","","",19,null],[12,"ai_canonname","","",19,null],[12,"ai_next","","",19,null],[3,"sockaddr_nl","","",null,null],[12,"nl_family","","",20,null],[12,"nl_pid","","",20,null],[12,"nl_groups","","",20,null],[3,"sockaddr_ll","","",null,null],[12,"sll_family","","",21,null],[12,"sll_protocol","","",21,null],[12,"sll_ifindex","","",21,null],[12,"sll_hatype","","",21,null],[12,"sll_pkttype","","",21,null],[12,"sll_halen","","",21,null],[12,"sll_addr","","",21,null],[3,"fd_set","","",null,null],[3,"tm","","",null,null],[12,"tm_sec","","",22,null],[12,"tm_min","","",22,null],[12,"tm_hour","","",22,null],[12,"tm_mday","","",22,null],[12,"tm_mon","","",22,null],[12,"tm_year","","",22,null],[12,"tm_wday","","",22,null],[12,"tm_yday","","",22,null],[12,"tm_isdst","","",22,null],[12,"tm_gmtoff","","",22,null],[12,"tm_zone","","",22,null],[3,"sched_param","","",null,null],[12,"sched_priority","","",23,null],[3,"Dl_info","","",null,null],[12,"dli_fname","","",24,null],[12,"dli_fbase","","",24,null],[12,"dli_sname","","",24,null],[12,"dli_saddr","","",24,null],[3,"epoll_event","","",null,null],[12,"events","","",25,null],[12,"u64","","",25,null],[3,"utsname","","",null,null],[12,"sysname","","",26,null],[12,"nodename","","",26,null],[12,"release","","",26,null],[12,"version","","",26,null],[12,"machine","","",26,null],[12,"domainname","","",26,null],[3,"lconv","","",null,null],[12,"decimal_point","","",27,null],[12,"thousands_sep","","",27,null],[12,"grouping","","",27,null],[12,"int_curr_symbol","","",27,null],[12,"currency_symbol","","",27,null],[12,"mon_decimal_point","","",27,null],[12,"mon_thousands_sep","","",27,null],[12,"mon_grouping","","",27,null],[12,"positive_sign","","",27,null],[12,"negative_sign","","",27,null],[12,"int_frac_digits","","",27,null],[12,"frac_digits","","",27,null],[12,"p_cs_precedes","","",27,null],[12,"p_sep_by_space","","",27,null],[12,"n_cs_precedes","","",27,null],[12,"n_sep_by_space","","",27,null],[12,"p_sign_posn","","",27,null],[12,"n_sign_posn","","",27,null],[12,"int_p_cs_precedes","","",27,null],[12,"int_p_sep_by_space","","",27,null],[12,"int_n_cs_precedes","","",27,null],[12,"int_n_sep_by_space","","",27,null],[12,"int_p_sign_posn","","",27,null],[12,"int_n_sign_posn","","",27,null],[3,"dirent","","",null,null],[12,"d_ino","","",28,null],[12,"d_off","","",28,null],[12,"d_reclen","","",28,null],[12,"d_type","","",28,null],[12,"d_name","","",28,null],[3,"dirent64","","",null,null],[12,"d_ino","","",29,null],[12,"d_off","","",29,null],[12,"d_reclen","","",29,null],[12,"d_type","","",29,null],[12,"d_name","","",29,null],[3,"rlimit64","","",null,null],[12,"rlim_cur","","",30,null],[12,"rlim_max","","",30,null],[3,"glob_t","","",null,null],[12,"gl_pathc","","",31,null],[12,"gl_pathv","","",31,null],[12,"gl_offs","","",31,null],[12,"gl_flags","","",31,null],[3,"ifaddrs","","",null,null],[12,"ifa_next","","",32,null],[12,"ifa_name","","",32,null],[12,"ifa_flags","","",32,null],[12,"ifa_addr","","",32,null],[12,"ifa_netmask","","",32,null],[12,"ifa_ifu","","",32,null],[12,"ifa_data","","",32,null],[3,"pthread_mutex_t","","",null,null],[3,"pthread_rwlock_t","","",null,null],[3,"pthread_mutexattr_t","","",null,null],[3,"pthread_cond_t","","",null,null],[3,"passwd","","",null,null],[12,"pw_name","","",33,null],[12,"pw_passwd","","",33,null],[12,"pw_uid","","",33,null],[12,"pw_gid","","",33,null],[12,"pw_gecos","","",33,null],[12,"pw_dir","","",33,null],[12,"pw_shell","","",33,null],[3,"statvfs","","",null,null],[12,"f_bsize","","",34,null],[12,"f_frsize","","",34,null],[12,"f_blocks","","",34,null],[12,"f_bfree","","",34,null],[12,"f_bavail","","",34,null],[12,"f_files","","",34,null],[12,"f_ffree","","",34,null],[12,"f_favail","","",34,null],[12,"f_fsid","","",34,null],[12,"f_flag","","",34,null],[12,"f_namemax","","",34,null],[3,"dqblk","","",null,null],[12,"dqb_bhardlimit","","",35,null],[12,"dqb_bsoftlimit","","",35,null],[12,"dqb_curspace","","",35,null],[12,"dqb_ihardlimit","","",35,null],[12,"dqb_isoftlimit","","",35,null],[12,"dqb_curinodes","","",35,null],[12,"dqb_btime","","",35,null],[12,"dqb_itime","","",35,null],[12,"dqb_valid","","",35,null],[3,"signalfd_siginfo","","",null,null],[12,"ssi_signo","","",36,null],[12,"ssi_errno","","",36,null],[12,"ssi_code","","",36,null],[12,"ssi_pid","","",36,null],[12,"ssi_uid","","",36,null],[12,"ssi_fd","","",36,null],[12,"ssi_tid","","",36,null],[12,"ssi_band","","",36,null],[12,"ssi_overrun","","",36,null],[12,"ssi_trapno","","",36,null],[12,"ssi_status","","",36,null],[12,"ssi_int","","",36,null],[12,"ssi_ptr","","",36,null],[12,"ssi_utime","","",36,null],[12,"ssi_stime","","",36,null],[12,"ssi_addr","","",36,null],[3,"fsid_t","","",null,null],[3,"mq_attr","","",null,null],[12,"mq_flags","","",37,null],[12,"mq_maxmsg","","",37,null],[12,"mq_msgsize","","",37,null],[12,"mq_curmsgs","","",37,null],[3,"cpu_set_t","","",null,null],[3,"sigaction","","",null,null],[12,"sa_sigaction","","",38,null],[12,"sa_mask","","",38,null],[12,"sa_flags","","",38,null],[3,"stack_t","","",null,null],[12,"ss_sp","","",39,null],[12,"ss_flags","","",39,null],[12,"ss_size","","",39,null],[3,"siginfo_t","","",null,null],[12,"si_signo","","",40,null],[12,"si_errno","","",40,null],[12,"si_code","","",40,null],[12,"_pad","","",40,null],[3,"glob64_t","","",null,null],[12,"gl_pathc","","",41,null],[12,"gl_pathv","","",41,null],[12,"gl_offs","","",41,null],[12,"gl_flags","","",41,null],[3,"ucred","","",null,null],[12,"pid","","",42,null],[12,"uid","","",42,null],[12,"gid","","",42,null],[3,"statfs","","",null,null],[12,"f_type","","",43,null],[12,"f_bsize","","",43,null],[12,"f_blocks","","",43,null],[12,"f_bfree","","",43,null],[12,"f_bavail","","",43,null],[12,"f_files","","",43,null],[12,"f_ffree","","",43,null],[12,"f_fsid","","",43,null],[12,"f_namelen","","",43,null],[12,"f_frsize","","",43,null],[3,"msghdr","","",null,null],[12,"msg_name","","",44,null],[12,"msg_namelen","","",44,null],[12,"msg_iov","","",44,null],[12,"msg_iovlen","","",44,null],[12,"msg_control","","",44,null],[12,"msg_controllen","","",44,null],[12,"msg_flags","","",44,null],[3,"termios","","",null,null],[12,"c_iflag","","",45,null],[12,"c_oflag","","",45,null],[12,"c_cflag","","",45,null],[12,"c_lflag","","",45,null],[12,"c_line","","",45,null],[12,"c_cc","","",45,null],[12,"c_ispeed","","",45,null],[12,"c_ospeed","","",45,null],[3,"flock","","",null,null],[12,"l_type","","",46,null],[12,"l_whence","","",46,null],[12,"l_start","","",46,null],[12,"l_len","","",46,null],[12,"l_pid","","",46,null],[3,"ipc_perm","","",null,null],[12,"__key","","",47,null],[12,"uid","","",47,null],[12,"gid","","",47,null],[12,"cuid","","",47,null],[12,"cgid","","",47,null],[12,"mode","","",47,null],[12,"__seq","","",47,null],[3,"shmid_ds","","",null,null],[12,"shm_perm","","",48,null],[12,"shm_segsz","","",48,null],[12,"shm_atime","","",48,null],[12,"shm_dtime","","",48,null],[12,"shm_ctime","","",48,null],[12,"shm_cpid","","",48,null],[12,"shm_lpid","","",48,null],[12,"shm_nattch","","",48,null],[3,"sem_t","","",null,null],[3,"sigset_t","","",null,null],[3,"sysinfo","","",null,null],[12,"uptime","","",49,null],[12,"loads","","",49,null],[12,"totalram","","",49,null],[12,"freeram","","",49,null],[12,"sharedram","","",49,null],[12,"bufferram","","",49,null],[12,"totalswap","","",49,null],[12,"freeswap","","",49,null],[12,"procs","","",49,null],[12,"pad","","",49,null],[12,"totalhigh","","",49,null],[12,"freehigh","","",49,null],[12,"mem_unit","","",49,null],[12,"_f","","",49,null],[3,"stat","","",null,null],[12,"st_dev","","",50,null],[12,"st_ino","","",50,null],[12,"st_nlink","","",50,null],[12,"st_mode","","",50,null],[12,"st_uid","","",50,null],[12,"st_gid","","",50,null],[12,"st_rdev","","",50,null],[12,"st_size","","",50,null],[12,"st_blksize","","",50,null],[12,"st_blocks","","",50,null],[12,"st_atime","","",50,null],[12,"st_atime_nsec","","",50,null],[12,"st_mtime","","",50,null],[12,"st_mtime_nsec","","",50,null],[12,"st_ctime","","",50,null],[12,"st_ctime_nsec","","",50,null],[3,"stat64","","",null,null],[12,"st_dev","","",51,null],[12,"st_ino","","",51,null],[12,"st_nlink","","",51,null],[12,"st_mode","","",51,null],[12,"st_uid","","",51,null],[12,"st_gid","","",51,null],[12,"st_rdev","","",51,null],[12,"st_size","","",51,null],[12,"st_blksize","","",51,null],[12,"st_blocks","","",51,null],[12,"st_atime","","",51,null],[12,"st_atime_nsec","","",51,null],[12,"st_mtime","","",51,null],[12,"st_mtime_nsec","","",51,null],[12,"st_ctime","","",51,null],[12,"st_ctime_nsec","","",51,null],[3,"pthread_attr_t","","",null,null],[3,"_libc_fpxreg","","",null,null],[12,"significand","","",52,null],[12,"exponent","","",52,null],[3,"_libc_xmmreg","","",null,null],[12,"element","","",53,null],[3,"_libc_fpstate","","",null,null],[12,"cwd","","",54,null],[12,"swd","","",54,null],[12,"ftw","","",54,null],[12,"fop","","",54,null],[12,"rip","","",54,null],[12,"rdp","","",54,null],[12,"mxcsr","","",54,null],[12,"mxcr_mask","","",54,null],[12,"_st","","",54,null],[12,"_xmm","","",54,null],[3,"mcontext_t","","",null,null],[12,"gregs","","",55,null],[12,"fpregs","","",55,null],[3,"ucontext_t","","",null,null],[12,"uc_flags","","",56,null],[12,"uc_link","","",56,null],[12,"uc_stack","","",56,null],[12,"uc_mcontext","","",56,null],[12,"uc_sigmask","","",56,null],[4,"c_void","","",null,null],[4,"FILE","","",null,null],[4,"fpos_t","","",null,null],[4,"DIR","","",null,null],[4,"locale_t","","",null,null],[4,"timezone","","",null,null],[4,"fpos64_t","","",null,null],[5,"FD_CLR","","",null,null],[5,"FD_ISSET","","",null,null],[5,"FD_SET","","",null,null],[5,"FD_ZERO","","",null,null],[5,"WIFSTOPPED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WSTOPSIG","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WIFSIGNALED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WTERMSIG","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WIFEXITED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WEXITSTATUS","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WCOREDUMP","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"CPU_ZERO","","",null,null],[5,"CPU_SET","","",null,null],[5,"CPU_ISSET","","",null,{"inputs":[{"name":"usize"},{"name":"cpu_set_t"}],"output":{"name":"bool"}}],[5,"CPU_EQUAL","","",null,{"inputs":[{"name":"cpu_set_t"},{"name":"cpu_set_t"}],"output":{"name":"bool"}}],[5,"isalnum","","",null,null],[5,"isalpha","","",null,null],[5,"iscntrl","","",null,null],[5,"isdigit","","",null,null],[5,"isgraph","","",null,null],[5,"islower","","",null,null],[5,"isprint","","",null,null],[5,"ispunct","","",null,null],[5,"isspace","","",null,null],[5,"isupper","","",null,null],[5,"isxdigit","","",null,null],[5,"tolower","","",null,null],[5,"toupper","","",null,null],[5,"fopen","","",null,null],[5,"freopen","","",null,null],[5,"fflush","","",null,null],[5,"fclose","","",null,null],[5,"remove","","",null,null],[5,"rename","","",null,null],[5,"tmpfile","","",null,null],[5,"setvbuf","","",null,null],[5,"setbuf","","",null,null],[5,"fgetc","","",null,null],[5,"fgets","","",null,null],[5,"fputc","","",null,null],[5,"fputs","","",null,null],[5,"puts","","",null,null],[5,"ungetc","","",null,null],[5,"fread","","",null,null],[5,"fwrite","","",null,null],[5,"fseek","","",null,null],[5,"ftell","","",null,null],[5,"rewind","","",null,null],[5,"fgetpos","","",null,null],[5,"fsetpos","","",null,null],[5,"feof","","",null,null],[5,"ferror","","",null,null],[5,"perror","","",null,null],[5,"atoi","","",null,null],[5,"strtod","","",null,null],[5,"strtol","","",null,null],[5,"strtoul","","",null,null],[5,"calloc","","",null,null],[5,"malloc","","",null,null],[5,"realloc","","",null,null],[5,"free","","",null,null],[5,"abort","","",null,null],[5,"exit","","",null,null],[5,"_exit","","",null,null],[5,"atexit","","",null,null],[5,"system","","",null,null],[5,"getenv","","",null,null],[5,"strcpy","","",null,null],[5,"strncpy","","",null,null],[5,"strcat","","",null,null],[5,"strncat","","",null,null],[5,"strcmp","","",null,null],[5,"strncmp","","",null,null],[5,"strcoll","","",null,null],[5,"strchr","","",null,null],[5,"strrchr","","",null,null],[5,"strspn","","",null,null],[5,"strcspn","","",null,null],[5,"strdup","","",null,null],[5,"strpbrk","","",null,null],[5,"strstr","","",null,null],[5,"strlen","","",null,null],[5,"strnlen","","",null,null],[5,"strerror","","",null,null],[5,"strtok","","",null,null],[5,"strxfrm","","",null,null],[5,"wcslen","","",null,null],[5,"memcmp","","",null,null],[5,"memchr","","",null,null],[5,"abs","","",null,null],[5,"atof","","",null,null],[5,"labs","","",null,null],[5,"rand","","",null,null],[5,"srand","","",null,null],[5,"fprintf","","",null,null],[5,"printf","","",null,null],[5,"snprintf","","",null,null],[5,"sprintf","","",null,null],[5,"fscanf","","",null,null],[5,"scanf","","",null,null],[5,"sscanf","","",null,null],[5,"socket","","",null,null],[5,"connect","","",null,null],[5,"bind","","",null,null],[5,"listen","","",null,null],[5,"accept","","",null,null],[5,"getpeername","","",null,null],[5,"getsockname","","",null,null],[5,"setsockopt","","",null,null],[5,"socketpair","","",null,null],[5,"sendto","","",null,null],[5,"shutdown","","",null,null],[5,"chmod","","",null,null],[5,"fchmod","","",null,null],[5,"fstat","","",null,null],[5,"mkdir","","",null,null],[5,"stat","","",null,null],[5,"popen","","",null,null],[5,"pclose","","",null,null],[5,"fdopen","","",null,null],[5,"fileno","","",null,null],[5,"open","","",null,null],[5,"creat","","",null,null],[5,"fcntl","","",null,null],[5,"opendir","","",null,null],[5,"readdir_r","","",null,null],[5,"closedir","","",null,null],[5,"rewinddir","","",null,null],[5,"access","","",null,null],[5,"alarm","","",null,null],[5,"chdir","","",null,null],[5,"chown","","",null,null],[5,"lchown","","",null,null],[5,"close","","",null,null],[5,"dup","","",null,null],[5,"dup2","","",null,null],[5,"execv","","",null,null],[5,"execve","","",null,null],[5,"execvp","","",null,null],[5,"fork","","",null,null],[5,"fpathconf","","",null,null],[5,"getcwd","","",null,null],[5,"getegid","","",null,null],[5,"geteuid","","",null,null],[5,"getgid","","",null,null],[5,"getgroups","","",null,null],[5,"getlogin","","",null,null],[5,"getopt","","",null,null],[5,"getpgrp","","",null,null],[5,"getpid","","",null,null],[5,"getppid","","",null,null],[5,"getuid","","",null,null],[5,"isatty","","",null,null],[5,"link","","",null,null],[5,"lseek","","",null,null],[5,"pathconf","","",null,null],[5,"pause","","",null,null],[5,"pipe","","",null,null],[5,"posix_memalign","","",null,null],[5,"read","","",null,null],[5,"rmdir","","",null,null],[5,"setgid","","",null,null],[5,"setpgid","","",null,null],[5,"setsid","","",null,null],[5,"setuid","","",null,null],[5,"sleep","","",null,null],[5,"nanosleep","","",null,null],[5,"tcgetpgrp","","",null,null],[5,"ttyname","","",null,null],[5,"unlink","","",null,null],[5,"wait","","",null,null],[5,"waitpid","","",null,null],[5,"write","","",null,null],[5,"pread","","",null,null],[5,"pwrite","","",null,null],[5,"umask","","",null,null],[5,"utime","","",null,null],[5,"kill","","",null,null],[5,"mlock","","",null,null],[5,"munlock","","",null,null],[5,"mlockall","","",null,null],[5,"munlockall","","",null,null],[5,"mmap","","",null,null],[5,"munmap","","",null,null],[5,"if_nametoindex","","",null,null],[5,"if_indextoname","","",null,null],[5,"lstat","","",null,null],[5,"fsync","","",null,null],[5,"setenv","","",null,null],[5,"unsetenv","","",null,null],[5,"symlink","","",null,null],[5,"ftruncate","","",null,null],[5,"signal","","",null,null],[5,"getrlimit","","",null,null],[5,"setrlimit","","",null,null],[5,"getrusage","","",null,null],[5,"getdtablesize","","",null,null],[5,"realpath","","",null,null],[5,"flock","","",null,null],[5,"gettimeofday","","",null,null],[5,"pthread_self","","",null,null],[5,"pthread_create","","",null,null],[5,"pthread_join","","",null,null],[5,"pthread_attr_init","","",null,null],[5,"pthread_attr_destroy","","",null,null],[5,"pthread_attr_setstacksize","","",null,null],[5,"pthread_attr_setdetachstate","","",null,null],[5,"pthread_detach","","",null,null],[5,"sched_yield","","",null,null],[5,"pthread_key_create","","",null,null],[5,"pthread_key_delete","","",null,null],[5,"pthread_getspecific","","",null,null],[5,"pthread_setspecific","","",null,null],[5,"pthread_mutex_init","","",null,null],[5,"pthread_mutex_destroy","","",null,null],[5,"pthread_mutex_lock","","",null,null],[5,"pthread_mutex_trylock","","",null,null],[5,"pthread_mutex_unlock","","",null,null],[5,"pthread_mutexattr_init","","",null,null],[5,"pthread_mutexattr_destroy","","",null,null],[5,"pthread_mutexattr_settype","","",null,null],[5,"pthread_cond_wait","","",null,null],[5,"pthread_cond_timedwait","","",null,null],[5,"pthread_cond_signal","","",null,null],[5,"pthread_cond_broadcast","","",null,null],[5,"pthread_cond_destroy","","",null,null],[5,"pthread_rwlock_destroy","","",null,null],[5,"pthread_rwlock_rdlock","","",null,null],[5,"pthread_rwlock_tryrdlock","","",null,null],[5,"pthread_rwlock_wrlock","","",null,null],[5,"pthread_rwlock_trywrlock","","",null,null],[5,"pthread_rwlock_unlock","","",null,null],[5,"pthread_sigmask","","",null,null],[5,"pthread_kill","","",null,null],[5,"strerror_r","","",null,null],[5,"getsockopt","","",null,null],[5,"raise","","",null,null],[5,"sigaction","","",null,null],[5,"sigaltstack","","",null,null],[5,"sigwait","","",null,null],[5,"utimes","","",null,null],[5,"dlopen","","",null,null],[5,"dlerror","","",null,null],[5,"dlsym","","",null,null],[5,"dlclose","","",null,null],[5,"dladdr","","",null,null],[5,"getaddrinfo","","",null,null],[5,"freeaddrinfo","","",null,null],[5,"gai_strerror","","",null,null],[5,"gmtime_r","","",null,null],[5,"localtime_r","","",null,null],[5,"mktime","","",null,null],[5,"mknod","","",null,null],[5,"writev","","",null,null],[5,"readv","","",null,null],[5,"uname","","",null,null],[5,"daemon","","",null,null],[5,"gethostname","","",null,null],[5,"chroot","","",null,null],[5,"usleep","","",null,null],[5,"send","","",null,null],[5,"recv","","",null,null],[5,"putenv","","",null,null],[5,"sendmsg","","",null,null],[5,"recvmsg","","",null,null],[5,"poll","","",null,null],[5,"select","","",null,null],[5,"setlocale","","",null,null],[5,"localeconv","","",null,null],[5,"sem_destroy","","",null,null],[5,"sem_open","","",null,null],[5,"sem_close","","",null,null],[5,"sem_unlink","","",null,null],[5,"sem_wait","","",null,null],[5,"sem_trywait","","",null,null],[5,"sem_post","","",null,null],[5,"sem_init","","",null,null],[5,"getifaddrs","","",null,null],[5,"freeifaddrs","","",null,null],[5,"glob","","",null,null],[5,"globfree","","",null,null],[5,"posix_madvise","","",null,null],[5,"shm_unlink","","",null,null],[5,"seekdir","","",null,null],[5,"telldir","","",null,null],[5,"getsid","","",null,null],[5,"madvise","","",null,null],[5,"readlink","","",null,null],[5,"msync","","",null,null],[5,"sysconf","","",null,null],[5,"recvfrom","","",null,null],[5,"mkfifo","","",null,null],[5,"sigemptyset","","",null,null],[5,"sigaddset","","",null,null],[5,"sigfillset","","",null,null],[5,"sigdelset","","",null,null],[5,"sigismember","","",null,null],[5,"pselect","","",null,null],[5,"fseeko","","",null,null],[5,"ftello","","",null,null],[5,"timegm","","",null,null],[5,"statvfs","","",null,null],[5,"fstatvfs","","",null,null],[5,"tcdrain","","",null,null],[5,"cfgetispeed","","",null,null],[5,"cfgetospeed","","",null,null],[5,"cfsetispeed","","",null,null],[5,"cfsetospeed","","",null,null],[5,"tcgetattr","","",null,null],[5,"tcsetattr","","",null,null],[5,"tcflow","","",null,null],[5,"tcflush","","",null,null],[5,"tcsendbreak","","",null,null],[5,"mkstemp","","",null,null],[5,"mkstemps","","",null,null],[5,"mkdtemp","","",null,null],[5,"futimes","","",null,null],[5,"nl_langinfo","","",null,null],[5,"openlog","","",null,null],[5,"closelog","","",null,null],[5,"setlogmask","","",null,null],[5,"syslog","","",null,null],[5,"nice","","",null,null],[5,"getpwuid_r","","",null,null],[5,"fdatasync","","",null,null],[5,"mincore","","",null,null],[5,"clock_getres","","",null,null],[5,"clock_gettime","","",null,null],[5,"prctl","","",null,null],[5,"pthread_getattr_np","","",null,null],[5,"pthread_attr_getguardsize","","",null,null],[5,"pthread_attr_getstack","","",null,null],[5,"memalign","","",null,null],[5,"setgroups","","",null,null],[5,"sched_setscheduler","","",null,null],[5,"sched_getscheduler","","",null,null],[5,"sched_get_priority_max","","",null,null],[5,"sched_get_priority_min","","",null,null],[5,"epoll_create","","",null,null],[5,"epoll_create1","","",null,null],[5,"epoll_ctl","","",null,null],[5,"epoll_wait","","",null,null],[5,"pipe2","","",null,null],[5,"mount","","",null,null],[5,"umount","","",null,null],[5,"umount2","","",null,null],[5,"clone","","",null,null],[5,"statfs","","",null,null],[5,"fstatfs","","",null,null],[5,"memrchr","","",null,null],[5,"syscall","","",null,null],[5,"sendfile","","",null,null],[5,"splice","","",null,null],[5,"tee","","",null,null],[5,"vmsplice","","",null,null],[5,"posix_fadvise","","",null,null],[5,"futimens","","",null,null],[5,"utimensat","","",null,null],[5,"duplocale","","",null,null],[5,"freelocale","","",null,null],[5,"newlocale","","",null,null],[5,"uselocale","","",null,null],[5,"creat64","","",null,null],[5,"fstat64","","",null,null],[5,"ftruncate64","","",null,null],[5,"getrlimit64","","",null,null],[5,"lseek64","","",null,null],[5,"lstat64","","",null,null],[5,"mmap64","","",null,null],[5,"open64","","",null,null],[5,"pread64","","",null,null],[5,"pwrite64","","",null,null],[5,"readdir64_r","","",null,null],[5,"setrlimit64","","",null,null],[5,"stat64","","",null,null],[5,"eventfd","","",null,null],[5,"sysinfo","","",null,null],[5,"openat","","",null,null],[5,"faccessat","","",null,null],[5,"fchmodat","","",null,null],[5,"fchownat","","",null,null],[5,"fstatat","","",null,null],[5,"linkat","","",null,null],[5,"mkdirat","","",null,null],[5,"mknodat","","",null,null],[5,"readlinkat","","",null,null],[5,"renameat","","",null,null],[5,"symlinkat","","",null,null],[5,"unlinkat","","",null,null],[5,"shm_open","","",null,null],[5,"shmget","","",null,null],[5,"shmat","","",null,null],[5,"shmdt","","",null,null],[5,"shmctl","","",null,null],[5,"mprotect","","",null,null],[5,"__errno_location","","",null,null],[5,"fopen64","","",null,null],[5,"freopen64","","",null,null],[5,"tmpfile64","","",null,null],[5,"fgetpos64","","",null,null],[5,"fsetpos64","","",null,null],[5,"fseeko64","","",null,null],[5,"ftello64","","",null,null],[5,"fallocate","","",null,null],[5,"posix_fallocate","","",null,null],[5,"readahead","","",null,null],[5,"getxattr","","",null,null],[5,"lgetxattr","","",null,null],[5,"fgetxattr","","",null,null],[5,"setxattr","","",null,null],[5,"lsetxattr","","",null,null],[5,"fsetxattr","","",null,null],[5,"listxattr","","",null,null],[5,"llistxattr","","",null,null],[5,"flistxattr","","",null,null],[5,"removexattr","","",null,null],[5,"lremovexattr","","",null,null],[5,"fremovexattr","","",null,null],[5,"signalfd","","",null,null],[5,"pwritev","","",null,null],[5,"preadv","","",null,null],[5,"quotactl","","",null,null],[5,"mq_open","","",null,null],[5,"mq_close","","",null,null],[5,"mq_unlink","","",null,null],[5,"mq_receive","","",null,null],[5,"mq_send","","",null,null],[5,"mq_getattr","","",null,null],[5,"mq_setattr","","",null,null],[5,"sched_getaffinity","","",null,null],[5,"sched_setaffinity","","",null,null],[5,"epoll_pwait","","",null,null],[5,"dup3","","",null,null],[5,"unshare","","",null,null],[5,"sethostname","","",null,null],[5,"setns","","",null,null],[5,"mkostemp","","",null,null],[5,"mkostemps","","",null,null],[5,"sigtimedwait","","",null,null],[5,"sigwaitinfo","","",null,null],[5,"openpty","","",null,null],[5,"forkpty","","",null,null],[5,"nl_langinfo_l","","",null,null],[5,"getnameinfo","","",null,null],[5,"prlimit","","",null,null],[5,"prlimit64","","",null,null],[5,"getloadavg","","",null,null],[5,"process_vm_readv","","",null,null],[5,"process_vm_writev","","",null,null],[5,"mkfifoat","","",null,null],[5,"sysctl","","",null,null],[5,"ioctl","","",null,null],[5,"backtrace","","",null,null],[5,"glob64","","",null,null],[5,"globfree64","","",null,null],[5,"ptrace","","",null,null],[5,"pthread_attr_getaffinity_np","","",null,null],[5,"pthread_attr_setaffinity_np","","",null,null],[5,"getpriority","","",null,null],[5,"setpriority","","",null,null],[5,"pthread_getaffinity_np","","",null,null],[5,"pthread_setaffinity_np","","",null,null],[5,"sched_getcpu","","",null,null],[5,"getcontext","","",null,null],[5,"setcontext","","",null,null],[5,"makecontext","","",null,null],[5,"swapcontext","","",null,null],[11,"is_some","core::option","Returns `true` if the option is a `Some` value",57,null],[11,"is_none","","Returns `true` if the option is a `None` value",57,null],[11,"as_ref","","Converts from `Option&lt;T&gt;` to `Option&lt;&amp;T&gt;`",57,null],[11,"as_mut","","Converts from `Option&lt;T&gt;` to `Option&lt;&amp;mut T&gt;`",57,null],[11,"expect","","Unwraps an option, yielding the content of a `Some`.",57,null],[11,"unwrap","","Moves the value `v` out of the `Option&lt;T&gt;` if it is `Some(v)`.",57,null],[11,"unwrap_or","","Returns the contained value or a default.",57,null],[11,"unwrap_or_else","","Returns the contained value or computes it from a closure.",57,null],[11,"map","","Maps an `Option&lt;T&gt;` to `Option&lt;U&gt;` by applying a function to a contained value",57,null],[11,"map_or","","Applies a function to the contained value (if any),\nor returns a `default` (if not).",57,null],[11,"map_or_else","","Applies a function to the contained value (if any),\nor computes a `default` (if not).",57,null],[11,"ok_or","","Transforms the `Option&lt;T&gt;` into a `Result&lt;T, E&gt;`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err)`.",57,null],[11,"ok_or_else","","Transforms the `Option&lt;T&gt;` into a `Result&lt;T, E&gt;`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err())`.",57,null],[11,"iter","","Returns an iterator over the possibly contained value.",57,null],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",57,null],[11,"and","","Returns `None` if the option is `None`, otherwise returns `optb`.",57,null],[11,"and_then","","Returns `None` if the option is `None`, otherwise calls `f` with the\nwrapped value and returns the result.",57,null],[11,"or","","Returns the option if it contains a value, otherwise returns `optb`.",57,null],[11,"or_else","","Returns the option if it contains a value, otherwise calls `f` and\nreturns the result.",57,null],[11,"take","","Takes the value out of the option, leaving a `None` in its place.",57,null],[11,"cloned","","Maps an `Option&lt;&amp;T&gt;` to an `Option&lt;T&gt;` by cloning the contents of the\noption.",57,null],[11,"unwrap_or_default","","Returns the contained value or a default",57,null],[11,"hash","core::num","",58,null],[11,"default","","",58,{"inputs":[],"output":{"name":"wrapping"}}],[11,"clone","","",58,null],[11,"cmp","","",58,null],[11,"partial_cmp","","",58,null],[11,"lt","","",58,null],[11,"le","","",58,null],[11,"gt","","",58,null],[11,"ge","","",58,null],[11,"eq","","",58,null],[11,"ne","","",58,null],[11,"fmt","","",58,null],[11,"fmt","","",58,null],[11,"shl","","",58,null],[11,"shl_assign","","",58,null],[11,"shr","","",58,null],[11,"shr_assign","","",58,null],[11,"shl","","",58,null],[11,"shl_assign","","",58,null],[11,"shr","","",58,null],[11,"shr_assign","","",58,null],[11,"shl","","",58,null],[11,"shl_assign","","",58,null],[11,"shr","","",58,null],[11,"shr_assign","","",58,null],[11,"shl","","",58,null],[11,"shl_assign","","",58,null],[11,"shr","","",58,null],[11,"shr_assign","","",58,null],[11,"shl","","",58,null],[11,"shl_assign","","",58,null],[11,"shr","","",58,null],[11,"shr_assign","","",58,null],[11,"shl","","",58,null],[11,"shl_assign","","",58,null],[11,"shr","","",58,null],[11,"shr_assign","","",58,null],[11,"shl","","",58,null],[11,"shl_assign","","",58,null],[11,"shr","","",58,null],[11,"shr_assign","","",58,null],[11,"shl","","",58,null],[11,"shl_assign","","",58,null],[11,"shr","","",58,null],[11,"shr_assign","","",58,null],[11,"shl","","",58,null],[11,"shl_assign","","",58,null],[11,"shr","","",58,null],[11,"shr_assign","","",58,null],[11,"shl","","",58,null],[11,"shl_assign","","",58,null],[11,"shr","","",58,null],[11,"shr_assign","","",58,null],[11,"add","","",58,null],[11,"add_assign","","",58,null],[11,"sub","","",58,null],[11,"sub_assign","","",58,null],[11,"mul","","",58,null],[11,"mul_assign","","",58,null],[11,"div","","",58,null],[11,"div_assign","","",58,null],[11,"rem","","",58,null],[11,"rem_assign","","",58,null],[11,"not","","",58,null],[11,"bitxor","","",58,null],[11,"bitxor_assign","","",58,null],[11,"bitor","","",58,null],[11,"bitor_assign","","",58,null],[11,"bitand","","",58,null],[11,"bitand_assign","","",58,null],[11,"neg","","",58,null],[11,"add","","",58,null],[11,"add_assign","","",58,null],[11,"sub","","",58,null],[11,"sub_assign","","",58,null],[11,"mul","","",58,null],[11,"mul_assign","","",58,null],[11,"div","","",58,null],[11,"div_assign","","",58,null],[11,"rem","","",58,null],[11,"rem_assign","","",58,null],[11,"not","","",58,null],[11,"bitxor","","",58,null],[11,"bitxor_assign","","",58,null],[11,"bitor","","",58,null],[11,"bitor_assign","","",58,null],[11,"bitand","","",58,null],[11,"bitand_assign","","",58,null],[11,"neg","","",58,null],[11,"add","","",58,null],[11,"add_assign","","",58,null],[11,"sub","","",58,null],[11,"sub_assign","","",58,null],[11,"mul","","",58,null],[11,"mul_assign","","",58,null],[11,"div","","",58,null],[11,"div_assign","","",58,null],[11,"rem","","",58,null],[11,"rem_assign","","",58,null],[11,"not","","",58,null],[11,"bitxor","","",58,null],[11,"bitxor_assign","","",58,null],[11,"bitor","","",58,null],[11,"bitor_assign","","",58,null],[11,"bitand","","",58,null],[11,"bitand_assign","","",58,null],[11,"neg","","",58,null],[11,"add","","",58,null],[11,"add_assign","","",58,null],[11,"sub","","",58,null],[11,"sub_assign","","",58,null],[11,"mul","","",58,null],[11,"mul_assign","","",58,null],[11,"div","","",58,null],[11,"div_assign","","",58,null],[11,"rem","","",58,null],[11,"rem_assign","","",58,null],[11,"not","","",58,null],[11,"bitxor","","",58,null],[11,"bitxor_assign","","",58,null],[11,"bitor","","",58,null],[11,"bitor_assign","","",58,null],[11,"bitand","","",58,null],[11,"bitand_assign","","",58,null],[11,"neg","","",58,null],[11,"add","","",58,null],[11,"add_assign","","",58,null],[11,"sub","","",58,null],[11,"sub_assign","","",58,null],[11,"mul","","",58,null],[11,"mul_assign","","",58,null],[11,"div","","",58,null],[11,"div_assign","","",58,null],[11,"rem","","",58,null],[11,"rem_assign","","",58,null],[11,"not","","",58,null],[11,"bitxor","","",58,null],[11,"bitxor_assign","","",58,null],[11,"bitor","","",58,null],[11,"bitor_assign","","",58,null],[11,"bitand","","",58,null],[11,"bitand_assign","","",58,null],[11,"neg","","",58,null],[11,"add","","",58,null],[11,"add_assign","","",58,null],[11,"sub","","",58,null],[11,"sub_assign","","",58,null],[11,"mul","","",58,null],[11,"mul_assign","","",58,null],[11,"div","","",58,null],[11,"div_assign","","",58,null],[11,"rem","","",58,null],[11,"rem_assign","","",58,null],[11,"not","","",58,null],[11,"bitxor","","",58,null],[11,"bitxor_assign","","",58,null],[11,"bitor","","",58,null],[11,"bitor_assign","","",58,null],[11,"bitand","","",58,null],[11,"bitand_assign","","",58,null],[11,"neg","","",58,null],[11,"add","","",58,null],[11,"add_assign","","",58,null],[11,"sub","","",58,null],[11,"sub_assign","","",58,null],[11,"mul","","",58,null],[11,"mul_assign","","",58,null],[11,"div","","",58,null],[11,"div_assign","","",58,null],[11,"rem","","",58,null],[11,"rem_assign","","",58,null],[11,"not","","",58,null],[11,"bitxor","","",58,null],[11,"bitxor_assign","","",58,null],[11,"bitor","","",58,null],[11,"bitor_assign","","",58,null],[11,"bitand","","",58,null],[11,"bitand_assign","","",58,null],[11,"neg","","",58,null],[11,"add","","",58,null],[11,"add_assign","","",58,null],[11,"sub","","",58,null],[11,"sub_assign","","",58,null],[11,"mul","","",58,null],[11,"mul_assign","","",58,null],[11,"div","","",58,null],[11,"div_assign","","",58,null],[11,"rem","","",58,null],[11,"rem_assign","","",58,null],[11,"not","","",58,null],[11,"bitxor","","",58,null],[11,"bitxor_assign","","",58,null],[11,"bitor","","",58,null],[11,"bitor_assign","","",58,null],[11,"bitand","","",58,null],[11,"bitand_assign","","",58,null],[11,"neg","","",58,null],[11,"add","","",58,null],[11,"add_assign","","",58,null],[11,"sub","","",58,null],[11,"sub_assign","","",58,null],[11,"mul","","",58,null],[11,"mul_assign","","",58,null],[11,"div","","",58,null],[11,"div_assign","","",58,null],[11,"rem","","",58,null],[11,"rem_assign","","",58,null],[11,"not","","",58,null],[11,"bitxor","","",58,null],[11,"bitxor_assign","","",58,null],[11,"bitor","","",58,null],[11,"bitor_assign","","",58,null],[11,"bitand","","",58,null],[11,"bitand_assign","","",58,null],[11,"neg","","",58,null],[11,"add","","",58,null],[11,"add_assign","","",58,null],[11,"sub","","",58,null],[11,"sub_assign","","",58,null],[11,"mul","","",58,null],[11,"mul_assign","","",58,null],[11,"div","","",58,null],[11,"div_assign","","",58,null],[11,"rem","","",58,null],[11,"rem_assign","","",58,null],[11,"not","","",58,null],[11,"bitxor","","",58,null],[11,"bitxor_assign","","",58,null],[11,"bitor","","",58,null],[11,"bitor_assign","","",58,null],[11,"bitand","","",58,null],[11,"bitand_assign","","",58,null],[11,"neg","","",58,null],[11,"eq","core::num::dec2flt","",59,null],[11,"ne","","",59,null],[11,"clone","","",59,null],[11,"fmt","","",59,null],[11,"fmt","","",59,null],[11,"fmt","core::num","",60,null],[11,"eq","","",60,null],[11,"clone","","",60,null],[11,"clone","","",61,null],[11,"fmt","","",61,null],[11,"fmt","","",61,null],[11,"eq","","",62,null],[11,"ne","","",62,null],[11,"clone","","",62,null],[11,"fmt","","",62,null],[11,"fmt","","",62,null],[11,"hash","core::nonzero","",63,null],[11,"fmt","","",63,null],[11,"partial_cmp","","",63,null],[11,"lt","","",63,null],[11,"le","","",63,null],[11,"gt","","",63,null],[11,"ge","","",63,null],[11,"cmp","","",63,null],[11,"eq","","",63,null],[11,"ne","","",63,null],[11,"clone","","",63,null],[11,"new","","Creates an instance of NonZero with the provided value.\nYou must indeed ensure that the value is actually &quot;non-zero&quot;.",63,{"inputs":[{"name":"t"}],"output":{"name":"nonzero"}}],[11,"deref","","",63,null],[11,"new","core::ptr","Creates a new `Unique`.",64,null],[11,"get","","Dereferences the content.",64,null],[11,"get_mut","","Mutably dereferences the content.",64,null],[11,"deref","","",64,null],[11,"fmt","","",64,null],[11,"new","","Creates a new `Shared`.",65,null],[11,"clone","","",65,null],[11,"deref","","",65,null],[11,"fmt","","",65,null],[11,"hash","core::marker","",66,null],[11,"eq","","",66,null],[11,"partial_cmp","","",66,null],[11,"cmp","","",66,null],[11,"clone","","",66,null],[11,"default","","",66,{"inputs":[],"output":{"name":"phantomdata"}}],[11,"eq","core::ops","",67,null],[11,"clone","","",67,null],[11,"fmt","","",67,null],[11,"eq","","",68,null],[11,"ne","","",68,null],[11,"clone","","",68,null],[11,"fmt","","",68,null],[11,"contains","","# Examples",68,null],[11,"eq","","",69,null],[11,"ne","","",69,null],[11,"clone","","",69,null],[11,"fmt","","",69,null],[11,"contains","","# Examples",69,null],[11,"eq","","",70,null],[11,"ne","","",70,null],[11,"clone","","",70,null],[11,"fmt","","",70,null],[11,"contains","","# Examples",70,null],[11,"eq","","",71,null],[11,"ne","","",71,null],[11,"clone","","",71,null],[11,"fmt","","",71,null],[11,"from","","",71,{"inputs":[{"name":"range"}],"output":{"name":"rangeinclusive"}}],[11,"contains","","# Examples",71,null],[11,"eq","","",72,null],[11,"ne","","",72,null],[11,"clone","","",72,null],[11,"fmt","","",72,null],[11,"contains","","# Examples",72,null],[11,"hash","core::cmp","",73,null],[11,"fmt","","",73,null],[11,"eq","","",73,null],[11,"clone","","",73,null],[11,"reverse","","Reverse the `Ordering`.",73,null],[11,"cmp","","",73,null],[11,"partial_cmp","","",73,null],[11,"fmt","libc","",74,null],[11,"fmt","","",74,null],[11,"is","","Returns true if the boxed type is the same as `T`",74,null],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or\n`None` if it isn&#39;t.",74,null],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or\n`None` if it isn&#39;t.",74,null],[11,"is","","Forwards to the method defined on the type `Any`.",74,null],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",74,null],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",74,null],[11,"hash","core::any","",75,null],[11,"fmt","","",75,null],[11,"eq","","",75,null],[11,"ne","","",75,null],[11,"clone","","",75,null],[11,"of","","Returns the `TypeId` of the type this generic function has been\ninstantiated with",75,{"inputs":[],"output":{"name":"typeid"}}],[11,"default","core::sync::atomic","",76,{"inputs":[],"output":{"name":"atomicbool"}}],[11,"default","","",77,{"inputs":[],"output":{"name":"atomicptr"}}],[11,"fmt","","",78,null],[11,"clone","","",78,null],[11,"new","","Creates a new `AtomicBool`.",76,{"inputs":[{"name":"bool"}],"output":{"name":"atomicbool"}}],[11,"load","","Loads a value from the bool.",76,null],[11,"store","","Stores a value into the bool.",76,null],[11,"swap","","Stores a value into the bool, returning the old value.",76,null],[11,"compare_and_swap","","Stores a value into the `bool` if the current value is the same as the `current` value.",76,null],[11,"compare_exchange","","Stores a value into the `bool` if the current value is the same as the `current` value.",76,null],[11,"compare_exchange_weak","","Stores a value into the `bool` if the current value is the same as the `current` value.",76,null],[11,"fetch_and","","Logical &quot;and&quot; with a boolean value.",76,null],[11,"fetch_nand","","Logical &quot;nand&quot; with a boolean value.",76,null],[11,"fetch_or","","Logical &quot;or&quot; with a boolean value.",76,null],[11,"fetch_xor","","Logical &quot;xor&quot; with a boolean value.",76,null],[11,"new","","Creates a new `AtomicPtr`.",77,null],[11,"load","","Loads a value from the pointer.",77,null],[11,"store","","Stores a value into the pointer.",77,null],[11,"swap","","Stores a value into the pointer, returning the old value.",77,null],[11,"compare_and_swap","","Stores a value into the pointer if the current value is the same as the `current` value.",77,null],[11,"compare_exchange","","Stores a value into the pointer if the current value is the same as the `current` value.",77,null],[11,"compare_exchange_weak","","Stores a value into the pointer if the current value is the same as the `current` value.",77,null],[11,"default","","",79,{"inputs":[],"output":{"name":"atomici8"}}],[11,"fmt","","",79,null],[11,"new","","Creates a new atomic integer.",79,{"inputs":[{"name":"i8"}],"output":{"name":"atomici8"}}],[11,"load","","Loads a value from the atomic integer.",79,null],[11,"store","","Stores a value into the atomic integer.",79,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",79,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",79,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",79,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",79,null],[11,"fetch_add","","Add to the current value, returning the previous value.",79,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",79,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",79,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",79,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",79,null],[11,"default","","",80,{"inputs":[],"output":{"name":"atomicu8"}}],[11,"fmt","","",80,null],[11,"new","","Creates a new atomic integer.",80,{"inputs":[{"name":"u8"}],"output":{"name":"atomicu8"}}],[11,"load","","Loads a value from the atomic integer.",80,null],[11,"store","","Stores a value into the atomic integer.",80,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",80,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",80,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",80,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",80,null],[11,"fetch_add","","Add to the current value, returning the previous value.",80,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",80,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",80,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",80,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",80,null],[11,"default","","",81,{"inputs":[],"output":{"name":"atomici16"}}],[11,"fmt","","",81,null],[11,"new","","Creates a new atomic integer.",81,{"inputs":[{"name":"i16"}],"output":{"name":"atomici16"}}],[11,"load","","Loads a value from the atomic integer.",81,null],[11,"store","","Stores a value into the atomic integer.",81,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",81,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",81,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",81,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",81,null],[11,"fetch_add","","Add to the current value, returning the previous value.",81,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",81,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",81,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",81,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",81,null],[11,"default","","",82,{"inputs":[],"output":{"name":"atomicu16"}}],[11,"fmt","","",82,null],[11,"new","","Creates a new atomic integer.",82,{"inputs":[{"name":"u16"}],"output":{"name":"atomicu16"}}],[11,"load","","Loads a value from the atomic integer.",82,null],[11,"store","","Stores a value into the atomic integer.",82,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",82,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",82,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",82,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",82,null],[11,"fetch_add","","Add to the current value, returning the previous value.",82,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",82,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",82,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",82,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",82,null],[11,"default","","",83,{"inputs":[],"output":{"name":"atomici32"}}],[11,"fmt","","",83,null],[11,"new","","Creates a new atomic integer.",83,{"inputs":[{"name":"i32"}],"output":{"name":"atomici32"}}],[11,"load","","Loads a value from the atomic integer.",83,null],[11,"store","","Stores a value into the atomic integer.",83,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",83,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",83,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",83,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",83,null],[11,"fetch_add","","Add to the current value, returning the previous value.",83,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",83,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",83,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",83,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",83,null],[11,"default","","",84,{"inputs":[],"output":{"name":"atomicu32"}}],[11,"fmt","","",84,null],[11,"new","","Creates a new atomic integer.",84,{"inputs":[{"name":"u32"}],"output":{"name":"atomicu32"}}],[11,"load","","Loads a value from the atomic integer.",84,null],[11,"store","","Stores a value into the atomic integer.",84,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",84,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",84,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",84,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",84,null],[11,"fetch_add","","Add to the current value, returning the previous value.",84,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",84,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",84,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",84,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",84,null],[11,"default","","",85,{"inputs":[],"output":{"name":"atomici64"}}],[11,"fmt","","",85,null],[11,"new","","Creates a new atomic integer.",85,{"inputs":[{"name":"i64"}],"output":{"name":"atomici64"}}],[11,"load","","Loads a value from the atomic integer.",85,null],[11,"store","","Stores a value into the atomic integer.",85,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",85,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",85,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",85,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",85,null],[11,"fetch_add","","Add to the current value, returning the previous value.",85,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",85,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",85,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",85,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",85,null],[11,"default","","",86,{"inputs":[],"output":{"name":"atomicu64"}}],[11,"fmt","","",86,null],[11,"new","","Creates a new atomic integer.",86,{"inputs":[{"name":"u64"}],"output":{"name":"atomicu64"}}],[11,"load","","Loads a value from the atomic integer.",86,null],[11,"store","","Stores a value into the atomic integer.",86,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",86,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",86,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",86,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",86,null],[11,"fetch_add","","Add to the current value, returning the previous value.",86,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",86,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",86,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",86,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",86,null],[11,"default","","",87,{"inputs":[],"output":{"name":"atomicisize"}}],[11,"fmt","","",87,null],[11,"new","","Creates a new atomic integer.",87,{"inputs":[{"name":"isize"}],"output":{"name":"atomicisize"}}],[11,"load","","Loads a value from the atomic integer.",87,null],[11,"store","","Stores a value into the atomic integer.",87,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",87,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",87,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",87,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",87,null],[11,"fetch_add","","Add to the current value, returning the previous value.",87,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",87,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",87,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",87,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",87,null],[11,"default","","",88,{"inputs":[],"output":{"name":"atomicusize"}}],[11,"fmt","","",88,null],[11,"new","","Creates a new atomic integer.",88,{"inputs":[{"name":"usize"}],"output":{"name":"atomicusize"}}],[11,"load","","Loads a value from the atomic integer.",88,null],[11,"store","","Stores a value into the atomic integer.",88,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",88,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",88,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",88,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",88,null],[11,"fetch_add","","Add to the current value, returning the previous value.",88,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",88,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",88,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",88,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",88,null],[11,"fmt","","",76,null],[11,"fmt","","",77,null],[11,"new","core::cell","Creates a new `Cell` containing the given value.",89,{"inputs":[{"name":"t"}],"output":{"name":"cell"}}],[11,"get","","Returns a copy of the contained value.",89,null],[11,"set","","Sets the contained value.",89,null],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",89,null],[11,"get_mut","","Returns a mutable reference to the underlying data.",89,null],[11,"clone","","",89,null],[11,"default","","",89,{"inputs":[],"output":{"name":"cell"}}],[11,"eq","","",89,null],[11,"partial_cmp","","",89,null],[11,"lt","","",89,null],[11,"le","","",89,null],[11,"gt","","",89,null],[11,"ge","","",89,null],[11,"cmp","","",89,null],[11,"fmt","","",90,null],[11,"eq","","",90,null],[11,"clone","","",90,null],[11,"new","","Creates a new `RefCell` containing `value`.",91,{"inputs":[{"name":"t"}],"output":{"name":"refcell"}}],[11,"into_inner","","Consumes the `RefCell`, returning the wrapped value.",91,null],[11,"borrow_state","","Query the current state of this `RefCell`",91,null],[11,"borrow","","Immutably borrows the wrapped value.",91,null],[11,"borrow_mut","","Mutably borrows the wrapped value.",91,null],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",91,null],[11,"get_mut","","Returns a mutable reference to the underlying data.",91,null],[11,"clone","","",91,null],[11,"default","","",91,{"inputs":[],"output":{"name":"refcell"}}],[11,"eq","","",91,null],[11,"partial_cmp","","",91,null],[11,"lt","","",91,null],[11,"le","","",91,null],[11,"gt","","",91,null],[11,"ge","","",91,null],[11,"cmp","","",91,null],[11,"deref","","",92,null],[11,"clone","","Copies a `Ref`.",92,{"inputs":[{"name":"ref"}],"output":{"name":"ref"}}],[11,"map","","Make a new `Ref` for a component of the borrowed data.",92,{"inputs":[{"name":"ref"},{"name":"f"}],"output":{"name":"ref"}}],[11,"filter_map","","Make a new `Ref` for an optional component of the borrowed data, e.g. an\nenum variant.",92,{"inputs":[{"name":"ref"},{"name":"f"}],"output":{"name":"option"}}],[11,"map","","Make a new `RefMut` for a component of the borrowed data, e.g. an enum\nvariant.",93,{"inputs":[{"name":"refmut"},{"name":"f"}],"output":{"name":"refmut"}}],[11,"filter_map","","Make a new `RefMut` for an optional component of the borrowed data, e.g.\nan enum variant.",93,{"inputs":[{"name":"refmut"},{"name":"f"}],"output":{"name":"option"}}],[11,"deref","","",93,null],[11,"deref_mut","","",93,null],[11,"new","","Constructs a new instance of `UnsafeCell` which will wrap the specified\nvalue.",94,{"inputs":[{"name":"t"}],"output":{"name":"unsafecell"}}],[11,"into_inner","","Unwraps the value.",94,null],[11,"get","","Gets a mutable pointer to the wrapped value.",94,null],[11,"default","","",94,{"inputs":[],"output":{"name":"unsafecell"}}],[11,"fmt","core::char","",95,null],[11,"clone","","",95,null],[11,"next","","",95,null],[11,"size_hint","","",95,null],[11,"last","","",95,null],[11,"fmt","","",96,null],[11,"clone","","",96,null],[11,"next","","",96,null],[11,"size_hint","","",96,null],[11,"count","","",96,null],[11,"nth","","",96,null],[11,"last","","",96,null],[11,"fmt","","",97,null],[11,"as_slice","","Returns the remaining bytes of this iterator as a slice.",97,null],[11,"next","","",97,null],[11,"size_hint","","",97,null],[11,"fmt","","",98,null],[11,"as_slice","","Returns the remaining bytes of this iterator as a slice.",98,null],[11,"next","","",98,null],[11,"size_hint","","",98,null],[11,"fmt","core::iter::range","",99,null],[11,"clone","","",99,null],[11,"step_by","core::ops","Creates an iterator starting at the same point, but stepping by\nthe given amount at each iteration.",69,null],[11,"step_by","","Creates an iterator with the same range, but stepping by the\ngiven amount at each iteration.",68,null],[11,"step_by","","Creates an iterator with the same range, but stepping by the\ngiven amount at each iteration.",71,null],[11,"next","core::iter::range","",99,null],[11,"size_hint","","",99,null],[11,"next","","",99,null],[11,"size_hint","","",99,null],[11,"next","","",99,null],[11,"size_hint","","",99,null],[11,"next","core::ops","",68,null],[11,"size_hint","","",68,null],[11,"next_back","","",68,null],[11,"next","","",69,null],[11,"next","","",71,null],[11,"size_hint","","",71,null],[11,"next_back","","",71,null],[11,"fmt","core::iter::sources","",100,null],[11,"clone","","",100,null],[11,"next","","",100,null],[11,"size_hint","","",100,null],[11,"next_back","","",100,null],[11,"fmt","","",101,null],[11,"next","","",101,null],[11,"size_hint","","",101,null],[11,"next_back","","",101,null],[11,"len","","",101,null],[11,"clone","","",101,null],[11,"default","","",101,{"inputs":[],"output":{"name":"empty"}}],[11,"fmt","","",102,null],[11,"clone","","",102,null],[11,"next","","",102,null],[11,"size_hint","","",102,null],[11,"next_back","","",102,null],[11,"len","","",102,null],[11,"fmt","core::iter","",103,null],[11,"clone","","",103,null],[11,"next","","",103,null],[11,"size_hint","","",103,null],[11,"next_back","","",103,null],[11,"fmt","","",104,null],[11,"clone","","",104,null],[11,"next","","",104,null],[11,"size_hint","","",104,null],[11,"next_back","","",104,null],[11,"fmt","","",105,null],[11,"clone","","",105,null],[11,"next","","",105,null],[11,"size_hint","","",105,null],[11,"fmt","","",106,null],[11,"clone","","",106,null],[11,"next","","",106,null],[11,"count","","",106,null],[11,"nth","","",106,null],[11,"find","","",106,null],[11,"last","","",106,null],[11,"size_hint","","",106,null],[11,"next_back","","",106,null],[11,"fmt","","",107,null],[11,"clone","","",107,null],[11,"next","","",107,null],[11,"size_hint","","",107,null],[11,"next_back","","",107,null],[11,"clone","","",108,null],[11,"fmt","","",108,null],[11,"next","","",108,null],[11,"size_hint","","",108,null],[11,"next_back","","",108,null],[11,"clone","","",109,null],[11,"fmt","","",109,null],[11,"next","","",109,null],[11,"size_hint","","",109,null],[11,"next_back","","",109,null],[11,"clone","","",110,null],[11,"fmt","","",110,null],[11,"next","","",110,null],[11,"size_hint","","",110,null],[11,"next_back","","",110,null],[11,"fmt","","",111,null],[11,"clone","","",111,null],[11,"next","","# Overflow Behavior",111,null],[11,"size_hint","","",111,null],[11,"nth","","",111,null],[11,"count","","",111,null],[11,"next_back","","",111,null],[11,"fmt","","",112,null],[11,"clone","","",112,null],[11,"next","","",112,null],[11,"count","","",112,null],[11,"nth","","",112,null],[11,"last","","",112,null],[11,"size_hint","","",112,null],[11,"peek","","Returns a reference to the next() value without advancing the iterator.",112,null],[11,"is_empty","","Checks if the iterator has finished iterating.",112,null],[11,"clone","","",113,null],[11,"fmt","","",113,null],[11,"next","","",113,null],[11,"size_hint","","",113,null],[11,"clone","","",114,null],[11,"fmt","","",114,null],[11,"next","","",114,null],[11,"size_hint","","",114,null],[11,"fmt","","",115,null],[11,"clone","","",115,null],[11,"next","","",115,null],[11,"nth","","",115,null],[11,"count","","",115,null],[11,"last","","",115,null],[11,"size_hint","","",115,null],[11,"next_back","","",115,null],[11,"fmt","","",116,null],[11,"clone","","",116,null],[11,"next","","",116,null],[11,"nth","","",116,null],[11,"size_hint","","",116,null],[11,"clone","","",117,null],[11,"fmt","","",117,null],[11,"next","","",117,null],[11,"size_hint","","",117,null],[11,"clone","","",118,null],[11,"fmt","","",118,null],[11,"next","","",118,null],[11,"size_hint","","",118,null],[11,"next_back","","",118,null],[11,"fmt","","",119,null],[11,"clone","","",119,null],[11,"next","","",119,null],[11,"nth","","",119,null],[11,"last","","",119,null],[11,"count","","",119,null],[11,"size_hint","","",119,null],[11,"next_back","","",119,null],[11,"clone","","",120,null],[11,"fmt","","",120,null],[11,"next","","",120,null],[11,"size_hint","","",120,null],[11,"next_back","","",120,null],[11,"hash","core::option","",57,null],[11,"fmt","","",57,null],[11,"cmp","","",57,null],[11,"partial_cmp","","",57,null],[11,"lt","","",57,null],[11,"le","","",57,null],[11,"gt","","",57,null],[11,"ge","","",57,null],[11,"eq","","",57,null],[11,"ne","","",57,null],[11,"clone","","",57,null],[11,"default","","",57,{"inputs":[],"output":{"name":"option"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",57,null],[11,"fmt","","",121,null],[11,"next","","",121,null],[11,"size_hint","","",121,null],[11,"next_back","","",121,null],[11,"clone","","",121,null],[11,"fmt","","",122,null],[11,"next","","",122,null],[11,"size_hint","","",122,null],[11,"next_back","","",122,null],[11,"fmt","","",123,null],[11,"clone","","",123,null],[11,"next","","",123,null],[11,"size_hint","","",123,null],[11,"next_back","","",123,null],[11,"from_iter","","Takes each element in the `Iterator`: if it is `None`, no further\nelements are taken, and the `None` is returned. Should no `None` occur, a\ncontainer with the values of each `Option` is returned.",57,{"inputs":[{"name":"i"}],"output":{"name":"option"}}],[11,"clone","core::raw","",124,null],[11,"clone","","",125,null],[11,"hash","core::result","",126,null],[11,"fmt","","",126,null],[11,"cmp","","",126,null],[11,"partial_cmp","","",126,null],[11,"lt","","",126,null],[11,"le","","",126,null],[11,"gt","","",126,null],[11,"ge","","",126,null],[11,"eq","","",126,null],[11,"ne","","",126,null],[11,"clone","","",126,null],[11,"is_ok","","Returns true if the result is `Ok`",126,null],[11,"is_err","","Returns true if the result is `Err`",126,null],[11,"ok","","Converts from `Result&lt;T, E&gt;` to `Option&lt;T&gt;`",126,null],[11,"err","","Converts from `Result&lt;T, E&gt;` to `Option&lt;E&gt;`",126,null],[11,"as_ref","","Converts from `Result&lt;T, E&gt;` to `Result&lt;&amp;T, &amp;E&gt;`",126,null],[11,"as_mut","","Converts from `Result&lt;T, E&gt;` to `Result&lt;&amp;mut T, &amp;mut E&gt;`",126,null],[11,"map","","Maps a `Result&lt;T, E&gt;` to `Result&lt;U, E&gt;` by applying a function to a\ncontained `Ok` value, leaving an `Err` value untouched.",126,null],[11,"map_err","","Maps a `Result&lt;T, E&gt;` to `Result&lt;T, F&gt;` by applying a function to a\ncontained `Err` value, leaving an `Ok` value untouched.",126,null],[11,"iter","","Returns an iterator over the possibly contained value.",126,null],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",126,null],[11,"and","","Returns `res` if the result is `Ok`, otherwise returns the `Err` value of `self`.",126,null],[11,"and_then","","Calls `op` if the result is `Ok`, otherwise returns the `Err` value of `self`.",126,null],[11,"or","","Returns `res` if the result is `Err`, otherwise returns the `Ok` value of `self`.",126,null],[11,"or_else","","Calls `op` if the result is `Err`, otherwise returns the `Ok` value of `self`.",126,null],[11,"unwrap_or","","Unwraps a result, yielding the content of an `Ok`.\nElse it returns `optb`.",126,null],[11,"unwrap_or_else","","Unwraps a result, yielding the content of an `Ok`.\nIf the value is an `Err` then it calls `op` with its value.",126,null],[11,"unwrap","","Unwraps a result, yielding the content of an `Ok`.",126,null],[11,"expect","","Unwraps a result, yielding the content of an `Ok`.",126,null],[11,"unwrap_err","","Unwraps a result, yielding the content of an `Err`.",126,null],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",126,null],[11,"fmt","","",127,null],[11,"next","","",127,null],[11,"size_hint","","",127,null],[11,"next_back","","",127,null],[11,"clone","","",127,null],[11,"fmt","","",128,null],[11,"next","","",128,null],[11,"size_hint","","",128,null],[11,"next_back","","",128,null],[11,"fmt","","",129,null],[11,"next","","",129,null],[11,"size_hint","","",129,null],[11,"next_back","","",129,null],[11,"from_iter","","Takes each element in the `Iterator`: if it is an `Err`, no further\nelements are taken, and the `Err` is returned. Should no `Err` occur, a\ncontainer with the values of each `Result` is returned.",126,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"fmt","core::slice","",130,null],[11,"as_slice","","View the underlying data as a subslice of the original data.",130,null],[11,"next","","",130,null],[11,"size_hint","","",130,null],[11,"count","","",130,null],[11,"nth","","",130,null],[11,"last","","",130,null],[11,"next_back","","",130,null],[11,"clone","","",130,null],[11,"fmt","","",131,null],[11,"into_slice","","View the underlying data as a subslice of the original data.",131,null],[11,"next","","",131,null],[11,"size_hint","","",131,null],[11,"count","","",131,null],[11,"nth","","",131,null],[11,"last","","",131,null],[11,"next_back","","",131,null],[11,"fmt","","",132,null],[11,"clone","","",132,null],[11,"next","","",132,null],[11,"size_hint","","",132,null],[11,"next_back","","",132,null],[11,"fmt","","",133,null],[11,"next","","",133,null],[11,"size_hint","","",133,null],[11,"next_back","","",133,null],[11,"fmt","","",134,null],[11,"fmt","","",135,null],[11,"fmt","","",136,null],[11,"fmt","","",137,null],[11,"next","","",134,null],[11,"size_hint","","",134,null],[11,"next","","",135,null],[11,"size_hint","","",135,null],[11,"next","","",136,null],[11,"size_hint","","",136,null],[11,"next","","",137,null],[11,"size_hint","","",137,null],[11,"fmt","","",138,null],[11,"clone","","",138,null],[11,"next","","",138,null],[11,"size_hint","","",138,null],[11,"count","","",138,null],[11,"nth","","",138,null],[11,"last","","",138,null],[11,"next_back","","",138,null],[11,"fmt","","",139,null],[11,"clone","","",139,null],[11,"next","","",139,null],[11,"size_hint","","",139,null],[11,"count","","",139,null],[11,"nth","","",139,null],[11,"last","","",139,null],[11,"next_back","","",139,null],[11,"fmt","","",140,null],[11,"next","","",140,null],[11,"size_hint","","",140,null],[11,"count","","",140,null],[11,"nth","","",140,null],[11,"last","","",140,null],[11,"next_back","","",140,null],[11,"fmt","core::str::pattern","",141,null],[11,"eq","","",141,null],[11,"ne","","",141,null],[11,"clone","","",141,null],[11,"fmt","","",142,null],[11,"clone","","",142,null],[11,"haystack","","",142,null],[11,"next","","",142,null],[11,"next_match","","",142,null],[11,"next_reject","","",142,null],[11,"next_back","","",142,null],[11,"next_match_back","","",142,null],[11,"next_reject_back","","",142,null],[11,"fmt","","",143,null],[11,"clone","","",143,null],[11,"haystack","","",143,null],[11,"next","","",143,null],[11,"next_match","","",143,null],[11,"next_reject","","",143,null],[11,"next_back","","",143,null],[11,"next_match_back","","",143,null],[11,"next_reject_back","","",143,null],[11,"clone","","",144,null],[11,"fmt","","",144,null],[11,"haystack","","",144,null],[11,"next","","",144,null],[11,"next_match","","",144,null],[11,"next_reject","","",144,null],[11,"next_back","","",144,null],[11,"next_match_back","","",144,null],[11,"next_reject_back","","",144,null],[11,"fmt","","",145,null],[11,"clone","","",145,null],[11,"haystack","","",145,null],[11,"next","","",145,null],[11,"next_match","","",145,null],[11,"next_back","","",145,null],[11,"next_match_back","","",145,null],[11,"eq","core::str","",146,null],[11,"ne","","",146,null],[11,"clone","","",146,null],[11,"fmt","","",146,null],[11,"fmt","","",146,null],[11,"fmt","","",147,null],[11,"clone","","",147,null],[11,"eq","","",147,null],[11,"ne","","",147,null],[11,"valid_up_to","","Returns the index in the given string up to which valid UTF-8 was\nverified.",147,null],[11,"fmt","","",147,null],[11,"fmt","","",148,null],[11,"clone","","",148,null],[11,"next","","",148,null],[11,"size_hint","","",148,null],[11,"next_back","","",148,null],[11,"as_str","","View the underlying data as a subslice of the original data.",148,null],[11,"fmt","","",149,null],[11,"clone","","",149,null],[11,"next","","",149,null],[11,"size_hint","","",149,null],[11,"next_back","","",149,null],[11,"as_str","","View the underlying data as a subslice of the original data.",149,null],[11,"fmt","","",150,null],[11,"clone","","",150,null],[11,"next","","",150,null],[11,"size_hint","","",150,null],[11,"count","","",150,null],[11,"last","","",150,null],[11,"nth","","",150,null],[11,"next_back","","",150,null],[11,"len","","",150,null],[11,"fmt","","",151,null],[11,"next","","",151,null],[11,"clone","","",151,null],[11,"fmt","","",152,null],[11,"next","","",152,null],[11,"clone","","",152,null],[11,"next_back","","",151,null],[11,"next_back","","",152,null],[11,"fmt","","",153,null],[11,"next","","",153,null],[11,"clone","","",153,null],[11,"fmt","","",154,null],[11,"next","","",154,null],[11,"clone","","",154,null],[11,"next_back","","",153,null],[11,"next_back","","",154,null],[11,"fmt","","",155,null],[11,"next","","",155,null],[11,"clone","","",155,null],[11,"fmt","","",156,null],[11,"next","","",156,null],[11,"clone","","",156,null],[11,"fmt","","",157,null],[11,"next","","",157,null],[11,"clone","","",157,null],[11,"fmt","","",158,null],[11,"next","","",158,null],[11,"clone","","",158,null],[11,"next_back","","",157,null],[11,"next_back","","",158,null],[11,"fmt","","",159,null],[11,"next","","",159,null],[11,"clone","","",159,null],[11,"fmt","","",160,null],[11,"next","","",160,null],[11,"clone","","",160,null],[11,"next_back","","",159,null],[11,"next_back","","",160,null],[11,"fmt","","",161,null],[11,"clone","","",161,null],[11,"next","","",161,null],[11,"size_hint","","",161,null],[11,"next_back","","",161,null],[11,"fmt","","",162,null],[11,"clone","","",162,null],[11,"next","","",162,null],[11,"size_hint","","",162,null],[11,"next_back","","",162,null],[11,"fmt","","",163,null],[11,"clone","","",163,null],[11,"fmt","core::hash::sip","",164,null],[11,"new","","Creates a new `SipHasher` with the two initial keys set to 0.",164,{"inputs":[],"output":{"name":"siphasher"}}],[11,"new_with_keys","","Creates a `SipHasher` that is keyed off the provided keys.",164,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher"}}],[11,"write","","",164,null],[11,"finish","","",164,null],[11,"clone","","",164,null],[11,"default","","",164,{"inputs":[],"output":{"name":"siphasher"}}],[11,"fmt","core::hash","",165,null],[11,"build_hasher","","",165,null],[11,"clone","","",165,null],[11,"default","","",165,{"inputs":[],"output":{"name":"buildhasherdefault"}}],[11,"fmt","core::fmt","",166,null],[11,"field","core::fmt::builders","Adds a new field to the generated struct output.",167,null],[11,"finish","","Finishes output and returns any error encountered.",167,null],[11,"field","","Adds a new field to the generated tuple struct output.",168,null],[11,"finish","","Finishes output and returns any error encountered.",168,null],[11,"entry","","Adds a new entry to the set output.",169,null],[11,"entries","","Adds the contents of an iterator of entries to the set output.",169,null],[11,"finish","","Finishes output and returns any error encountered.",169,null],[11,"entry","","Adds a new entry to the list output.",170,null],[11,"entries","","Adds the contents of an iterator of entries to the list output.",170,null],[11,"finish","","Finishes output and returns any error encountered.",170,null],[11,"entry","","Adds a new entry to the map output.",171,null],[11,"entries","","Adds the contents of an iterator of entries to the map output.",171,null],[11,"finish","","Finishes output and returns any error encountered.",171,null],[11,"partial_cmp","core::fmt","",172,null],[11,"eq","","",172,null],[11,"cmp","","",172,null],[11,"hash","","",172,null],[11,"default","","",172,{"inputs":[],"output":{"name":"error"}}],[11,"fmt","","",172,null],[11,"clone","","",172,null],[11,"clone","","",173,null],[11,"fmt","","",173,null],[11,"fmt","","",173,null],[11,"pad_integral","","Performs the correct padding for an integer which has already been\nemitted into a str. The str should *not* contain the sign for the\ninteger, that will be added by this method.",174,null],[11,"pad","","This function takes a string slice and emits it to the internal buffer\nafter applying the relevant formatting flags specified. The flags\nrecognized for generic strings are:",174,null],[11,"write_str","","Writes some data to the underlying buffer contained within this\nformatter.",174,null],[11,"write_fmt","","Writes some formatted information into this instance",174,null],[11,"flags","","Flags for formatting (packed version of rt::Flag)",174,null],[11,"fill","","Character used as &#39;fill&#39; whenever there is alignment",174,null],[11,"align","","Flag indicating what form of alignment was requested",174,null],[11,"width","","Optionally specified integer width that the output should be",174,null],[11,"precision","","Optionally specified precision for numeric types",174,null],[11,"sign_plus","","Determines if the `+` flag was specified.",174,null],[11,"sign_minus","","Determines if the `-` flag was specified.",174,null],[11,"alternate","","Determines if the `#` flag was specified.",174,null],[11,"sign_aware_zero_pad","","Determines if the `0` flag was specified.",174,null],[11,"debug_struct","","Creates a `DebugStruct` builder designed to assist with creation of\n`fmt::Debug` implementations for structs.",174,null],[11,"debug_tuple","","Creates a `DebugTuple` builder designed to assist with creation of\n`fmt::Debug` implementations for tuple structs.",174,null],[11,"debug_list","","Creates a `DebugList` builder designed to assist with creation of\n`fmt::Debug` implementations for list-like structures.",174,null],[11,"debug_set","","Creates a `DebugSet` builder designed to assist with creation of\n`fmt::Debug` implementations for set-like structures.",174,null],[11,"debug_map","","Creates a `DebugMap` builder designed to assist with creation of\n`fmt::Debug` implementations for map-like structures.",174,null],[11,"write_str","","",174,null],[11,"write_char","","",174,null],[11,"write_fmt","","",174,null],[11,"fmt","","",172,null],[11,"fmt","core::marker","",66,null],[11,"fmt","core::cell","",89,null],[11,"fmt","","",91,null],[11,"fmt","","",92,null],[11,"fmt","","",93,null],[11,"fmt","","",94,null],[11,"clone_from","libc::dox","Performs copy-assignment from `source`.",175,null],[11,"clone_from","libc::dox::imp","Performs copy-assignment from `source`.",175,null],[11,"clone","libc","",50,null],[11,"clone","","",51,null],[11,"clone","","",176,null],[11,"clone","","",52,null],[11,"clone","","",53,null],[11,"clone","","",54,null],[11,"clone","","",55,null],[11,"clone","","",56,null],[11,"clone","","",177,null],[11,"clone","","",49,null],[11,"clone","","",38,null],[11,"clone","","",39,null],[11,"clone","","",40,null],[11,"clone","","",41,null],[11,"clone","","",42,null],[11,"clone","","",43,null],[11,"clone","","",44,null],[11,"clone","","",45,null],[11,"clone","","",46,null],[11,"clone","","",47,null],[11,"clone","","",48,null],[11,"clone","","",178,null],[11,"clone","","",28,null],[11,"clone","","",29,null],[11,"clone","","",30,null],[11,"clone","","",31,null],[11,"clone","","",32,null],[11,"clone","","",179,null],[11,"clone","","",180,null],[11,"clone","","",181,null],[11,"clone","","",182,null],[11,"clone","","",33,null],[11,"clone","","",34,null],[11,"clone","","",35,null],[11,"clone","","",36,null],[11,"clone","","",183,null],[11,"clone","","",37,null],[11,"clone","","",184,null],[11,"clone","","",14,null],[11,"clone","","",15,null],[11,"clone","","",16,null],[11,"clone","","",17,null],[11,"clone","","",18,null],[11,"clone","","",19,null],[11,"clone","","",20,null],[11,"clone","","",21,null],[11,"clone","","",185,null],[11,"clone","","",22,null],[11,"clone","","",23,null],[11,"clone","","",24,null],[11,"clone","","",25,null],[11,"clone","","",26,null],[11,"clone","","",27,null],[11,"clone","","",0,null],[11,"clone","","",1,null],[11,"clone","","",2,null],[11,"clone","","",3,null],[11,"clone","","",4,null],[11,"clone","","",5,null],[11,"clone","","",6,null],[11,"clone","","",7,null],[11,"clone","","",8,null],[11,"clone","","",9,null],[11,"clone","","",10,null],[11,"clone","","",11,null],[11,"clone","","",12,null],[11,"clone","","",13,null],[6,"int8_t","","",null,null],[6,"int16_t","","",null,null],[6,"int32_t","","",null,null],[6,"int64_t","","",null,null],[6,"uint8_t","","",null,null],[6,"uint16_t","","",null,null],[6,"uint32_t","","",null,null],[6,"uint64_t","","",null,null],[6,"c_schar","","",null,null],[6,"c_uchar","","",null,null],[6,"c_short","","",null,null],[6,"c_ushort","","",null,null],[6,"c_int","","",null,null],[6,"c_uint","","",null,null],[6,"c_float","","",null,null],[6,"c_double","","",null,null],[6,"c_longlong","","",null,null],[6,"c_ulonglong","","",null,null],[6,"intmax_t","","",null,null],[6,"uintmax_t","","",null,null],[6,"size_t","","",null,null],[6,"ptrdiff_t","","",null,null],[6,"intptr_t","","",null,null],[6,"uintptr_t","","",null,null],[6,"ssize_t","","",null,null],[6,"pid_t","","",null,null],[6,"uid_t","","",null,null],[6,"gid_t","","",null,null],[6,"in_addr_t","","",null,null],[6,"in_port_t","","",null,null],[6,"sighandler_t","","",null,null],[6,"cc_t","","",null,null],[6,"sa_family_t","","",null,null],[6,"pthread_key_t","","",null,null],[6,"speed_t","","",null,null],[6,"tcflag_t","","",null,null],[6,"loff_t","","",null,null],[6,"clockid_t","","",null,null],[6,"id_t","","",null,null],[6,"useconds_t","","",null,null],[6,"dev_t","","",null,null],[6,"socklen_t","","",null,null],[6,"pthread_t","","",null,null],[6,"mode_t","","",null,null],[6,"ino64_t","","",null,null],[6,"off64_t","","",null,null],[6,"blkcnt64_t","","",null,null],[6,"rlim64_t","","",null,null],[6,"key_t","","",null,null],[6,"shmatt_t","","",null,null],[6,"mqd_t","","",null,null],[6,"nfds_t","","",null,null],[6,"nl_item","","",null,null],[6,"fsblkcnt_t","","",null,null],[6,"fsfilcnt_t","","",null,null],[6,"rlim_t","","",null,null],[6,"__priority_which_t","","",null,null],[6,"c_long","","",null,null],[6,"c_ulong","","",null,null],[6,"clock_t","","",null,null],[6,"time_t","","",null,null],[6,"suseconds_t","","",null,null],[6,"ino_t","","",null,null],[6,"off_t","","",null,null],[6,"blkcnt_t","","",null,null],[6,"__fsword_t","","",null,null],[6,"c_char","","",null,null],[6,"wchar_t","","",null,null],[6,"nlink_t","","",null,null],[6,"blksize_t","","",null,null],[6,"greg_t","","",null,null],[17,"SIG_DFL","","",null,null],[17,"SIG_IGN","","",null,null],[17,"SIG_ERR","","",null,null],[17,"DT_FIFO","","",null,null],[17,"DT_CHR","","",null,null],[17,"DT_DIR","","",null,null],[17,"DT_BLK","","",null,null],[17,"DT_REG","","",null,null],[17,"DT_LNK","","",null,null],[17,"DT_SOCK","","",null,null],[17,"FD_CLOEXEC","","",null,null],[17,"USRQUOTA","","",null,null],[17,"GRPQUOTA","","",null,null],[17,"SIGIOT","","",null,null],[17,"S_ISUID","","",null,null],[17,"S_ISGID","","",null,null],[17,"S_ISVTX","","",null,null],[17,"POLLIN","","",null,null],[17,"POLLPRI","","",null,null],[17,"POLLOUT","","",null,null],[17,"POLLERR","","",null,null],[17,"POLLHUP","","",null,null],[17,"POLLNVAL","","",null,null],[17,"IF_NAMESIZE","","",null,null],[17,"RTLD_LAZY","","",null,null],[17,"LOG_EMERG","","",null,null],[17,"LOG_ALERT","","",null,null],[17,"LOG_CRIT","","",null,null],[17,"LOG_ERR","","",null,null],[17,"LOG_WARNING","","",null,null],[17,"LOG_NOTICE","","",null,null],[17,"LOG_INFO","","",null,null],[17,"LOG_DEBUG","","",null,null],[17,"LOG_KERN","","",null,null],[17,"LOG_USER","","",null,null],[17,"LOG_MAIL","","",null,null],[17,"LOG_DAEMON","","",null,null],[17,"LOG_AUTH","","",null,null],[17,"LOG_SYSLOG","","",null,null],[17,"LOG_LPR","","",null,null],[17,"LOG_NEWS","","",null,null],[17,"LOG_UUCP","","",null,null],[17,"LOG_LOCAL0","","",null,null],[17,"LOG_LOCAL1","","",null,null],[17,"LOG_LOCAL2","","",null,null],[17,"LOG_LOCAL3","","",null,null],[17,"LOG_LOCAL4","","",null,null],[17,"LOG_LOCAL5","","",null,null],[17,"LOG_LOCAL6","","",null,null],[17,"LOG_LOCAL7","","",null,null],[17,"LOG_PID","","",null,null],[17,"LOG_CONS","","",null,null],[17,"LOG_ODELAY","","",null,null],[17,"LOG_NDELAY","","",null,null],[17,"LOG_NOWAIT","","",null,null],[17,"LOG_PRIMASK","","",null,null],[17,"LOG_FACMASK","","",null,null],[17,"PRIO_PROCESS","","",null,null],[17,"PRIO_PGRP","","",null,null],[17,"PRIO_USER","","",null,null],[17,"PRIO_MIN","","",null,null],[17,"PRIO_MAX","","",null,null],[17,"EXIT_FAILURE","","",null,null],[17,"EXIT_SUCCESS","","",null,null],[17,"RAND_MAX","","",null,null],[17,"EOF","","",null,null],[17,"SEEK_SET","","",null,null],[17,"SEEK_CUR","","",null,null],[17,"SEEK_END","","",null,null],[17,"_IOFBF","","",null,null],[17,"_IONBF","","",null,null],[17,"_IOLBF","","",null,null],[17,"F_DUPFD","","",null,null],[17,"F_GETFD","","",null,null],[17,"F_SETFD","","",null,null],[17,"F_GETFL","","",null,null],[17,"F_SETFL","","",null,null],[17,"F_SETLEASE","","",null,null],[17,"F_GETLEASE","","",null,null],[17,"F_NOTIFY","","",null,null],[17,"F_DUPFD_CLOEXEC","","",null,null],[17,"F_SETPIPE_SZ","","",null,null],[17,"F_GETPIPE_SZ","","",null,null],[17,"SIGTRAP","","",null,null],[17,"PTHREAD_CREATE_JOINABLE","","",null,null],[17,"PTHREAD_CREATE_DETACHED","","",null,null],[17,"CLOCK_REALTIME","","",null,null],[17,"CLOCK_MONOTONIC","","",null,null],[17,"CLOCK_PROCESS_CPUTIME_ID","","",null,null],[17,"CLOCK_THREAD_CPUTIME_ID","","",null,null],[17,"CLOCK_MONOTONIC_RAW","","",null,null],[17,"CLOCK_REALTIME_COARSE","","",null,null],[17,"CLOCK_MONOTONIC_COARSE","","",null,null],[17,"CLOCK_BOOTTIME","","",null,null],[17,"CLOCK_REALTIME_ALARM","","",null,null],[17,"CLOCK_BOOTTIME_ALARM","","",null,null],[17,"RLIMIT_CPU","","",null,null],[17,"RLIMIT_FSIZE","","",null,null],[17,"RLIMIT_DATA","","",null,null],[17,"RLIMIT_STACK","","",null,null],[17,"RLIMIT_CORE","","",null,null],[17,"RLIMIT_LOCKS","","",null,null],[17,"RLIMIT_SIGPENDING","","",null,null],[17,"RLIMIT_MSGQUEUE","","",null,null],[17,"RLIMIT_NICE","","",null,null],[17,"RLIMIT_RTPRIO","","",null,null],[17,"RUSAGE_SELF","","",null,null],[17,"O_RDONLY","","",null,null],[17,"O_WRONLY","","",null,null],[17,"O_RDWR","","",null,null],[17,"O_TRUNC","","",null,null],[17,"O_CLOEXEC","","",null,null],[17,"SOCK_CLOEXEC","","",null,null],[17,"S_IFIFO","","",null,null],[17,"S_IFCHR","","",null,null],[17,"S_IFBLK","","",null,null],[17,"S_IFDIR","","",null,null],[17,"S_IFREG","","",null,null],[17,"S_IFLNK","","",null,null],[17,"S_IFSOCK","","",null,null],[17,"S_IFMT","","",null,null],[17,"S_IRWXU","","",null,null],[17,"S_IXUSR","","",null,null],[17,"S_IWUSR","","",null,null],[17,"S_IRUSR","","",null,null],[17,"S_IRWXG","","",null,null],[17,"S_IXGRP","","",null,null],[17,"S_IWGRP","","",null,null],[17,"S_IRGRP","","",null,null],[17,"S_IRWXO","","",null,null],[17,"S_IXOTH","","",null,null],[17,"S_IWOTH","","",null,null],[17,"S_IROTH","","",null,null],[17,"F_OK","","",null,null],[17,"R_OK","","",null,null],[17,"W_OK","","",null,null],[17,"X_OK","","",null,null],[17,"STDIN_FILENO","","",null,null],[17,"STDOUT_FILENO","","",null,null],[17,"STDERR_FILENO","","",null,null],[17,"SIGHUP","","",null,null],[17,"SIGINT","","",null,null],[17,"SIGQUIT","","",null,null],[17,"SIGILL","","",null,null],[17,"SIGABRT","","",null,null],[17,"SIGFPE","","",null,null],[17,"SIGKILL","","",null,null],[17,"SIGSEGV","","",null,null],[17,"SIGPIPE","","",null,null],[17,"SIGALRM","","",null,null],[17,"SIGTERM","","",null,null],[17,"PROT_NONE","","",null,null],[17,"PROT_READ","","",null,null],[17,"PROT_WRITE","","",null,null],[17,"PROT_EXEC","","",null,null],[17,"LC_CTYPE","","",null,null],[17,"LC_NUMERIC","","",null,null],[17,"LC_TIME","","",null,null],[17,"LC_COLLATE","","",null,null],[17,"LC_MONETARY","","",null,null],[17,"LC_MESSAGES","","",null,null],[17,"LC_ALL","","",null,null],[17,"LC_CTYPE_MASK","","",null,null],[17,"LC_NUMERIC_MASK","","",null,null],[17,"LC_TIME_MASK","","",null,null],[17,"LC_COLLATE_MASK","","",null,null],[17,"LC_MONETARY_MASK","","",null,null],[17,"LC_MESSAGES_MASK","","",null,null],[17,"MAP_FILE","","",null,null],[17,"MAP_SHARED","","",null,null],[17,"MAP_PRIVATE","","",null,null],[17,"MAP_FIXED","","",null,null],[17,"MAP_FAILED","","",null,null],[17,"MCL_CURRENT","","",null,null],[17,"MCL_FUTURE","","",null,null],[17,"MS_ASYNC","","",null,null],[17,"MS_INVALIDATE","","",null,null],[17,"MS_SYNC","","",null,null],[17,"MS_RDONLY","","",null,null],[17,"MS_NOSUID","","",null,null],[17,"MS_NODEV","","",null,null],[17,"MS_NOEXEC","","",null,null],[17,"MS_SYNCHRONOUS","","",null,null],[17,"MS_REMOUNT","","",null,null],[17,"MS_MANDLOCK","","",null,null],[17,"MS_DIRSYNC","","",null,null],[17,"MS_NOATIME","","",null,null],[17,"MS_NODIRATIME","","",null,null],[17,"MS_BIND","","",null,null],[17,"MS_MOVE","","",null,null],[17,"MS_REC","","",null,null],[17,"MS_SILENT","","",null,null],[17,"MS_POSIXACL","","",null,null],[17,"MS_UNBINDABLE","","",null,null],[17,"MS_PRIVATE","","",null,null],[17,"MS_SLAVE","","",null,null],[17,"MS_SHARED","","",null,null],[17,"MS_RELATIME","","",null,null],[17,"MS_KERNMOUNT","","",null,null],[17,"MS_I_VERSION","","",null,null],[17,"MS_STRICTATIME","","",null,null],[17,"MS_ACTIVE","","",null,null],[17,"MS_NOUSER","","",null,null],[17,"MS_MGC_VAL","","",null,null],[17,"MS_MGC_MSK","","",null,null],[17,"MS_RMT_MASK","","",null,null],[17,"EPERM","","",null,null],[17,"ENOENT","","",null,null],[17,"ESRCH","","",null,null],[17,"EINTR","","",null,null],[17,"EIO","","",null,null],[17,"ENXIO","","",null,null],[17,"E2BIG","","",null,null],[17,"ENOEXEC","","",null,null],[17,"EBADF","","",null,null],[17,"ECHILD","","",null,null],[17,"EAGAIN","","",null,null],[17,"ENOMEM","","",null,null],[17,"EACCES","","",null,null],[17,"EFAULT","","",null,null],[17,"ENOTBLK","","",null,null],[17,"EBUSY","","",null,null],[17,"EEXIST","","",null,null],[17,"EXDEV","","",null,null],[17,"ENODEV","","",null,null],[17,"ENOTDIR","","",null,null],[17,"EISDIR","","",null,null],[17,"EINVAL","","",null,null],[17,"ENFILE","","",null,null],[17,"EMFILE","","",null,null],[17,"ENOTTY","","",null,null],[17,"ETXTBSY","","",null,null],[17,"EFBIG","","",null,null],[17,"ENOSPC","","",null,null],[17,"ESPIPE","","",null,null],[17,"EROFS","","",null,null],[17,"EMLINK","","",null,null],[17,"EPIPE","","",null,null],[17,"EDOM","","",null,null],[17,"ERANGE","","",null,null],[17,"EWOULDBLOCK","","",null,null],[17,"EBFONT","","",null,null],[17,"ENOSTR","","",null,null],[17,"ENODATA","","",null,null],[17,"ETIME","","",null,null],[17,"ENOSR","","",null,null],[17,"ENONET","","",null,null],[17,"ENOPKG","","",null,null],[17,"EREMOTE","","",null,null],[17,"ENOLINK","","",null,null],[17,"EADV","","",null,null],[17,"ESRMNT","","",null,null],[17,"ECOMM","","",null,null],[17,"EPROTO","","",null,null],[17,"EDOTDOT","","",null,null],[17,"AF_PACKET","","",null,null],[17,"IPPROTO_RAW","","",null,null],[17,"PROT_GROWSDOWN","","",null,null],[17,"PROT_GROWSUP","","",null,null],[17,"MAP_TYPE","","",null,null],[17,"MADV_NORMAL","","",null,null],[17,"MADV_RANDOM","","",null,null],[17,"MADV_SEQUENTIAL","","",null,null],[17,"MADV_WILLNEED","","",null,null],[17,"MADV_DONTNEED","","",null,null],[17,"MADV_REMOVE","","",null,null],[17,"MADV_DONTFORK","","",null,null],[17,"MADV_DOFORK","","",null,null],[17,"MADV_MERGEABLE","","",null,null],[17,"MADV_UNMERGEABLE","","",null,null],[17,"MADV_HWPOISON","","",null,null],[17,"IFF_LOOPBACK","","",null,null],[17,"AF_UNIX","","",null,null],[17,"AF_INET","","",null,null],[17,"AF_INET6","","",null,null],[17,"SOCK_RAW","","",null,null],[17,"IPPROTO_TCP","","",null,null],[17,"IPPROTO_IP","","",null,null],[17,"IPPROTO_IPV6","","",null,null],[17,"IP_MULTICAST_TTL","","",null,null],[17,"IP_MULTICAST_LOOP","","",null,null],[17,"IP_TTL","","",null,null],[17,"IP_HDRINCL","","",null,null],[17,"IP_ADD_MEMBERSHIP","","",null,null],[17,"IP_DROP_MEMBERSHIP","","",null,null],[17,"IP_TRANSPARENT","","",null,null],[17,"IPV6_ADD_MEMBERSHIP","","",null,null],[17,"IPV6_DROP_MEMBERSHIP","","",null,null],[17,"TCP_NODELAY","","",null,null],[17,"TCP_MAXSEG","","",null,null],[17,"TCP_CORK","","",null,null],[17,"TCP_KEEPIDLE","","",null,null],[17,"TCP_KEEPINTVL","","",null,null],[17,"TCP_KEEPCNT","","",null,null],[17,"TCP_SYNCNT","","",null,null],[17,"TCP_LINGER2","","",null,null],[17,"TCP_DEFER_ACCEPT","","",null,null],[17,"TCP_WINDOW_CLAMP","","",null,null],[17,"TCP_INFO","","",null,null],[17,"TCP_QUICKACK","","",null,null],[17,"TCP_CONGESTION","","",null,null],[17,"IPV6_MULTICAST_LOOP","","",null,null],[17,"IPV6_V6ONLY","","",null,null],[17,"SO_DEBUG","","",null,null],[17,"SHUT_RD","","",null,null],[17,"SHUT_WR","","",null,null],[17,"SHUT_RDWR","","",null,null],[17,"LOCK_SH","","",null,null],[17,"LOCK_EX","","",null,null],[17,"LOCK_NB","","",null,null],[17,"LOCK_UN","","",null,null],[17,"SIGSTKSZ","","",null,null],[17,"SA_NODEFER","","",null,null],[17,"SA_RESETHAND","","",null,null],[17,"SA_RESTART","","",null,null],[17,"SA_NOCLDSTOP","","",null,null],[17,"SS_ONSTACK","","",null,null],[17,"SS_DISABLE","","",null,null],[17,"PATH_MAX","","",null,null],[17,"FD_SETSIZE","","",null,null],[17,"EPOLLIN","","",null,null],[17,"EPOLLPRI","","",null,null],[17,"EPOLLOUT","","",null,null],[17,"EPOLLRDNORM","","",null,null],[17,"EPOLLRDBAND","","",null,null],[17,"EPOLLWRNORM","","",null,null],[17,"EPOLLWRBAND","","",null,null],[17,"EPOLLMSG","","",null,null],[17,"EPOLLERR","","",null,null],[17,"EPOLLHUP","","",null,null],[17,"EPOLLET","","",null,null],[17,"EPOLL_CTL_ADD","","",null,null],[17,"EPOLL_CTL_MOD","","",null,null],[17,"EPOLL_CTL_DEL","","",null,null],[17,"EPOLL_CLOEXEC","","",null,null],[17,"MNT_DETACH","","",null,null],[17,"MNT_EXPIRE","","",null,null],[17,"Q_GETFMT","","",null,null],[17,"Q_GETINFO","","",null,null],[17,"Q_SETINFO","","",null,null],[17,"QIF_BLIMITS","","",null,null],[17,"QIF_SPACE","","",null,null],[17,"QIF_ILIMITS","","",null,null],[17,"QIF_INODES","","",null,null],[17,"QIF_BTIME","","",null,null],[17,"QIF_ITIME","","",null,null],[17,"QIF_LIMITS","","",null,null],[17,"QIF_USAGE","","",null,null],[17,"QIF_TIMES","","",null,null],[17,"QIF_ALL","","",null,null],[17,"CBAUD","","",null,null],[17,"EFD_CLOEXEC","","",null,null],[17,"MNT_FORCE","","",null,null],[17,"Q_SYNC","","",null,null],[17,"Q_QUOTAON","","",null,null],[17,"Q_QUOTAOFF","","",null,null],[17,"Q_GETQUOTA","","",null,null],[17,"Q_SETQUOTA","","",null,null],[17,"TCIOFF","","",null,null],[17,"TCION","","",null,null],[17,"TCOOFF","","",null,null],[17,"TCOON","","",null,null],[17,"TCIFLUSH","","",null,null],[17,"TCOFLUSH","","",null,null],[17,"TCIOFLUSH","","",null,null],[17,"NL0","","",null,null],[17,"NL1","","",null,null],[17,"TAB0","","",null,null],[17,"TAB1","","",null,null],[17,"TAB2","","",null,null],[17,"TAB3","","",null,null],[17,"CR0","","",null,null],[17,"CR1","","",null,null],[17,"CR2","","",null,null],[17,"CR3","","",null,null],[17,"FF0","","",null,null],[17,"FF1","","",null,null],[17,"BS0","","",null,null],[17,"BS1","","",null,null],[17,"VT0","","",null,null],[17,"VT1","","",null,null],[17,"VERASE","","",null,null],[17,"VWERASE","","",null,null],[17,"VKILL","","",null,null],[17,"VREPRINT","","",null,null],[17,"VINTR","","",null,null],[17,"VQUIT","","",null,null],[17,"VSUSP","","",null,null],[17,"VSTART","","",null,null],[17,"VSTOP","","",null,null],[17,"VLNEXT","","",null,null],[17,"VDISCARD","","",null,null],[17,"VTIME","","",null,null],[17,"IGNBRK","","",null,null],[17,"BRKINT","","",null,null],[17,"IGNPAR","","",null,null],[17,"PARMRK","","",null,null],[17,"INPCK","","",null,null],[17,"ISTRIP","","",null,null],[17,"INLCR","","",null,null],[17,"IGNCR","","",null,null],[17,"ICRNL","","",null,null],[17,"IXON","","",null,null],[17,"IXOFF","","",null,null],[17,"IXANY","","",null,null],[17,"IMAXBEL","","",null,null],[17,"OPOST","","",null,null],[17,"ONLCR","","",null,null],[17,"CSIZE","","",null,null],[17,"CS5","","",null,null],[17,"CS6","","",null,null],[17,"CS7","","",null,null],[17,"CS8","","",null,null],[17,"CSTOPB","","",null,null],[17,"CREAD","","",null,null],[17,"PARENB","","",null,null],[17,"PARODD","","",null,null],[17,"HUPCL","","",null,null],[17,"CLOCAL","","",null,null],[17,"CRTSCTS","","",null,null],[17,"ECHOKE","","",null,null],[17,"ECHOE","","",null,null],[17,"ECHOK","","",null,null],[17,"ECHO","","",null,null],[17,"ECHONL","","",null,null],[17,"ECHOPRT","","",null,null],[17,"ECHOCTL","","",null,null],[17,"ISIG","","",null,null],[17,"ICANON","","",null,null],[17,"PENDIN","","",null,null],[17,"NOFLSH","","",null,null],[17,"CLONE_VM","","",null,null],[17,"CLONE_FS","","",null,null],[17,"CLONE_FILES","","",null,null],[17,"CLONE_SIGHAND","","",null,null],[17,"CLONE_PTRACE","","",null,null],[17,"CLONE_VFORK","","",null,null],[17,"CLONE_PARENT","","",null,null],[17,"CLONE_THREAD","","",null,null],[17,"CLONE_NEWNS","","",null,null],[17,"CLONE_SYSVSEM","","",null,null],[17,"CLONE_SETTLS","","",null,null],[17,"CLONE_PARENT_SETTID","","",null,null],[17,"CLONE_CHILD_CLEARTID","","",null,null],[17,"CLONE_DETACHED","","",null,null],[17,"CLONE_UNTRACED","","",null,null],[17,"CLONE_CHILD_SETTID","","",null,null],[17,"CLONE_NEWUTS","","",null,null],[17,"CLONE_NEWIPC","","",null,null],[17,"CLONE_NEWUSER","","",null,null],[17,"CLONE_NEWPID","","",null,null],[17,"CLONE_NEWNET","","",null,null],[17,"CLONE_IO","","",null,null],[17,"WNOHANG","","",null,null],[17,"WUNTRACED","","",null,null],[17,"WSTOPPED","","",null,null],[17,"WEXITED","","",null,null],[17,"WCONTINUED","","",null,null],[17,"WNOWAIT","","",null,null],[17,"__WNOTHREAD","","",null,null],[17,"__WALL","","",null,null],[17,"__WCLONE","","",null,null],[17,"SPLICE_F_MOVE","","",null,null],[17,"SPLICE_F_NONBLOCK","","",null,null],[17,"SPLICE_F_MORE","","",null,null],[17,"SPLICE_F_GIFT","","",null,null],[17,"RTLD_LOCAL","","",null,null],[17,"POSIX_FADV_NORMAL","","",null,null],[17,"POSIX_FADV_RANDOM","","",null,null],[17,"POSIX_FADV_SEQUENTIAL","","",null,null],[17,"POSIX_FADV_WILLNEED","","",null,null],[17,"POSIX_FADV_DONTNEED","","",null,null],[17,"POSIX_FADV_NOREUSE","","",null,null],[17,"AT_FDCWD","","",null,null],[17,"AT_SYMLINK_NOFOLLOW","","",null,null],[17,"LOG_CRON","","",null,null],[17,"LOG_AUTHPRIV","","",null,null],[17,"LOG_FTP","","",null,null],[17,"LOG_PERROR","","",null,null],[17,"PIPE_BUF","","",null,null],[17,"SI_LOAD_SHIFT","","",null,null],[17,"ABDAY_1","","",null,null],[17,"ABDAY_2","","",null,null],[17,"ABDAY_3","","",null,null],[17,"ABDAY_4","","",null,null],[17,"ABDAY_5","","",null,null],[17,"ABDAY_6","","",null,null],[17,"ABDAY_7","","",null,null],[17,"DAY_1","","",null,null],[17,"DAY_2","","",null,null],[17,"DAY_3","","",null,null],[17,"DAY_4","","",null,null],[17,"DAY_5","","",null,null],[17,"DAY_6","","",null,null],[17,"DAY_7","","",null,null],[17,"ABMON_1","","",null,null],[17,"ABMON_2","","",null,null],[17,"ABMON_3","","",null,null],[17,"ABMON_4","","",null,null],[17,"ABMON_5","","",null,null],[17,"ABMON_6","","",null,null],[17,"ABMON_7","","",null,null],[17,"ABMON_8","","",null,null],[17,"ABMON_9","","",null,null],[17,"ABMON_10","","",null,null],[17,"ABMON_11","","",null,null],[17,"ABMON_12","","",null,null],[17,"MON_1","","",null,null],[17,"MON_2","","",null,null],[17,"MON_3","","",null,null],[17,"MON_4","","",null,null],[17,"MON_5","","",null,null],[17,"MON_6","","",null,null],[17,"MON_7","","",null,null],[17,"MON_8","","",null,null],[17,"MON_9","","",null,null],[17,"MON_10","","",null,null],[17,"MON_11","","",null,null],[17,"MON_12","","",null,null],[17,"AM_STR","","",null,null],[17,"PM_STR","","",null,null],[17,"D_T_FMT","","",null,null],[17,"D_FMT","","",null,null],[17,"T_FMT","","",null,null],[17,"T_FMT_AMPM","","",null,null],[17,"ERA","","",null,null],[17,"ERA_D_FMT","","",null,null],[17,"ALT_DIGITS","","",null,null],[17,"ERA_D_T_FMT","","",null,null],[17,"ERA_T_FMT","","",null,null],[17,"CODESET","","",null,null],[17,"CRNCYSTR","","",null,null],[17,"RADIXCHAR","","",null,null],[17,"THOUSEP","","",null,null],[17,"YESEXPR","","",null,null],[17,"NOEXPR","","",null,null],[17,"YESSTR","","",null,null],[17,"NOSTR","","",null,null],[17,"FILENAME_MAX","","",null,null],[17,"L_tmpnam","","",null,null],[17,"_PC_LINK_MAX","","",null,null],[17,"_PC_MAX_CANON","","",null,null],[17,"_PC_MAX_INPUT","","",null,null],[17,"_PC_NAME_MAX","","",null,null],[17,"_PC_PATH_MAX","","",null,null],[17,"_PC_PIPE_BUF","","",null,null],[17,"_PC_CHOWN_RESTRICTED","","",null,null],[17,"_PC_NO_TRUNC","","",null,null],[17,"_PC_VDISABLE","","",null,null],[17,"_SC_ARG_MAX","","",null,null],[17,"_SC_CHILD_MAX","","",null,null],[17,"_SC_CLK_TCK","","",null,null],[17,"_SC_NGROUPS_MAX","","",null,null],[17,"_SC_OPEN_MAX","","",null,null],[17,"_SC_STREAM_MAX","","",null,null],[17,"_SC_TZNAME_MAX","","",null,null],[17,"_SC_JOB_CONTROL","","",null,null],[17,"_SC_SAVED_IDS","","",null,null],[17,"_SC_REALTIME_SIGNALS","","",null,null],[17,"_SC_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_TIMERS","","",null,null],[17,"_SC_ASYNCHRONOUS_IO","","",null,null],[17,"_SC_PRIORITIZED_IO","","",null,null],[17,"_SC_SYNCHRONIZED_IO","","",null,null],[17,"_SC_FSYNC","","",null,null],[17,"_SC_MAPPED_FILES","","",null,null],[17,"_SC_MEMLOCK","","",null,null],[17,"_SC_MEMLOCK_RANGE","","",null,null],[17,"_SC_MEMORY_PROTECTION","","",null,null],[17,"_SC_MESSAGE_PASSING","","",null,null],[17,"_SC_SEMAPHORES","","",null,null],[17,"_SC_SHARED_MEMORY_OBJECTS","","",null,null],[17,"_SC_AIO_LISTIO_MAX","","",null,null],[17,"_SC_AIO_MAX","","",null,null],[17,"_SC_AIO_PRIO_DELTA_MAX","","",null,null],[17,"_SC_DELAYTIMER_MAX","","",null,null],[17,"_SC_MQ_OPEN_MAX","","",null,null],[17,"_SC_MQ_PRIO_MAX","","",null,null],[17,"_SC_VERSION","","",null,null],[17,"_SC_PAGESIZE","","",null,null],[17,"_SC_PAGE_SIZE","","",null,null],[17,"_SC_RTSIG_MAX","","",null,null],[17,"_SC_SEM_NSEMS_MAX","","",null,null],[17,"_SC_SEM_VALUE_MAX","","",null,null],[17,"_SC_SIGQUEUE_MAX","","",null,null],[17,"_SC_TIMER_MAX","","",null,null],[17,"_SC_BC_BASE_MAX","","",null,null],[17,"_SC_BC_DIM_MAX","","",null,null],[17,"_SC_BC_SCALE_MAX","","",null,null],[17,"_SC_BC_STRING_MAX","","",null,null],[17,"_SC_COLL_WEIGHTS_MAX","","",null,null],[17,"_SC_EXPR_NEST_MAX","","",null,null],[17,"_SC_LINE_MAX","","",null,null],[17,"_SC_RE_DUP_MAX","","",null,null],[17,"_SC_2_VERSION","","",null,null],[17,"_SC_2_C_BIND","","",null,null],[17,"_SC_2_C_DEV","","",null,null],[17,"_SC_2_FORT_DEV","","",null,null],[17,"_SC_2_FORT_RUN","","",null,null],[17,"_SC_2_SW_DEV","","",null,null],[17,"_SC_2_LOCALEDEF","","",null,null],[17,"_SC_IOV_MAX","","",null,null],[17,"_SC_THREADS","","",null,null],[17,"_SC_THREAD_SAFE_FUNCTIONS","","",null,null],[17,"_SC_GETGR_R_SIZE_MAX","","",null,null],[17,"_SC_GETPW_R_SIZE_MAX","","",null,null],[17,"_SC_LOGIN_NAME_MAX","","",null,null],[17,"_SC_TTY_NAME_MAX","","",null,null],[17,"_SC_THREAD_DESTRUCTOR_ITERATIONS","","",null,null],[17,"_SC_THREAD_KEYS_MAX","","",null,null],[17,"_SC_THREAD_STACK_MIN","","",null,null],[17,"_SC_THREAD_THREADS_MAX","","",null,null],[17,"_SC_THREAD_ATTR_STACKADDR","","",null,null],[17,"_SC_THREAD_ATTR_STACKSIZE","","",null,null],[17,"_SC_THREAD_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_THREAD_PRIO_INHERIT","","",null,null],[17,"_SC_THREAD_PRIO_PROTECT","","",null,null],[17,"_SC_NPROCESSORS_ONLN","","",null,null],[17,"_SC_ATEXIT_MAX","","",null,null],[17,"_SC_XOPEN_VERSION","","",null,null],[17,"_SC_XOPEN_XCU_VERSION","","",null,null],[17,"_SC_XOPEN_UNIX","","",null,null],[17,"_SC_XOPEN_CRYPT","","",null,null],[17,"_SC_XOPEN_ENH_I18N","","",null,null],[17,"_SC_XOPEN_SHM","","",null,null],[17,"_SC_2_CHAR_TERM","","",null,null],[17,"_SC_2_UPE","","",null,null],[17,"_SC_XBS5_ILP32_OFF32","","",null,null],[17,"_SC_XBS5_ILP32_OFFBIG","","",null,null],[17,"_SC_XBS5_LPBIG_OFFBIG","","",null,null],[17,"_SC_XOPEN_LEGACY","","",null,null],[17,"_SC_XOPEN_REALTIME","","",null,null],[17,"_SC_XOPEN_REALTIME_THREADS","","",null,null],[17,"_SC_HOST_NAME_MAX","","",null,null],[17,"RLIM_SAVED_MAX","","",null,null],[17,"RLIM_SAVED_CUR","","",null,null],[17,"GLOB_ERR","","",null,null],[17,"GLOB_MARK","","",null,null],[17,"GLOB_NOSORT","","",null,null],[17,"GLOB_DOOFFS","","",null,null],[17,"GLOB_NOCHECK","","",null,null],[17,"GLOB_APPEND","","",null,null],[17,"GLOB_NOESCAPE","","",null,null],[17,"GLOB_NOSPACE","","",null,null],[17,"GLOB_ABORTED","","",null,null],[17,"GLOB_NOMATCH","","",null,null],[17,"POSIX_MADV_NORMAL","","",null,null],[17,"POSIX_MADV_RANDOM","","",null,null],[17,"POSIX_MADV_SEQUENTIAL","","",null,null],[17,"POSIX_MADV_WILLNEED","","",null,null],[17,"S_IEXEC","","",null,null],[17,"S_IWRITE","","",null,null],[17,"S_IREAD","","",null,null],[17,"F_LOCK","","",null,null],[17,"F_TEST","","",null,null],[17,"F_TLOCK","","",null,null],[17,"F_ULOCK","","",null,null],[17,"ST_RDONLY","","",null,null],[17,"ST_NOSUID","","",null,null],[17,"ST_NODEV","","",null,null],[17,"ST_NOEXEC","","",null,null],[17,"ST_SYNCHRONOUS","","",null,null],[17,"ST_MANDLOCK","","",null,null],[17,"ST_WRITE","","",null,null],[17,"ST_APPEND","","",null,null],[17,"ST_IMMUTABLE","","",null,null],[17,"ST_NOATIME","","",null,null],[17,"ST_NODIRATIME","","",null,null],[17,"RTLD_NEXT","","",null,null],[17,"RTLD_DEFAULT","","",null,null],[17,"RTLD_NODELETE","","",null,null],[17,"RTLD_NOW","","",null,null],[17,"TCP_MD5SIG","","",null,null],[17,"PTHREAD_MUTEX_INITIALIZER","","",null,null],[17,"PTHREAD_COND_INITIALIZER","","",null,null],[17,"PTHREAD_RWLOCK_INITIALIZER","","",null,null],[17,"PTHREAD_MUTEX_NORMAL","","",null,null],[17,"PTHREAD_MUTEX_RECURSIVE","","",null,null],[17,"PTHREAD_MUTEX_ERRORCHECK","","",null,null],[17,"PTHREAD_MUTEX_DEFAULT","","",null,null],[17,"__SIZEOF_PTHREAD_COND_T","","",null,null],[17,"SCHED_OTHER","","",null,null],[17,"SCHED_FIFO","","",null,null],[17,"SCHED_RR","","",null,null],[17,"SCHED_BATCH","","",null,null],[17,"SCHED_IDLE","","",null,null],[17,"IPC_CREAT","","",null,null],[17,"IPC_EXCL","","",null,null],[17,"IPC_NOWAIT","","",null,null],[17,"IPC_RMID","","",null,null],[17,"IPC_SET","","",null,null],[17,"IPC_STAT","","",null,null],[17,"IPC_INFO","","",null,null],[17,"SHM_R","","",null,null],[17,"SHM_W","","",null,null],[17,"SHM_RDONLY","","",null,null],[17,"SHM_RND","","",null,null],[17,"SHM_REMAP","","",null,null],[17,"SHM_EXEC","","",null,null],[17,"SHM_LOCK","","",null,null],[17,"SHM_UNLOCK","","",null,null],[17,"SHM_HUGETLB","","",null,null],[17,"SHM_NORESERVE","","",null,null],[17,"EPOLLRDHUP","","",null,null],[17,"EPOLLONESHOT","","",null,null],[17,"QFMT_VFS_OLD","","",null,null],[17,"QFMT_VFS_V0","","",null,null],[17,"SFD_CLOEXEC","","",null,null],[17,"EFD_SEMAPHORE","","",null,null],[17,"NCCS","","",null,null],[17,"AF_NETLINK","","",null,null],[17,"LOG_NFACILITIES","","",null,null],[17,"SEM_FAILED","","",null,null],[17,"RLIMIT_RSS","","",null,null],[17,"RLIMIT_NOFILE","","",null,null],[17,"RLIMIT_AS","","",null,null],[17,"RLIMIT_NPROC","","",null,null],[17,"RLIMIT_MEMLOCK","","",null,null],[17,"RLIM_INFINITY","","",null,null],[17,"RLIMIT_RTTIME","","",null,null],[17,"RLIMIT_NLIMITS","","",null,null],[17,"O_APPEND","","",null,null],[17,"O_CREAT","","",null,null],[17,"O_EXCL","","",null,null],[17,"O_NOCTTY","","",null,null],[17,"O_NONBLOCK","","",null,null],[17,"O_SYNC","","",null,null],[17,"O_RSYNC","","",null,null],[17,"O_DSYNC","","",null,null],[17,"O_FSYNC","","",null,null],[17,"SOCK_NONBLOCK","","",null,null],[17,"LC_PAPER","","",null,null],[17,"LC_NAME","","",null,null],[17,"LC_ADDRESS","","",null,null],[17,"LC_TELEPHONE","","",null,null],[17,"LC_MEASUREMENT","","",null,null],[17,"LC_IDENTIFICATION","","",null,null],[17,"LC_PAPER_MASK","","",null,null],[17,"LC_NAME_MASK","","",null,null],[17,"LC_ADDRESS_MASK","","",null,null],[17,"LC_TELEPHONE_MASK","","",null,null],[17,"LC_MEASUREMENT_MASK","","",null,null],[17,"LC_IDENTIFICATION_MASK","","",null,null],[17,"LC_ALL_MASK","","",null,null],[17,"MAP_ANON","","",null,null],[17,"MAP_ANONYMOUS","","",null,null],[17,"MAP_GROWSDOWN","","",null,null],[17,"MAP_DENYWRITE","","",null,null],[17,"MAP_EXECUTABLE","","",null,null],[17,"MAP_POPULATE","","",null,null],[17,"MAP_NONBLOCK","","",null,null],[17,"MAP_STACK","","",null,null],[17,"EDEADLK","","",null,null],[17,"ENAMETOOLONG","","",null,null],[17,"ENOLCK","","",null,null],[17,"ENOSYS","","",null,null],[17,"ENOTEMPTY","","",null,null],[17,"ELOOP","","",null,null],[17,"ENOMSG","","",null,null],[17,"EIDRM","","",null,null],[17,"ECHRNG","","",null,null],[17,"EL2NSYNC","","",null,null],[17,"EL3HLT","","",null,null],[17,"EL3RST","","",null,null],[17,"ELNRNG","","",null,null],[17,"EUNATCH","","",null,null],[17,"ENOCSI","","",null,null],[17,"EL2HLT","","",null,null],[17,"EBADE","","",null,null],[17,"EBADR","","",null,null],[17,"EXFULL","","",null,null],[17,"ENOANO","","",null,null],[17,"EBADRQC","","",null,null],[17,"EBADSLT","","",null,null],[17,"EMULTIHOP","","",null,null],[17,"EOVERFLOW","","",null,null],[17,"ENOTUNIQ","","",null,null],[17,"EBADFD","","",null,null],[17,"EBADMSG","","",null,null],[17,"EREMCHG","","",null,null],[17,"ELIBACC","","",null,null],[17,"ELIBBAD","","",null,null],[17,"ELIBSCN","","",null,null],[17,"ELIBMAX","","",null,null],[17,"ELIBEXEC","","",null,null],[17,"EILSEQ","","",null,null],[17,"ERESTART","","",null,null],[17,"ESTRPIPE","","",null,null],[17,"EUSERS","","",null,null],[17,"ENOTSOCK","","",null,null],[17,"EDESTADDRREQ","","",null,null],[17,"EMSGSIZE","","",null,null],[17,"EPROTOTYPE","","",null,null],[17,"ENOPROTOOPT","","",null,null],[17,"EPROTONOSUPPORT","","",null,null],[17,"ESOCKTNOSUPPORT","","",null,null],[17,"EOPNOTSUPP","","",null,null],[17,"EPFNOSUPPORT","","",null,null],[17,"EAFNOSUPPORT","","",null,null],[17,"EADDRINUSE","","",null,null],[17,"EADDRNOTAVAIL","","",null,null],[17,"ENETDOWN","","",null,null],[17,"ENETUNREACH","","",null,null],[17,"ENETRESET","","",null,null],[17,"ECONNABORTED","","",null,null],[17,"ECONNRESET","","",null,null],[17,"ENOBUFS","","",null,null],[17,"EISCONN","","",null,null],[17,"ENOTCONN","","",null,null],[17,"ESHUTDOWN","","",null,null],[17,"ETOOMANYREFS","","",null,null],[17,"ETIMEDOUT","","",null,null],[17,"ECONNREFUSED","","",null,null],[17,"EHOSTDOWN","","",null,null],[17,"EHOSTUNREACH","","",null,null],[17,"EALREADY","","",null,null],[17,"EINPROGRESS","","",null,null],[17,"ESTALE","","",null,null],[17,"EUCLEAN","","",null,null],[17,"ENOTNAM","","",null,null],[17,"ENAVAIL","","",null,null],[17,"EISNAM","","",null,null],[17,"EREMOTEIO","","",null,null],[17,"EDQUOT","","",null,null],[17,"ENOMEDIUM","","",null,null],[17,"EMEDIUMTYPE","","",null,null],[17,"ECANCELED","","",null,null],[17,"ENOKEY","","",null,null],[17,"EKEYEXPIRED","","",null,null],[17,"EKEYREVOKED","","",null,null],[17,"EKEYREJECTED","","",null,null],[17,"EOWNERDEAD","","",null,null],[17,"ENOTRECOVERABLE","","",null,null],[17,"EHWPOISON","","",null,null],[17,"ERFKILL","","",null,null],[17,"SOCK_STREAM","","",null,null],[17,"SOCK_DGRAM","","",null,null],[17,"SOCK_SEQPACKET","","",null,null],[17,"SOL_SOCKET","","",null,null],[17,"SO_REUSEADDR","","",null,null],[17,"SO_TYPE","","",null,null],[17,"SO_ERROR","","",null,null],[17,"SO_DONTROUTE","","",null,null],[17,"SO_BROADCAST","","",null,null],[17,"SO_SNDBUF","","",null,null],[17,"SO_RCVBUF","","",null,null],[17,"SO_KEEPALIVE","","",null,null],[17,"SO_OOBINLINE","","",null,null],[17,"SO_LINGER","","",null,null],[17,"SO_REUSEPORT","","",null,null],[17,"SO_ACCEPTCONN","","",null,null],[17,"TCP_COOKIE_TRANSACTIONS","","",null,null],[17,"TCP_THIN_LINEAR_TIMEOUTS","","",null,null],[17,"TCP_THIN_DUPACK","","",null,null],[17,"TCP_USER_TIMEOUT","","",null,null],[17,"TCP_REPAIR","","",null,null],[17,"TCP_REPAIR_QUEUE","","",null,null],[17,"TCP_QUEUE_SEQ","","",null,null],[17,"TCP_REPAIR_OPTIONS","","",null,null],[17,"TCP_FASTOPEN","","",null,null],[17,"TCP_TIMESTAMP","","",null,null],[17,"SA_ONSTACK","","",null,null],[17,"SA_SIGINFO","","",null,null],[17,"SA_NOCLDWAIT","","",null,null],[17,"SIGCHLD","","",null,null],[17,"SIGBUS","","",null,null],[17,"SIGUSR1","","",null,null],[17,"SIGUSR2","","",null,null],[17,"SIGCONT","","",null,null],[17,"SIGSTOP","","",null,null],[17,"SIGTSTP","","",null,null],[17,"SIGURG","","",null,null],[17,"SIGIO","","",null,null],[17,"SIGSYS","","",null,null],[17,"SIGSTKFLT","","",null,null],[17,"SIGUNUSED","","",null,null],[17,"SIGTTIN","","",null,null],[17,"SIGTTOU","","",null,null],[17,"SIGXCPU","","",null,null],[17,"SIGXFSZ","","",null,null],[17,"SIGVTALRM","","",null,null],[17,"SIGPROF","","",null,null],[17,"SIGWINCH","","",null,null],[17,"SIGPOLL","","",null,null],[17,"SIGPWR","","",null,null],[17,"SIG_SETMASK","","",null,null],[17,"SIG_BLOCK","","",null,null],[17,"SIG_UNBLOCK","","",null,null],[17,"FALLOC_FL_KEEP_SIZE","","",null,null],[17,"FALLOC_FL_PUNCH_HOLE","","",null,null],[17,"BUFSIZ","","",null,null],[17,"TMP_MAX","","",null,null],[17,"FOPEN_MAX","","",null,null],[17,"POSIX_MADV_DONTNEED","","",null,null],[17,"_SC_2_C_VERSION","","",null,null],[17,"RUSAGE_THREAD","","",null,null],[17,"O_ACCMODE","","",null,null],[17,"O_ASYNC","","",null,null],[17,"O_NDELAY","","",null,null],[17,"RUSAGE_CHILDREN","","",null,null],[17,"ST_RELATIME","","",null,null],[17,"NI_MAXHOST","","",null,null],[17,"ADFS_SUPER_MAGIC","","",null,null],[17,"AFFS_SUPER_MAGIC","","",null,null],[17,"CODA_SUPER_MAGIC","","",null,null],[17,"CRAMFS_MAGIC","","",null,null],[17,"EFS_SUPER_MAGIC","","",null,null],[17,"EXT2_SUPER_MAGIC","","",null,null],[17,"EXT3_SUPER_MAGIC","","",null,null],[17,"EXT4_SUPER_MAGIC","","",null,null],[17,"HPFS_SUPER_MAGIC","","",null,null],[17,"HUGETLBFS_MAGIC","","",null,null],[17,"ISOFS_SUPER_MAGIC","","",null,null],[17,"JFFS2_SUPER_MAGIC","","",null,null],[17,"MINIX_SUPER_MAGIC","","",null,null],[17,"MINIX_SUPER_MAGIC2","","",null,null],[17,"MINIX2_SUPER_MAGIC","","",null,null],[17,"MINIX2_SUPER_MAGIC2","","",null,null],[17,"MSDOS_SUPER_MAGIC","","",null,null],[17,"NCP_SUPER_MAGIC","","",null,null],[17,"NFS_SUPER_MAGIC","","",null,null],[17,"OPENPROM_SUPER_MAGIC","","",null,null],[17,"PROC_SUPER_MAGIC","","",null,null],[17,"QNX4_SUPER_MAGIC","","",null,null],[17,"REISERFS_SUPER_MAGIC","","",null,null],[17,"SMB_SUPER_MAGIC","","",null,null],[17,"TMPFS_MAGIC","","",null,null],[17,"USBDEVICE_SUPER_MAGIC","","",null,null],[17,"VEOF","","",null,null],[17,"VEOL","","",null,null],[17,"VEOL2","","",null,null],[17,"VMIN","","",null,null],[17,"IEXTEN","","",null,null],[17,"TOSTOP","","",null,null],[17,"FLUSHO","","",null,null],[17,"IUTF8","","",null,null],[17,"CPU_SETSIZE","","",null,null],[17,"EXTPROC","","",null,null],[17,"QFMT_VFS_V1","","",null,null],[17,"PTRACE_TRACEME","","",null,null],[17,"PTRACE_PEEKTEXT","","",null,null],[17,"PTRACE_PEEKDATA","","",null,null],[17,"PTRACE_PEEKUSER","","",null,null],[17,"PTRACE_POKETEXT","","",null,null],[17,"PTRACE_POKEDATA","","",null,null],[17,"PTRACE_POKEUSER","","",null,null],[17,"PTRACE_CONT","","",null,null],[17,"PTRACE_KILL","","",null,null],[17,"PTRACE_SINGLESTEP","","",null,null],[17,"PTRACE_ATTACH","","",null,null],[17,"PTRACE_DETACH","","",null,null],[17,"PTRACE_SYSCALL","","",null,null],[17,"PTRACE_SETOPTIONS","","",null,null],[17,"PTRACE_GETEVENTMSG","","",null,null],[17,"PTRACE_GETSIGINFO","","",null,null],[17,"PTRACE_SETSIGINFO","","",null,null],[17,"PTRACE_GETREGSET","","",null,null],[17,"PTRACE_SETREGSET","","",null,null],[17,"PTRACE_SEIZE","","",null,null],[17,"PTRACE_INTERRUPT","","",null,null],[17,"PTRACE_LISTEN","","",null,null],[17,"PTRACE_PEEKSIGINFO","","",null,null],[17,"MADV_DODUMP","","",null,null],[17,"MADV_DONTDUMP","","",null,null],[17,"EPOLLWAKEUP","","",null,null],[17,"MADV_HUGEPAGE","","",null,null],[17,"MADV_NOHUGEPAGE","","",null,null],[17,"MAP_HUGETLB","","",null,null],[17,"EFD_NONBLOCK","","",null,null],[17,"F_GETLK","","",null,null],[17,"F_GETOWN","","",null,null],[17,"F_SETOWN","","",null,null],[17,"F_SETLK","","",null,null],[17,"F_SETLKW","","",null,null],[17,"SEEK_DATA","","",null,null],[17,"SEEK_HOLE","","",null,null],[17,"SFD_NONBLOCK","","",null,null],[17,"TCSANOW","","",null,null],[17,"TCSADRAIN","","",null,null],[17,"TCSAFLUSH","","",null,null],[17,"TCGETS","","",null,null],[17,"TCSETS","","",null,null],[17,"TCSETSW","","",null,null],[17,"TCSETSF","","",null,null],[17,"TCGETA","","",null,null],[17,"TCSETA","","",null,null],[17,"TCSETAW","","",null,null],[17,"TCSETAF","","",null,null],[17,"TCSBRK","","",null,null],[17,"TCXONC","","",null,null],[17,"TCFLSH","","",null,null],[17,"TIOCGSOFTCAR","","",null,null],[17,"TIOCSSOFTCAR","","",null,null],[17,"TIOCINQ","","",null,null],[17,"TIOCLINUX","","",null,null],[17,"TIOCGSERIAL","","",null,null],[17,"TIOCEXCL","","",null,null],[17,"TIOCNXCL","","",null,null],[17,"TIOCSCTTY","","",null,null],[17,"TIOCGPGRP","","",null,null],[17,"TIOCSPGRP","","",null,null],[17,"TIOCOUTQ","","",null,null],[17,"TIOCSTI","","",null,null],[17,"TIOCGWINSZ","","",null,null],[17,"TIOCSWINSZ","","",null,null],[17,"TIOCMGET","","",null,null],[17,"TIOCMBIS","","",null,null],[17,"TIOCMBIC","","",null,null],[17,"TIOCMSET","","",null,null],[17,"FIONREAD","","",null,null],[17,"TIOCCONS","","",null,null],[17,"RTLD_DEEPBIND","","",null,null],[17,"RTLD_GLOBAL","","",null,null],[17,"RTLD_NOLOAD","","",null,null],[17,"PTHREAD_STACK_MIN","","",null,null],[17,"__SIZEOF_PTHREAD_RWLOCK_T","","",null,null],[17,"__SIZEOF_PTHREAD_MUTEX_T","","",null,null],[17,"__SIZEOF_PTHREAD_MUTEXATTR_T","","",null,null],[17,"O_DIRECT","","",null,null],[17,"O_DIRECTORY","","",null,null],[17,"O_NOFOLLOW","","",null,null],[17,"MAP_LOCKED","","",null,null],[17,"MAP_NORESERVE","","",null,null],[17,"MAP_32BIT","","",null,null],[17,"EDEADLOCK","","",null,null],[17,"SO_PEERCRED","","",null,null],[17,"SO_RCVLOWAT","","",null,null],[17,"SO_SNDLOWAT","","",null,null],[17,"SO_RCVTIMEO","","",null,null],[17,"SO_SNDTIMEO","","",null,null],[17,"FIOCLEX","","",null,null],[17,"FIONBIO","","",null,null],[17,"PTRACE_GETFPREGS","","",null,null],[17,"PTRACE_SETFPREGS","","",null,null],[17,"PTRACE_GETFPXREGS","","",null,null],[17,"PTRACE_SETFPXREGS","","",null,null],[17,"PTRACE_GETREGS","","",null,null],[17,"PTRACE_SETREGS","","",null,null],[17,"SYS_gettid","","",null,null],[17,"SYS_perf_event_open","","",null,null]],"paths":[[3,"utimbuf"],[3,"timeval"],[3,"timespec"],[3,"rlimit"],[3,"rusage"],[3,"in_addr"],[3,"in6_addr"],[3,"ip_mreq"],[3,"ipv6_mreq"],[3,"hostent"],[3,"iovec"],[3,"pollfd"],[3,"winsize"],[3,"linger"],[3,"sockaddr"],[3,"sockaddr_in"],[3,"sockaddr_in6"],[3,"sockaddr_un"],[3,"sockaddr_storage"],[3,"addrinfo"],[3,"sockaddr_nl"],[3,"sockaddr_ll"],[3,"tm"],[3,"sched_param"],[3,"Dl_info"],[3,"epoll_event"],[3,"utsname"],[3,"lconv"],[3,"dirent"],[3,"dirent64"],[3,"rlimit64"],[3,"glob_t"],[3,"ifaddrs"],[3,"passwd"],[3,"statvfs"],[3,"dqblk"],[3,"signalfd_siginfo"],[3,"mq_attr"],[3,"sigaction"],[3,"stack_t"],[3,"siginfo_t"],[3,"glob64_t"],[3,"ucred"],[3,"statfs"],[3,"msghdr"],[3,"termios"],[3,"flock"],[3,"ipc_perm"],[3,"shmid_ds"],[3,"sysinfo"],[3,"stat"],[3,"stat64"],[3,"_libc_fpxreg"],[3,"_libc_xmmreg"],[3,"_libc_fpstate"],[3,"mcontext_t"],[3,"ucontext_t"],[4,"Option"],[3,"Wrapping"],[3,"ParseFloatError"],[4,"FpCategory"],[3,"TryFromIntError"],[3,"ParseIntError"],[3,"NonZero"],[3,"Unique"],[3,"Shared"],[3,"PhantomData"],[3,"RangeFull"],[3,"Range"],[3,"RangeFrom"],[3,"RangeTo"],[4,"RangeInclusive"],[3,"RangeToInclusive"],[4,"Ordering"],[8,"Any"],[3,"TypeId"],[3,"AtomicBool"],[3,"AtomicPtr"],[4,"Ordering"],[3,"AtomicI8"],[3,"AtomicU8"],[3,"AtomicI16"],[3,"AtomicU16"],[3,"AtomicI32"],[3,"AtomicU32"],[3,"AtomicI64"],[3,"AtomicU64"],[3,"AtomicIsize"],[3,"AtomicUsize"],[3,"Cell"],[4,"BorrowState"],[3,"RefCell"],[3,"Ref"],[3,"RefMut"],[3,"UnsafeCell"],[3,"EscapeUnicode"],[3,"EscapeDefault"],[3,"EncodeUtf8"],[3,"EncodeUtf16"],[3,"StepBy"],[3,"Repeat"],[3,"Empty"],[3,"Once"],[3,"Rev"],[3,"Cloned"],[3,"Cycle"],[3,"Chain"],[3,"Zip"],[3,"Map"],[3,"Filter"],[3,"FilterMap"],[3,"Enumerate"],[3,"Peekable"],[3,"SkipWhile"],[3,"TakeWhile"],[3,"Skip"],[3,"Take"],[3,"Scan"],[3,"FlatMap"],[3,"Fuse"],[3,"Inspect"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Slice"],[3,"TraitObject"],[4,"Result"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[3,"Split"],[3,"SplitMut"],[3,"SplitN"],[3,"RSplitN"],[3,"SplitNMut"],[3,"RSplitNMut"],[3,"Windows"],[3,"Chunks"],[3,"ChunksMut"],[4,"SearchStep"],[3,"CharSearcher"],[3,"CharSliceSearcher"],[3,"CharPredicateSearcher"],[3,"StrSearcher"],[3,"ParseBoolError"],[3,"Utf8Error"],[3,"Chars"],[3,"CharIndices"],[3,"Bytes"],[3,"Split"],[3,"RSplit"],[3,"SplitTerminator"],[3,"RSplitTerminator"],[3,"SplitN"],[3,"RSplitN"],[3,"MatchIndices"],[3,"RMatchIndices"],[3,"Matches"],[3,"RMatches"],[3,"Lines"],[3,"LinesAny"],[3,"CharRange"],[3,"SipHasher"],[3,"BuildHasherDefault"],[4,"Alignment"],[3,"DebugStruct"],[3,"DebugTuple"],[3,"DebugSet"],[3,"DebugList"],[3,"DebugMap"],[3,"Error"],[3,"Arguments"],[3,"Formatter"],[8,"Clone"],[3,"pthread_attr_t"],[3,"sigset_t"],[3,"sem_t"],[3,"pthread_mutex_t"],[3,"pthread_rwlock_t"],[3,"pthread_mutexattr_t"],[3,"pthread_cond_t"],[3,"fsid_t"],[3,"cpu_set_t"],[3,"fd_set"]]};
searchIndex["timely_communication"] = {"doc":"A simple communication infrastructure providing typed exchange channels.","items":[[0,"allocator","timely_communication","Types and traits for the allocation of channels between threads, process, and computers.",null,null],[0,"thread","timely_communication::allocator","",null,null],[3,"Thread","timely_communication::allocator::thread","",null,null],[11,"index","","",0,null],[11,"peers","","",0,null],[11,"allocate","","",0,null],[11,"new","","",0,null],[0,"process","timely_communication::allocator","",null,null],[3,"Process","timely_communication::allocator::process","",null,null],[11,"inner","","",1,null],[11,"new_vector","","",1,{"inputs":[{"name":"usize"}],"output":{"name":"vec"}}],[11,"index","","",1,null],[11,"peers","","",1,null],[11,"allocate","","",1,null],[0,"binary","timely_communication::allocator","",null,null],[3,"Binary","timely_communication::allocator::binary","",null,null],[12,"inner","","",2,null],[12,"index","","",2,null],[12,"peers","","",2,null],[12,"allocated","","",2,null],[12,"readers","","",2,null],[12,"senders","","",2,null],[11,"inner","","",2,null],[11,"index","","",2,null],[11,"peers","","",2,null],[11,"allocate","","",2,null],[0,"generic","timely_communication::allocator","A generic allocator, wrapping known implementors of `Allocate`.",null,null],[4,"Generic","timely_communication::allocator::generic","Enumerates known implementors of `Allocate`.\nPasses trait method calls on to members.",null,null],[13,"Thread","","",3,null],[13,"Process","","",3,null],[13,"Binary","","",3,null],[11,"index","","The index of the worker out of `(0..self.peers())`.",3,null],[11,"peers","","The number of workers.",3,null],[11,"allocate","","Constructs several send endpoints and one receive endpoint.",3,null],[11,"index","","",3,null],[11,"peers","","",3,null],[11,"allocate","","",3,null],[8,"Allocate","timely_communication::allocator","",null,null],[10,"index","","The index of the worker out of `(0..self.peers())`.",4,null],[10,"peers","","The number of workers.",4,null],[10,"allocate","","Constructs several send endpoints and one receive endpoint.",4,null],[0,"initialize","timely_communication","Initialization logic for a generic instance of the `Allocate` channel allocation trait.",null,null],[3,"WorkerGuards","timely_communication::initialize","Maintains `JoinHandle`s for worker threads.",null,null],[4,"Configuration","","Possible configurations for the communication infrastructure.",null,null],[13,"Thread","","Use one thread.",5,null],[13,"Process","","Use one process with an indicated number of threads.",5,null],[13,"Cluster","","Expect multiple processes indicated by `(threads, process, host_list, report)`.",5,null],[5,"initialize","","Initializes communication and executes a distributed computation.",null,{"inputs":[{"name":"configuration"},{"name":"f"}],"output":{"name":"result"}}],[11,"from_args","","Constructs a new configuration by parsing supplied text arguments.",5,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"join","","Waits on the worker threads and returns the results they produce.",6,null],[11,"drop","","",6,null],[8,"Data","timely_communication","A composite trait for types that may be used with channels.",null,null],[8,"Serialize","","Conversions to and from `Vec&lt;u8&gt;`.",null,null],[10,"into_bytes","","Append the binary representation of `self` to a vector of bytes. The `&amp;mut self` argument\nmay be mutated, but the second argument should only be appended to.",7,null],[10,"from_bytes","","Recover an instance of Self from its binary representation. The `&amp;mut Vec&lt;u8&gt;` argument may\nbe taken with `mem::replace` if it is needed.",7,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[8,"Push","","Pushing elements of type `T`.",null,null],[10,"push","","Pushes `element` and provides the opportunity to take ownership.",8,null],[11,"send","","Pushes `element` and drops any resulting resources.",8,null],[11,"done","","Pushes `None`, conventionally signalling a flush.",8,null],[8,"Pull","","Pulling elements of type `T`.",null,null],[10,"pull","","Pulls an element and provides the opportunity to take ownership.",9,null],[11,"recv","","Takes an `Option&lt;T&gt;` and leaves `None` behind.",9,null],[11,"push","alloc::boxed","",10,null],[11,"pull","","",10,null]],"paths":[[3,"Thread"],[3,"Process"],[3,"Binary"],[4,"Generic"],[8,"Allocate"],[4,"Configuration"],[3,"WorkerGuards"],[8,"Serialize"],[8,"Push"],[8,"Pull"],[3,"Box"]]};
searchIndex["kernel32"] = {"doc":"","items":[],"paths":[]};
searchIndex["winapi"] = {"doc":"","items":[],"paths":[]};
searchIndex["timely_sort"] = {"doc":"","items":[[3,"LSBRadixSorter","timely_sort","",null,null],[3,"LSBSWCRadixSorter","","",null,null],[11,"new","","",0,{"inputs":[],"output":{"name":"radixsorter"}}],[11,"extend","","",0,null],[11,"push","","",0,null],[11,"push_batch","","",0,null],[11,"sort","","",0,null],[11,"finish","","",0,null],[11,"recycle","","",0,null],[11,"new","","",1,{"inputs":[],"output":{"name":"radixsorter"}}],[11,"extend","","",1,null],[11,"push","","",1,null],[11,"push_batch","","",1,null],[11,"sort","","",1,null],[11,"finish","","",1,null],[11,"recycle","","",1,null],[8,"Unsigned","","",null,null],[10,"bytes","","",2,{"inputs":[],"output":{"name":"usize"}}],[10,"as_u64","","",2,null]],"paths":[[3,"LSBRadixSorter"],[3,"LSBSWCRadixSorter"],[8,"Unsigned"]]};
searchIndex["getopts"] = {"doc":"Simple getopt alternative.","items":[[3,"Options","getopts","A description of the options that a program can handle.",null,null],[3,"Matches","","The result of checking command line arguments. Contains a vector\nof matches and a vector of free strings.",null,null],[12,"free","","Free string fragments",0,null],[4,"ParsingStyle","","What parsing style to use when parsing arguments.",null,null],[13,"FloatingFrees","","Flags and &quot;free&quot; arguments can be freely inter-mixed.",1,null],[13,"StopAtFirstFree","","As soon as a &quot;free&quot; argument (i.e. non-flag) is encountered, stop\nconsidering any remaining arguments as flags.",1,null],[4,"HasArg","","Describes whether an option has an argument.",null,null],[13,"Yes","","The option requires an argument.",2,null],[13,"No","","The option takes no argument.",2,null],[13,"Maybe","","The option argument is optional.",2,null],[4,"Occur","","Describes how often an option may occur.",null,null],[13,"Req","","The option occurs once.",3,null],[13,"Optional","","The option occurs at most once.",3,null],[13,"Multi","","The option occurs zero or more times.",3,null],[4,"Fail","","The type returned when the command line does not conform to the\nexpected format. Use the `Debug` implementation to output detailed\ninformation.",null,null],[13,"ArgumentMissing","","The option requires an argument but none was passed.",4,null],[13,"UnrecognizedOption","","The passed option is not declared among the possible options.",4,null],[13,"OptionMissing","","A required option is not present.",4,null],[13,"OptionDuplicated","","A single occurrence option is being used multiple times.",4,null],[13,"UnexpectedArgument","","There&#39;s an argument being passed to a non-argument option.",4,null],[4,"FailType","","The type of failure that occurred.",null,null],[13,"ArgumentMissing_","","",5,null],[13,"UnrecognizedOption_","","",5,null],[13,"OptionMissing_","","",5,null],[13,"OptionDuplicated_","","",5,null],[13,"UnexpectedArgument_","","",5,null],[6,"Result","","The result of parsing a command line with a set of options.",null,null],[11,"new","","Create a blank set of options.",6,{"inputs":[],"output":{"name":"options"}}],[11,"parsing_style","","Set the parsing style.",6,null],[11,"opt","","Create a generic option group, stating all parameters explicitly.",6,null],[11,"optflag","","Create a long option that is optional and does not take an argument.",6,null],[11,"optflagmulti","","Create a long option that can occur more than once and does not\ntake an argument.",6,null],[11,"optflagopt","","Create a long option that is optional and takes an optional argument.",6,null],[11,"optmulti","","Create a long option that is optional, takes an argument, and may occur\nmultiple times.",6,null],[11,"optopt","","Create a long option that is optional and takes an argument.",6,null],[11,"reqopt","","Create a long option that is required and takes an argument.",6,null],[11,"parse","","Parse command line arguments according to the provided options.",6,null],[11,"short_usage","","Derive a short one-line usage summary from a set of long options.",6,null],[11,"usage","","Derive a usage message from a set of options.",6,null],[11,"eq","","",1,null],[11,"clone","","",1,null],[11,"eq","","",2,null],[11,"clone","","",2,null],[11,"eq","","",3,null],[11,"clone","","",3,null],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"clone","","",0,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"fmt","","",4,null],[11,"clone","","",4,null],[11,"description","","",4,null],[11,"eq","","",5,null],[11,"clone","","",5,null],[11,"opt_present","","Returns true if an option was matched.",0,null],[11,"opt_count","","Returns the number of times an option was matched.",0,null],[11,"opts_present","","Returns true if any of several options were matched.",0,null],[11,"opts_str","","Returns the string argument supplied to one of several matching options or `None`.",0,null],[11,"opt_strs","","Returns a vector of the arguments provided to all matches of the given\noption.",0,null],[11,"opt_str","","Returns the string argument supplied to a matching option or `None`.",0,null],[11,"opt_default","","Returns the matching string, a default, or `None`.",0,null],[11,"fmt","","",4,null]],"paths":[[3,"Matches"],[4,"ParsingStyle"],[4,"HasArg"],[4,"Occur"],[4,"Fail"],[4,"FailType"],[3,"Options"]]};
searchIndex["byteorder"] = {"doc":"This crate provides convenience methods for encoding and decoding numbers\nin either big-endian or little-endian order.","items":[[4,"Error","byteorder","An error type for reading bytes.",null,null],[13,"UnexpectedEOF","","An unexpected EOF.",0,null],[13,"Io","","Any underlying IO error that occurs while reading bytes.",0,null],[4,"BigEndian","","Defines big-endian serialization.",null,null],[4,"LittleEndian","","Defines little-endian serialization.",null,null],[11,"fmt","","",0,null],[11,"from","","",0,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"from","std::io::error","",1,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"fmt","byteorder","",0,null],[11,"description","","",0,null],[11,"cause","","",0,null],[6,"Result","","A short-hand for `result::Result&lt;T, byteorder::Error&gt;`.",null,null],[6,"NativeEndian","","Defines system native-endian serialization.",null,null],[8,"ReadBytesExt","","Extends `Read` with methods for reading numbers. (For `std::io`.)",null,null],[11,"read_u8","","Reads an unsigned 8 bit integer from the underlying reader.",2,null],[11,"read_i8","","Reads a signed 8 bit integer from the underlying reader.",2,null],[11,"read_u16","","Reads an unsigned 16 bit integer from the underlying reader.",2,null],[11,"read_i16","","Reads a signed 16 bit integer from the underlying reader.",2,null],[11,"read_u32","","Reads an unsigned 32 bit integer from the underlying reader.",2,null],[11,"read_i32","","Reads a signed 32 bit integer from the underlying reader.",2,null],[11,"read_u64","","Reads an unsigned 64 bit integer from the underlying reader.",2,null],[11,"read_i64","","Reads a signed 64 bit integer from the underlying reader.",2,null],[11,"read_uint","","Reads an unsigned n-bytes integer from the underlying reader.",2,null],[11,"read_int","","Reads a signed n-bytes integer from the underlying reader.",2,null],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number from\nthe underlying reader.",2,null],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number from\nthe underlying reader.",2,null],[8,"WriteBytesExt","","Extends `Write` with methods for writing numbers. (For `std::io`.)",null,null],[11,"write_u8","","Writes an unsigned 8 bit integer to the underlying writer.",3,null],[11,"write_i8","","Writes a signed 8 bit integer to the underlying writer.",3,null],[11,"write_u16","","Writes an unsigned 16 bit integer to the underlying writer.",3,null],[11,"write_i16","","Writes a signed 16 bit integer to the underlying writer.",3,null],[11,"write_u32","","Writes an unsigned 32 bit integer to the underlying writer.",3,null],[11,"write_i32","","Writes a signed 32 bit integer to the underlying writer.",3,null],[11,"write_u64","","Writes an unsigned 64 bit integer to the underlying writer.",3,null],[11,"write_i64","","Writes a signed 64 bit integer to the underlying writer.",3,null],[11,"write_uint","","Writes an unsigned n-bytes integer to the underlying writer.",3,null],[11,"write_int","","Writes a signed n-bytes integer to the underlying writer.",3,null],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number to\nthe underlying writer.",3,null],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number to\nthe underlying writer.",3,null],[8,"ByteOrder","","ByteOrder describes types that can serialize integers as bytes.",null,null],[10,"read_u16","","Reads an unsigned 16 bit integer from `buf`.",4,null],[10,"read_u32","","Reads an unsigned 32 bit integer from `buf`.",4,null],[10,"read_u64","","Reads an unsigned 64 bit integer from `buf`.",4,null],[10,"read_uint","","Reads an unsigned n-bytes integer from `buf`.",4,null],[10,"write_u16","","Writes an unsigned 16 bit integer `n` to `buf`.",4,null],[10,"write_u32","","Writes an unsigned 32 bit integer `n` to `buf`.",4,null],[10,"write_u64","","Writes an unsigned 64 bit integer `n` to `buf`.",4,null],[10,"write_uint","","Writes an unsigned integer `n` to `buf` using only `nbytes`.",4,null],[11,"read_i16","","Reads a signed 16 bit integer from `buf`.",4,null],[11,"read_i32","","Reads a signed 32 bit integer from `buf`.",4,null],[11,"read_i64","","Reads a signed 64 bit integer from `buf`.",4,null],[11,"read_int","","Reads a signed n-bytes integer from `buf`.",4,null],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number.",4,null],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number.",4,null],[11,"write_i16","","Writes a signed 16 bit integer `n` to `buf`.",4,null],[11,"write_i32","","Writes a signed 32 bit integer `n` to `buf`.",4,null],[11,"write_i64","","Writes a signed 64 bit integer `n` to `buf`.",4,null],[11,"write_int","","Writes a signed integer `n` to `buf` using only `nbytes`.",4,null],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number.",4,null],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number.",4,null],[11,"read_u16","","",5,null],[11,"read_u32","","",5,null],[11,"read_u64","","",5,null],[11,"read_uint","","",5,null],[11,"write_u16","","",5,null],[11,"write_u32","","",5,null],[11,"write_u64","","",5,null],[11,"write_uint","","",5,null],[11,"read_u16","","",6,null],[11,"read_u32","","",6,null],[11,"read_u64","","",6,null],[11,"read_uint","","",6,null],[11,"write_u16","","",6,null],[11,"write_u32","","",6,null],[11,"write_u64","","",6,null],[11,"write_uint","","",6,null],[11,"read_u8","","Reads an unsigned 8 bit integer from the underlying reader.",2,null],[11,"read_i8","","Reads a signed 8 bit integer from the underlying reader.",2,null],[11,"read_u16","","Reads an unsigned 16 bit integer from the underlying reader.",2,null],[11,"read_i16","","Reads a signed 16 bit integer from the underlying reader.",2,null],[11,"read_u32","","Reads an unsigned 32 bit integer from the underlying reader.",2,null],[11,"read_i32","","Reads a signed 32 bit integer from the underlying reader.",2,null],[11,"read_u64","","Reads an unsigned 64 bit integer from the underlying reader.",2,null],[11,"read_i64","","Reads a signed 64 bit integer from the underlying reader.",2,null],[11,"read_uint","","Reads an unsigned n-bytes integer from the underlying reader.",2,null],[11,"read_int","","Reads a signed n-bytes integer from the underlying reader.",2,null],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number from\nthe underlying reader.",2,null],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number from\nthe underlying reader.",2,null],[11,"write_u8","","Writes an unsigned 8 bit integer to the underlying writer.",3,null],[11,"write_i8","","Writes a signed 8 bit integer to the underlying writer.",3,null],[11,"write_u16","","Writes an unsigned 16 bit integer to the underlying writer.",3,null],[11,"write_i16","","Writes a signed 16 bit integer to the underlying writer.",3,null],[11,"write_u32","","Writes an unsigned 32 bit integer to the underlying writer.",3,null],[11,"write_i32","","Writes a signed 32 bit integer to the underlying writer.",3,null],[11,"write_u64","","Writes an unsigned 64 bit integer to the underlying writer.",3,null],[11,"write_i64","","Writes a signed 64 bit integer to the underlying writer.",3,null],[11,"write_uint","","Writes an unsigned n-bytes integer to the underlying writer.",3,null],[11,"write_int","","Writes a signed n-bytes integer to the underlying writer.",3,null],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number to\nthe underlying writer.",3,null],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number to\nthe underlying writer.",3,null]],"paths":[[4,"Error"],[3,"Error"],[8,"ReadBytesExt"],[8,"WriteBytesExt"],[8,"ByteOrder"],[4,"BigEndian"],[4,"LittleEndian"]]};
searchIndex["abomonation"] = {"doc":"Abomonation (spelling intentional) is a fast serialization / deserialization crate.","items":[[5,"encode","abomonation","Encodes a typed reference into a binary buffer.",null,{"inputs":[{"name":"t"},{"name":"vec"}],"output":null}],[5,"decode","","Decodes a mutable binary slice into an immutable typed reference.",null,null],[8,"Abomonation","","Abomonation provides methods to serialize any heap data the implementor owns.",null,null],[11,"entomb","","Write any additional information about `&amp;self` beyond its binary representation.",0,null],[11,"embalm","","Perform any final edits before committing `&amp;mut self`. Importantly, this method should only\nmanipulate the fields of `self`; any owned memory may not be valid.",0,null],[11,"exhume","","Recover any information for `&amp;mut self` not evident from its binary representation.",0,null],[11,"embalm","core::option","",1,null],[11,"entomb","","",1,null],[11,"exhume","","",1,null],[11,"embalm","collections::string","",2,null],[11,"entomb","","",2,null],[11,"exhume","","",2,null],[11,"embalm","collections::vec","",3,null],[11,"entomb","","",3,null],[11,"exhume","","",3,null],[11,"embalm","alloc::boxed","",4,null],[11,"entomb","","",4,null],[11,"exhume","","",4,null],[14,"unsafe_abomonate!","abomonation","The `unsafe_abomonate!` macro takes a type name with an optional list of fields, and implements\n`Abomonation` for the type, following the pattern of the tuple implementations: each method\ncalls the equivalent method on each of its fields.",null,null]],"paths":[[8,"Abomonation"],[4,"Option"],[3,"String"],[3,"Vec"],[3,"Box"]]};
initSearch(searchIndex);
